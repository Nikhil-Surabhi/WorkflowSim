{"version":3,"sources":["Api/chart.api.js","Components/Canvas/LeftSidebar.js","Components/Canvas/CanvasArea.js","Components/ContextMenu.js","Components/ConnectorContextMenu.js","Components/EditorPopup.js","Components/CustomSelect.js","Components/Canvas/ShapePopup.js","Components/TextEditorPopup.js","Components/ContextMultiSelectMenu.js","Components/SelectionMenu.js","Components/Canvas/Header.js","Components/Canvas/Menu.js","Api/flowchart.api.js","Components/Canvas/RightSidebar.js","Components/Canvas/CanvasFooter.js","Views/Canvas.js","Api/auth.api.js","Views/Auth/GithubLogin.js","Views/Auth/GoogleLogin.js","Views/Auth/SocialLogin.js","Views/Auth/Login.js","Views/Auth/Register.js","Components/Header.js","Components/Sidebar.js","Configs/constants.config.js","Components/Dashboard/ChartList.js","Configs/date.config.js","Components/Dashboard/ChartListing.js","Components/Loading.js","Views/Dashboard.js","Components/Whiteboard/Header.js","Components/Whiteboard/LeftSidebar.js","Components/Whiteboard/StickyNote.js","Components/Whiteboard/WhiteboardArea.js","Views/Whiteboard.js","Components/Dashboard/TempletListing.js","Views/Templets.js","Views/Auth/ForgotPassword.js","Views/Auth/ResetPassword.js","App.js","index.js","Views/SvgImage.js","Api/shape.api.js","Api/file.api.js","Api/index.js","Components/FlowchartConnector.js","Components/FlowchartResizeNode.js","Views/ChartSvgImage.js"],"names":["apiExecute","require","default","addUpdateChart","params","a","data","auth","getCharts","getChartInfo","id","pageNum","addUpdateChartAccess","getChartAccess","chartId","getTemplets","CanvasLeftSidebar","state","modalIsOpen","shapeDetail","dragStart","shape","props","setStateValue","drag_type","status","s","this","setState","render","self","w","h","templates","charts","length","filter","ch","is_template","console","log","className","style","display","position","top","left","backgroundColor","borderWidth","borderColor","borderRadius","padding","zIndex","textAlign","transform","borderStyle","borderTopColor","borderBottomColor","borderLeftColor","borderRightColor","width","height","viewBox","marginLeft","marginRight","marginTop","marginBottom","map","shapeJSON","s_index","ShapeTag","tag","shape_attr","attributes","filtered_value","s_attr","index","toString","replace","r","res_string","eval","x","y","stroke","strokeWidth","fill","key","strokeDasharray","shape_key","textAnchor","alignmentBaseline","margin","sidebarShapes","Object","keys","type","s_i","onDragStart","draggable","onMouseEnter","openModal","onMouseLeave","closeModal","j","chart_id","template","chart_name","trim","Component","audio","Audio","CanvasArea","showPopup","endConnector","nodes_changed","new_nodes","socket","svg_chart_width","svg_chart_height","setTimeout","nodes","emit","startSelection","e","target","document","querySelector","getMousePosition","multiSelection","multiSelectionStatus","startX","startY","toggleShapePopup","showShapePopup","saveUndoProcess","delete_redo","undo_process","push","redo_process","saveRedoProcess","selectObject","canvasTag","chartTag","offsetX","offsetLeft","offsetY","offsetTop","current","shapes","button","showContextMenu","pageX","pageY","multiselectObject","showContextMultiSelectMenu","evt","CTM","getScreenCTM","clientX","clientY","f","d","getMousePositionConnector","offset","unselectAll","focused","connectorFocused","openConnectorContextMenu","parseInt","dragging","chart","access_type","name","dasharray","activeDashArray","shapeType","action","node","filtered_shapes","category","removeShape","connectors","connector","nodesConnector","n","shape1_index","shape2_index","splice","stopObject","resizeDir","connectorNode","connectorDir","last_connector","end_direction","positions","selectResize","dir","selectConnector","workflowsStart","start","activeArrow","moveConnector","conn","start_dir","start_direction","Math","abs","doneConnection","play","moveConnectorAlong","focusConnector","focusObject","workflowShapes","getElementById","value","forEach","row","i","end","startCY","startCX","startLX","startTY","startRX","startBY","endCY","endCX","endLX","endTY","endRX","endBY","moveObject","index2","base_chart_width","base_chart_height","handleConnectionContext","side","copyShape","onDeletePress","keyCode","onCopyPress","selectConnectorNode","pos","canvasFeatures","elmnt","onmousedown","ondrop","window","event","preventDefault","onmouseup","closeDragElement","onmousemove","elementDrag","findDirection","endDir","increaseCanvasArea","other_w_chart","other_h_chart","p","zoom","base_chart_viewbox","selected","unshift","y1","x1","ids","newindex","element","endX","endY","nextElement","nextConnector","showEditorPopup","showTextEditorPopup","removeEventListener","addEventListener","ctrlDown","val","round","h_scr","w_scr","h_array","int","svg_chart_styles","onDragOver","onMouseDown","onClick","onMouseUp","markerUnits","refX","refY","markerWidth","markerHeight","orient","cx","cy","path","lastWorkflowShape","connClass","shapeId","findIndex","markerEnd","arrow","opacity","npos","k","cursor","includes","onMouseOver","activeNode","filtered_value2","s_attr2","Fragment","fillOpacity","chart_type","toLowerCase","letter","toUpperCase","onDoubleClick","openTextEditorPop","openEditorPop","visibility","onGoTo","handleGoTo","multiselecthandleGoTo","selectShape","last","shapesList","onSave","saveCanvas","closeEditorPopup","closeTextEditorPopup","ContextMenu","doUndo","doRedo","ConnectorContextMenu","TextEditor","description","changeDescription","useState","editorSel","setEditorSel","speech","setSpeech","speechCount","setSpeechCount","useSpeechToText","continuous","speechRecognitionProperties","interimResults","onStoppedSpeaking","res","isRecording","results","startSpeechToText","stopSpeechToText","insertContent","onInit","editor","init","menubar","branding","plugins","toolbar","content_style","onEditorChange","newText","EditorPopup","fields","changes","changeNode","field","handleFile","file","files","uploadMediaFile","response","success","url","Location","uploadImage","closePopup","swal","title","text","icon","buttons","dangerMode","then","willDelete","placeholder","autoComplete","onInput","handleChange","items","chageValue","desc","onDrop","acceptedFiles","getRootProps","getInputProps","accept","onChange","saveChanges","CustomSelect","dropdownSelected","class","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","overflowY","ShapePopup","TextEditorPopup","ContextMultiSelectMenu","CanvasHeader","share","email","chartAccess","saveTemplate","handleInput","changeAccess","shared_users","chart_access_id","accessChart","filename","fname","JSON","stringify","createElement","setAttribute","encodeURIComponent","body","appendChild","click","removeChild","svgString","format","callback","svgData","btoa","unescape","canvas","context","getContext","image","Image","onload","clearRect","drawImage","pngData","toDataURL","src","svg","xml","XMLSerializer","serializeToString","svgString2Image","image64","classList","remove","add","closeSharePopup","userString","localStorage","getItem","user","parse","to","updateChartName","exportJson","exportImage","save_status","size","onLogout","method","onSubmit","created_user","CanvasMenu","toggleDropdown","dropdownOpen","selectArrow","changeShapeHandler","selectBorderType","disabled","htmlFor","rows","len","addUpdateFlowchart","getFlowchart","pageId","CanvasRightSidebar","flowchartPopupOpen","formData","workflows","showModal","options","activeWorkflow","playWorkflow","handleVoice","handleVolume","requestOptions","headers","changeToLanguage","handleToLanguage","changeFromLanguage","handleFromLanguage","playPauseWorkflow","feild","toggleFlowChart","toggle","creatFlowchart","pages_id","deleteWorkflow","workflow_id","workflow_name","workflow_description","workflow","goToIndex","workflowIndex","workflowPlayList","fetch","json","opt","flowchartBoardOpen","href","Modal","show","onHide","Body","fontWeight","Footer","Button","variant","toggleFullScreen","isFullScreen","workflowsPlayMode","workflowsPaused","min","max","speechOptions","volume","step","voice","code","CanvasFooter","zoomHandler","getCanvasChartSpacing","chartZoom","zooming","parseFloat","updatePageName","pages","page_name","addPage","setActivePage","currentPage","styles","clientWidth","inset","scrollBarWidth","offsetWidth","scrollBarHeight","offsetHeight","clientHeight","clientHeiscrollBarHeight","mw","scrollWidth","mh","scrollHeight","scrollLeft","scrollTop","minchart_style","dragElement","pos1","pos2","pos3","pos4","offsetLeftPercent","offsetTopPercent","nextProps","nextState","innerHTML","sort","b","page_num","page","pageKey","minWidth","stopLensDrag","Canvas","showSelectionMenu","TextEditorPopupPos","loading","clients","pointers","tolang","fromlang","rate","pitch","speakText","chartdetails","resetWorkflow","enterWorkflow","Speech","hasBrowserSupport","playAudioList","strip_html_tags","speak","queue","listeners","onstart","onend","onresume","onboundary","catch","error","change_status","pause","resume","URLSearchParams","append","axios","post","translatedText","err","backToCanvas","getAllShapes","ViewShapeApi","allShapes","getAllCharts","UNSAFE_componentWillUpdate","match","str","history","io","connect","pointerContainer","pointer","drawing","on","hasOwnProperty","cloneNode","parentNode","disconnect","canvasClass","LoginApi","SocialLoginApi","RegisterApi","ProfileApi","resetPasswordLinkApi","getResetPasswordToken","changePassword","GithubLogin","clientId","clientSecret","redirectUrl","token","getInfo","opts","get","avatar_url","onSuccess","location","client_id","client_secret","_token","GoogleLogin","prepareLoginButton","auth2","attachClickHandler","refs","googleLoginBtn","googleUser","profile","getBasicProfile","getId","getName","getImageUrl","getEmail","alert","undefined","load","cookiepolicy","scope","js","fjs","getElementsByTagName","insertBefore","ref","SocialLogin","socialLogin","shareToken","share_token","onLoginSuccess","Login","msg","handleSubmit","formdata","FormData","fromEntries","remember_me","checked","loginRedirect","accessToken","removeItem","sessionStorage","setItem","onLogin","alertBox","alt","paddingBottom","required","color","defaultOptions","loop","autoplay","animationData","logicform","rendererSettings","preserveAspectRatio","Register","search","query","queryString","paddingBlockEnd","borderBlockColor","borderBlockWidth","paddingInlineStart","Header","inputText","getSearchResults","Sidebar","createChart","element1","constants","ChartList","date","ChartSvgImage","right","is_starred","isStarredChart","product","date_modified","moment","dateFormat","ChartListing","starred_view","recent_view","mychart_view","shared_view","templet_view","allchart_view","float","li","searchTerm","Loading","role","Dashboard","inputField","updateChart","WhiteboardHeader","whiteboard_name","updateState","WhiteboardLeftSidebar","changeMode","mode","whiteboardCanvas","isDrawingMode","freeDrawingBrush","penColor","updateSize","addSticky","notes","substring","innerWidth","updateNotes","fontSize","StickyNote","children","deleteStickyNote","confirm","setUpdate","sticky_notes","querySelectorAll","note","WhiteboardArea","updateChartData","getMousePos1","rect","getBoundingClientRect","canvasX","canvasY","getMousePos","getPointer","chart_notes","editorState","innerHeight","fabric","selection","loadFromJSON","renderAll","prototype","selectable","erasable","ellipse","WIDTH","HEIGHT","isDown","initial","o","Rect","originX","originY","angle","transparentCorners","hasRotatingPoint","Ellipse","rx","ry","set","Whiteboard","componentDidMount","whiteboardId","TempletListing","SvgImage","template_id","bottom","data-dismiss","aria-label","aria-hidden","Templets","ForgotPassword","result","closeButton","textDecoration","ResetPassword","password","confirmpassword","getToken","queryParams","postData","PrivateRoute","component","authed","rest","pathname","App","setToken","localToken","sessionToken","userLogout","exact","ReactDOM","objectFit","apiBaseUrl","reload","FlowchartConnector","FlowchartResizeNode","getChartDetails"],"mappings":"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","file":"static/js/main.44c8a57b.chunk.js","sourcesContent":["const { default: apiExecute } = require(\".\")\n\nexport const addUpdateChart = async (params) => {\n    return apiExecute('add-update-chart', 'post', {\n        data: params,\n        auth: true\n    })\n}\n\nexport const getCharts = async () => {\n    return apiExecute('get-charts', 'get', { auth: true })\n}\n\nexport const getChartInfo = async (id, pageNum = 1) => {\n    return apiExecute(`get-chart-details/${id}/${pageNum}`, 'get', { auth: true })\n}\n\nexport const addUpdateChartAccess = async (data) => {\n    return apiExecute('add-update-chart-access', 'post', { data, auth: true })\n}\n\nexport const getChartAccess = async (chartId) => {\n    return apiExecute(`get-access-details/${chartId}`, 'get', { auth: true });\n}\n\n\nexport const addUpdateTemplets = async (data) => {\n    return apiExecute('add-update-template', 'post', { data, auth: true })\n}\n\nexport const getTemplets = async () => {\n    return apiExecute('get-templates?product=FC', 'get', { auth: true })\n}\n\n// module.exports = {\n//     addUpdateChart,\n//     getCharts,\n//     getChartInfo,\n//     addUpdateChartAccess,\n//     getChartAccess\n// }\n","import React, { Component } from \"react\";\nimport { ChartSvgImage } from \"../../Views/ChartSvgImage\";\n// import { getCharts } from \"../../Api/chart.api\"\n\nexport default class CanvasLeftSidebar extends Component {\n    state = {\n        modalIsOpen: false,\n        shapeDetail: null,\n    };\n    dragStart = (shape) => {\n        this.props.setStateValue({ drag_type: shape })\n    }\n    openModal(status, s) {\n        // console.log('open model', status);\n        // console.log('open model', this.state.modalIsOpen);\n        this.setState({ shapeDetail: s });\n        // setTimeout(() => {\n        this.setState({ modalIsOpen: status });\n        // }, 500);\n    }\n    closeModal(status) {\n        this.setState({ modalIsOpen: status });\n        // this.setState({ shapeDetail: null });\n    }\n    render() {\n        let state = this.props.state;\n        let self = this;\n        let w = 40,\n            h = 25;\n\n        let templates = [];\n\n        if (state.charts && state.charts.length) {\n            templates = state.charts[0].data.filter(function (ch) {\n                return ch.is_template == true;\n            });\n            console.log('template: ', templates, state.charts[0].data);\n        }\n\n\n        // console.log('side charts', state.charts);\n        return (\n            <div className=\"flowchart-icons\">\n                {\n                    self.state.shapeDetail ?\n                        <>\n                            <div\n                                // onAfterOpen={afterOpenModal}\n                                // style={style.customStyles}\n                                style={{\n                                    display: self.state.modalIsOpen ? 'block' : 'none',\n                                    position: 'absolute',\n                                    top: '15%',\n                                    left: 'calc(100% + 10px)',\n                                    backgroundColor: '#fff',\n                                    borderWidth: 1,\n                                    borderColor: 'red',\n                                    borderRadius: 4,\n                                    padding: 10,\n                                    zIndex: 999,\n                                    textAlign: 'center'\n                                }}\n                            >\n                                <div\n                                    style={{\n                                        display: self.state.modalIsOpen ? 'block' : 'none',\n                                        position: 'absolute',\n                                        top: '50%',\n                                        left: '-20px',\n                                        // marginRight: '-50%',\n                                        transform: 'translateY(-50%)',\n                                        borderWidth: 10,\n                                        borderStyle: 'solid',\n                                        borderTopColor: 'transparent',\n                                        borderBottomColor: 'transparent',\n                                        borderLeftColor: 'transparent',\n                                        borderRightColor: '#fff',\n                                        zIndex: 999,\n                                    }}\n                                >\n                                </div>\n                                <svg width={w} height={h} viewBox=\"0 0 40 25\" style={{ transform: 'scale(3)', marginLeft: 60, marginRight: 60, marginTop: 60, marginBottom: 20 }}>\n                                    {\n                                        self.state.shapeDetail && self.state.shapeDetail.shape.map(function (shapeJSON, s_index) {\n                                            let ShapeTag = shapeJSON.tag;\n\n                                            let shape_attr = shapeJSON.attributes, filtered_value = \"\", s_attr = {};\n\n                                            for (let index in shape_attr) {\n                                                filtered_value = shape_attr[index].toString();\n                                                filtered_value = filtered_value\n                                                    .replace(/\\[w\\]/gi, w - 4)\n                                                    .replace(/\\[h\\]/gi, h - 4)\n                                                    .replace(/\\[x\\]/gi, 1)\n                                                    .replace(/\\[y\\]/gi, 1)\n                                                    // Math calculation\n                                                    .replace(/{(.*?)}/gi, function (r) {\n                                                        let res_string = r.replace(/{(.*?)}/gi, \"\\$1\");\n                                                        return eval(res_string)\n                                                    });\n\n                                                s_attr[index] = filtered_value;\n                                            }\n                                            return (\n                                                <g key={s_index}>\n                                                    <ShapeTag\n                                                        width={w - 4}\n                                                        height={h - 4}\n                                                        {...s_attr}\n                                                        x=\"1\"\n                                                        y=\"1\"\n                                                        stroke=\"#000\"\n                                                        strokeWidth={2}\n                                                        fill=\"#ffffff\"\n                                                        key={s_index}\n                                                        strokeDasharray={self.state.shapeDetail && self.state.shapeDetail.shape_key === 'text' ? '5 5' : '0 0'}\n                                                    ></ShapeTag>\n                                                    <text\n                                                        x={w / 2}\n                                                        y={h / 2}\n                                                        textAnchor=\"middle\"\n                                                        alignmentBaseline=\"middle\"\n                                                    >{self.state.shapeDetail && self.state.shapeDetail.shape_key === 'text' ? 'Text' : null}</text>\n                                                </g>\n                                            );\n                                        })\n                                    }\n                                </svg>\n                                <p style={{ padding: 0, margin: 0, marginTop: 20 }}>{self.state.shapeDetail.shape_key}</p>\n                            </div>\n                        </>\n                        : ''\n                }\n                {\n                    state.sidebarShapes && Object.keys(state.sidebarShapes).map((type) => {\n                        return (\n                            <div className=\"container-fluid\">\n                                <h4>{type} Shapes</h4>\n                                <div className=\"side-shape-container\">\n                                    {\n                                        state.sidebarShapes[type].map((s, s_i) => {\n                                            let w = 40,\n                                                h = 25;\n\n                                            return (\n                                                <div className=\"side-shape\" key={s_i}>\n                                                    <div onDragStart={() => this.dragStart(s.shape_key)} draggable>\n                                                        <svg width={w} height={h} viewBox=\"0 0 40 25\" onMouseEnter={() => self.openModal(true, s)} onMouseLeave={() => self.closeModal(false)}>\n                                                            {\n                                                                s.shape.map(function (shapeJSON, s_index) {\n                                                                    let ShapeTag = shapeJSON.tag;\n\n                                                                    let shape_attr = shapeJSON.attributes, filtered_value = \"\", s_attr = {};\n\n                                                                    for (let index in shape_attr) {\n                                                                        filtered_value = shape_attr[index].toString();\n                                                                        filtered_value = filtered_value\n                                                                            .replace(/\\[w\\]/gi, w - 4)\n                                                                            .replace(/\\[h\\]/gi, h - 4)\n                                                                            .replace(/\\[x\\]/gi, 1)\n                                                                            .replace(/\\[y\\]/gi, 1)\n                                                                            // Math calculation\n                                                                            .replace(/{(.*?)}/gi, function (r) {\n                                                                                let res_string = r.replace(/{(.*?)}/gi, \"\\$1\");\n                                                                                return eval(res_string)\n                                                                            });\n\n                                                                        s_attr[index] = filtered_value;\n                                                                    }\n                                                                    return (\n                                                                        <g key={s_index}>\n                                                                            <ShapeTag\n                                                                                width={w - 4}\n                                                                                height={h - 4}\n                                                                                {...s_attr}\n                                                                                x=\"1\"\n                                                                                y=\"1\"\n                                                                                stroke=\"#000\"\n                                                                                strokeWidth={2}\n                                                                                fill=\"#ffffff\"\n                                                                                key={s_index}\n                                                                                strokeDasharray={s.shape_key === 'text' ? '5 5' : '0 0'}\n                                                                            ></ShapeTag>\n                                                                            <text\n                                                                                x={w / 2}\n                                                                                y={h / 2}\n                                                                                textAnchor=\"middle\"\n                                                                                alignmentBaseline=\"middle\"\n                                                                            >{s.shape_key === 'text' ? 'Text' : null}</text>\n                                                                        </g>\n                                                                    );\n                                                                })\n                                                            }\n                                                        </svg>\n                                                    </div>\n                                                </div>\n                                            );\n                                        })\n                                    }\n                                </div>\n                            </div>\n                        );\n                    })\n                }\n\n                {\n                    templates.length ?\n                        <div className=\"container-fluid\">\n                            <h4>Templets</h4>\n                            <div className=\"side-template-container\">\n                                {\n                                    templates.map(function (ch, j) {\n                                        return (\n                                            <div className=\"side-template\" key={j}>\n                                                <div className=\"side-template-box\" onDragStart={() => this.dragStart('fc')} draggable>\n                                                    <ChartSvgImage id={ch.chart_id} height={100} template={ch} />\n                                                </div>\n                                                <h6>{ch.chart_name && ch.chart_name.trim() !== '' ? ch.chart_name : \"Blank diagram\"}</h6>\n                                            </div>\n                                        );\n                                    })\n                                }\n                            </div>\n                        </div>\n                        : <></>\n                }\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport ContextMenu from '../../Components/ContextMenu.js';\nimport ConnectorContextMenu from '../../Components/ConnectorContextMenu.js';\nimport EditorPopup from \"../../Components/EditorPopup.js\";\nimport FlowchartConnector from '../../Components/FlowchartConnector.js';\nimport FlowchartResizeNode from '../../Components/FlowchartResizeNode.js';\nimport ShapePopup from \"./ShapePopup.js\";\nimport { InputGroup } from \"react-bootstrap\";\nimport TextEditorPopup from \"../TextEditorPopup.js\";\nimport SelectionMenu from \"../SelectionMenu.js\";\nimport { addUpdateTemplets } from \"../../Api/chart.api.js\";\nimport ContextMultiSelectMenu from \"../ContextMultiSelectMenu.js\";\n\nconst audio = new Audio(\"/sound.wav\");\nexport default class CanvasArea extends Component {\n    state = {\n        showPopup: null,\n        endConnector: 0,\n    }\n    nodes_changed = (new_nodes) => {\n        let { socket } = this.props.state;\n        new_nodes.width = this.props.state.svg_chart_width;\n        new_nodes.height = this.props.state.svg_chart_height;\n        // console.log('new nodes', new_nodes);\n        setTimeout(() => {\n            this.props.setStateValue({\n                nodes: new_nodes\n            });\n            socket.emit(\"state_changed\", new_nodes);\n        }, 100);\n    }\n    startSelection = e => {\n        if (e.target === document.querySelector(\"#chart svg\")) {\n            let { x, y } = this.getMousePosition(e);\n            // console.log('x', x);\n            this.props.setStateValue({\n                multiSelection: true,\n                multiSelectionStatus: {\n                    startX: x,\n                    startY: y,\n                    width: 0,\n                    height: 0\n                }\n            });\n        }\n    }\n\n    toggleShapePopup = (x, y) => {\n        this.setState({\n            showShapePopup: {\n                x,\n                y\n            }\n        });\n    }\n\n    saveUndoProcess = (params, delete_redo = true) => {\n        let state = this.props.state;\n        // let nodes = { ...state.nodes };\n        let undo_process = state.undo_process ?? [];\n\n        // console.log('undo nodes: ', params);\n\n        undo_process.push({ ...params });\n\n        this.props.setStateValue({ undo_process });\n\n        if (delete_redo) {\n            this.props.setStateValue({ redo_process: [] });\n        }\n\n        return undo_process;\n    }\n    saveRedoProcess = params => {\n        let state = this.props.state;\n        let redo_process = state.redo_process;\n        redo_process.push(params);\n\n        this.props.setStateValue({ redo_process });\n    }\n    selectObject = (e, index) => {\n        let state = this.props.state;\n        let self = this;\n\n        let canvasTag = document.querySelector(\".canvas-area\");\n        let chartTag = document.querySelector(\"#chart\");\n        let offsetX = canvasTag.offsetLeft + chartTag.offsetLeft,\n            offsetY = canvasTag.offsetTop + chartTag.offsetTop;\n\n        self.props.setStateValue({\n            current: {\n                index: index,\n                x: state.nodes.shapes[index].x,\n                y: state.nodes.shapes[index].y,\n            }\n        })\n\n        if (e.button === 2) {\n            self.props.setStateValue({\n                showContextMenu: { index: index, x: e.pageX - offsetX, y: e.pageY - offsetY }\n            });\n        }\n    }\n    multiselectObject = (e) => {\n        let state = this.props.state;\n        let self = this;\n\n        let canvasTag = document.querySelector(\".canvas-area\");\n        let chartTag = document.querySelector(\"#chart\");\n        let offsetX = canvasTag.offsetLeft + chartTag.offsetLeft,\n            offsetY = canvasTag.offsetTop + chartTag.offsetTop;\n\n        // self.props.setStateValue({\n        //     current: {\n        //         index: index,\n        //         x: state.nodes.shapes[index].x,\n        //         y: state.nodes.shapes[index].y,\n        //     }\n        // })\n\n        if (e.button === 2) {\n            self.props.setStateValue({\n                showContextMultiSelectMenu: { x: e.pageX - offsetX, y: e.pageY - offsetY }\n            });\n        }\n    }\n    getMousePosition = (evt) => {\n        var svg = document.querySelector('#chart>svg');\n        var CTM = svg.getScreenCTM();\n        return {\n            x: (evt.clientX - CTM.e) / CTM.a,\n            y: (evt.clientY - CTM.f) / CTM.d,\n        };\n    }\n    getMousePositionConnector = (evt) => {\n        let state = this.props.state;\n        let { offsetX, offsetY } = state.offset\n        // console.log(\"selection pos: \", evt.clientX, evt.clientY, 'offset: ', offsetX, offsetY);\n\n        return {\n            x: evt.clientX - offsetX,\n            y: evt.clientY - offsetY,\n        };\n    }\n    unselectAll = (e) => {\n        if (e.target === document.querySelector(\"#chart svg\")) {\n            this.props.setStateValue({\n                focused: null,\n                connectorFocused: null,\n                openConnectorContextMenu: null\n            });\n\n            if (this.state.endConnector >= 1) {\n                this.setState({ showShapePopup: null, endConnector: 0 });\n            }\n\n            this.setState({ endConnector: parseInt(this.state.endConnector) + 1 });\n        }\n    }\n    dragging = async (x, y) => {\n        let state = this.props.state;\n\n        if (state.chart.access_type === 'EDIT') {\n            let nodes = state.nodes\n\n            if (!nodes.shapes) {\n                nodes.shapes = []\n            }\n\n            setTimeout(() => {\n                let id = nodes.shapes.length + 1;\n                let data = {\n                    id,\n                    x,\n                    y,\n                    name: state.drag_type,\n                    type: state.drag_type,\n                    width: 80,\n                    height: 40,\n                    stroke: '#bbbbbb',\n                    strokeWidth: 2,\n                    fill: '#ffffff',\n                    dasharray: state.activeDashArray,\n                    shapeType: 0\n                }\n                this.props.saveUndoProcess({\n                    action: 'remove-shape',\n                    index: nodes.shapes.length,\n                    data\n                });\n                nodes.shapes.push(data);\n\n                for (let index in nodes.shapes) {\n                    let node = nodes.shapes[index];\n                    let filtered_shapes = state?.shapes?.filter(s => s.shape_key === node?.type);\n\n                    let shapeType = nodes?.shapes[index]?.shapeType\n\n                    shapeType = filtered_shapes[0]?.category === \"Flowchart\" ? 0 : 1;\n                }\n\n                this.nodes_changed(nodes);\n            }, 10);\n        }\n    }\n    removeShape = (index) => {\n        let state = this.props.state;\n        let nodes = state.nodes;\n\n        this.props.saveUndoProcess({\n            action: 'add-shape',\n            index: index,\n            data: state.nodes.shapes[index],\n            connectors: nodes.connector\n        });\n\n        let nodesConnector = nodes.connector.filter(function (n) {\n            return n.shape1_index !== index && n.shape2_index !== index;\n        });\n        nodes.connector = nodesConnector;\n\n        nodes.shapes.splice(index, 1);\n\n        this.nodes_changed(nodes);\n    }\n    stopObject = () => {\n        this.props.setStateValue({\n            current: null,\n            resizeDir: null,\n            connectorNode: null,\n            // connectorDir: null,\n            multiSelection: false\n        });\n\n        let state = this.props.state;\n        if (state.connectorDir) {\n            let nodes = state.nodes;\n            let last_connector = nodes.connector[nodes.connector.length - 1];\n\n            if (\n                !last_connector.end_direction\n            ) {\n                this.setState({\n                    showShapePopup: {\n                        x: last_connector.positions[2][2],\n                        y: last_connector.positions[2][3]\n                    }\n                });\n            }\n\n            this.props.setStateValue({ connectorDir: null });\n        }\n    }\n    selectResize = (dir) => {\n        let state = this.props.state;\n        if (state.focused && state.focused.index) {\n            this.props.setStateValue({ resizeDir: dir });\n\n            this.props.saveUndoProcess({\n                action: 'resize-shape',\n                index: state.focused.index,\n                data: { ...state.nodes.shapes[state.focused.index] }\n            });\n        }\n    }\n    selectConnector = (dir, index) => {\n        let state = this.props.state;\n\n        if (!state.workflowsStart && state.chart.access_type === 'EDIT') {\n\n            this.props.setStateValue({ connectorDir: dir });\n            this.setState({ endConnector: 0 });\n\n            let nodes = state.nodes;\n            let start = nodes.shapes[index];\n\n            let positions = null;\n\n            if (dir === 'right') {\n                positions = [\n                    [\n                        (start.width + start.x),\n                        (start.y + (start.height / 2)),\n                        (start.width + start.x + 20),\n                        (start.y + (start.height / 2))\n                    ],\n                    [\n                        (start.width + start.x + 20),\n                        (start.y + (start.height / 2)),\n                        (start.width + start.x + 50),\n                        (start.y + (start.height / 2))\n                    ],\n                    [\n                        (start.width + start.x + 50),\n                        (start.y + (start.height / 2)),\n                        (start.width + start.x + 70),\n                        (start.y + (start.height / 2))\n                    ],\n                    [\n                        (start.width + start.x + 50),\n                        (start.y + (start.height / 2)),\n                        (start.width + start.x + 70),\n                        (start.y + (start.height / 2))\n                    ]\n                ];\n            }\n\n            if (dir === 'left') {\n                positions = [\n                    [\n                        (start.x),\n                        (start.y + (start.height / 2)),\n                        (start.x - 20),\n                        (start.y + (start.height / 2))\n                    ],\n                    [\n                        (start.x - 20),\n                        (start.y + (start.height / 2)),\n                        (start.x - 50),\n                        (start.y + (start.height / 2))\n                    ],\n                    [\n                        (start.x - 50),\n                        (start.y + (start.height / 2)),\n                        (start.x - 70),\n                        (start.y + (start.height / 2))\n                    ],\n                    [\n                        (start.x - 50),\n                        (start.y + (start.height / 2)),\n                        (start.x - 70),\n                        (start.y + (start.height / 2))\n                    ]\n                ];\n            }\n\n            if (dir === 'top') {\n                positions = [\n                    [\n                        (start.x + (start.width / 2)),\n                        (start.y),\n                        (start.x + (start.width / 2)),\n                        (start.y - 20)\n                    ],\n                    [\n                        (start.x + (start.width / 2)),\n                        (start.y - 20),\n                        (start.x + (start.width / 2)),\n                        (start.y - 50)\n                    ],\n                    [\n                        (start.x + (start.width / 2)),\n                        (start.y - 50),\n                        (start.x + (start.width / 2)),\n                        (start.y - 70)\n                    ],\n                    [\n                        (start.x + (start.width / 2)),\n                        (start.y - 50),\n                        (start.x + (start.width / 2)),\n                        (start.y - 70)\n                    ]\n                ];\n            }\n\n            if (dir === 'bottom') {\n                positions = [\n                    [\n                        (start.x + (start.width / 2)),\n                        (start.y + start.height),\n                        (start.x + (start.width / 2)),\n                        (start.y + start.height + 20)\n                    ],\n                    [\n                        (start.x + (start.width / 2)),\n                        (start.y + start.height + 20),\n                        (start.x + (start.width / 2)),\n                        (start.y + start.height + 50)\n                    ],\n                    [\n                        (start.x + (start.width / 2)),\n                        (start.y + start.height + 50),\n                        (start.x + (start.width / 2)),\n                        (start.y + start.height + 70)\n                    ],\n                    [\n                        (start.x + (start.width / 2)),\n                        (start.y + start.height + 50),\n                        (start.x + (start.width / 2)),\n                        (start.y + start.height + 70)\n                    ]\n                ];\n            }\n\n            if (!nodes.connector) {\n                nodes.connector = []\n            }\n\n            nodes.connector.push({\n                'start_direction': dir,\n                'end_direction': null,\n                'shape1_index': index,\n                'shape2_index': null,\n                'positions': positions,\n                'arrow': state.activeArrow,\n                'dasharray': state.activeDashArray\n            })\n\n            // this.props.saveUndoProcess({\n            //     action: 'move-connector',\n            //     index: index,\n            //     connector: [...nodes.connector]\n            // });\n\n            this.nodes_changed(nodes);\n        }\n\n        // this.saveUndoProcess({\n        //     action: 'remove-connector',\n        //     index: nodes.connector.length - 1,\n        //     connector: nodes.connector[nodes.connector.length - 1]\n        // });\n\n    }\n    moveConnector = (x, y) => {\n        let state = this.props.state;\n\n        let nodes = state.nodes;\n\n        this.props.saveUndoProcess({\n            action: 'move-connector',\n            index: nodes.connector.length - 1,\n            connector: [...nodes.connector]\n        });\n        let conn = nodes.connector[nodes.connector.length - 1];\n\n        let start = nodes.shapes[conn.shape1_index];\n        let start_dir = conn.start_direction;\n\n        conn.positions[0][2] = x;\n\n        conn.positions[1][0] = x;\n        conn.positions[1][2] = x;\n        conn.positions[1][3] = y;\n\n        conn.positions[2][0] = x;\n        conn.positions[2][1] = y;\n        conn.positions[2][2] = x;\n        conn.positions[2][3] = y;\n\n        conn.positions[3][0] = x;\n        conn.positions[3][1] = y;\n        conn.positions[3][2] = x;\n        conn.positions[3][3] = y;\n\n        let h = x;\n\n        if (start_dir === 'left' && x > start.x - 20) {\n            h = start.x - 20;\n        }\n\n        if (start_dir === 'right' && x < start.x + start.width + 20) {\n            h = start.x + start.width + 20;\n        }\n\n        if (start_dir === 'bottom') {\n            h = start.x + (start.width / 2)\n        }\n\n        if (start_dir === 'top') {\n            h = start.x + (start.width / 2)\n        }\n\n        conn.positions[0][2] = h;\n\n        conn.positions[1][0] = h;\n        conn.positions[1][2] = h;\n\n        conn.positions[2][0] = h;\n        conn.positions[3][0] = h;\n\n\n\n        if (Math.abs(conn.positions[3][0] - conn.positions[3][2]) <= 15) {\n            conn.positions[3][2] = conn.positions[3][0];\n            if (conn.positions[3][1] > conn.positions[0][1]) conn.positions[3][3] += 5;\n            else conn.positions[3][3] -= 5;\n        }\n\n        nodes.connector[nodes.connector.length - 1] = conn;\n\n\n        this.nodes_changed(nodes);\n    }\n    doneConnection = (dir, index) => {\n        let state = this.props.state;\n        let nodes = state.nodes;\n        if (state.connectorDir) {\n            let conn = state.connectorFocused && state.connectorFocused.index ? nodes.connector[state.connectorFocused.index] : nodes.connector[nodes.connector.length - 1];\n\n            if (conn.shape1_index !== index) {\n                conn.end_direction = dir;\n                conn.shape2_index = index;\n\n                // Play Audio\n                audio.play();\n\n                nodes = this.moveConnectorAlong(nodes, index);\n\n                this.props.saveUndoProcess({\n                    action: 'remove-connector',\n                    index: index,\n                    connector: [...nodes.connector]\n                });\n\n                this.nodes_changed(nodes);\n\n\n                this.stopObject()\n            }\n        }\n    }\n    focusConnector = (e, index) => {\n        let state = this.props.state;\n        if (!state.workflowsStart && state.chart.access_type === 'EDIT') {\n            if (e.button === 2) {\n                let { x, y } = this.getMousePosition(e);\n                this.props.setStateValue(\n                    {\n                        openConnectorContextMenu: {\n                            index: index,\n                            x,\n                            y\n                        }\n                    }\n                )\n            } else {\n                this.props.setStateValue({\n                    connectorFocused: {\n                        index: index\n                    }\n                });\n            }\n        }\n        // console.log('focus connector: ', index);\n    }\n    focusObject = (index) => {\n        let state = this.props.state;\n        let shape = state.nodes.shapes[index];\n        if (!state.workflowsStart && state.chart.access_type === 'EDIT') {\n            this.props.setStateValue({\n                focused: {\n                    index: index,\n                    x: shape.x,\n                    y: shape.y,\n                }\n            });\n\n            document.getElementById('fillColorSelector').value = shape.fill;\n            document.getElementById('strokeColorSelector').value = shape.stroke;\n            document.getElementById('strokeWidthSelector').value = shape.strokeWidth;\n        } else {\n            state.workflowShapes.push(shape.id);\n            this.props.setStateValue({ workflowShapes: state.workflowShapes });\n        }\n    }\n    moveConnectorAlong = (nodes, index) => {\n        // connector moving with object\n        let nodesConnector = nodes.connector\n            ? nodes.connector.filter(function (n) {\n                return n.shape1_index === index || n.shape2_index === index;\n            })\n            : [];\n        nodesConnector.forEach((row, i) => {\n            let conn = row;\n            let start = nodes.shapes[conn.shape1_index];\n            let end = nodes.shapes[conn.shape2_index];\n\n            var startCY = start.y + (start.height / 2),\n                startCX = start.x + (start.width / 2),\n                startLX = start.x,\n                startTY = start.y,\n                startRX = start.x + start.width,\n                startBY = start.y + start.height,\n\n                endCY = end.y + (end.height / 2),\n                endCX = end.x + (end.width / 2),\n                endLX = end.x,\n                endTY = end.y,\n                endRX = end.x + end.width,\n                endBY = end.y + end.height;\n\n            /**Start Node */\n            if (conn.start_direction === 'top') {\n                conn.positions[0][0] = startCX;\n                conn.positions[0][1] = startTY;\n                conn.positions[0][2] = startCX;\n                conn.positions[0][3] = startTY - 60;\n\n                conn.positions[1][0] = startCX;\n                conn.positions[1][1] = startTY - 60;\n                conn.positions[1][2] = (start.y > end.y) ? conn.positions[1][0] : conn.positions[1][0] + start.width + 60;\n                conn.positions[1][3] = startTY - 60;\n            }\n\n            if (conn.start_direction === 'right') {\n                conn.positions[0][0] = startRX;\n                conn.positions[0][1] = startCY;\n                conn.positions[0][2] = startRX + 60;\n                conn.positions[0][3] = startCY;\n\n                conn.positions[1][0] = startRX + 60;\n                conn.positions[1][1] = startCY;\n                conn.positions[1][2] = conn.positions[1][0];\n                conn.positions[1][3] = startCY;\n            }\n\n            if (conn.start_direction === 'bottom') {\n                conn.positions[0][0] = startCX;\n                conn.positions[0][1] = startBY;\n                conn.positions[0][2] = startCX;\n                conn.positions[0][3] = startBY + 60;\n\n                conn.positions[1][0] = startCX;\n                conn.positions[1][1] = startBY + 60;\n                conn.positions[1][2] = (start.y < end.y) ? conn.positions[1][0] : conn.positions[1][0] + start.width + 60;\n                conn.positions[1][3] = startBY + 60;\n            }\n\n            if (conn.start_direction === 'left') {\n                conn.positions[0][0] = startLX;\n                conn.positions[0][1] = startCY;\n                conn.positions[0][2] = startLX - 60;\n                conn.positions[0][3] = startCY;\n\n                conn.positions[1][0] = startLX - 60;\n                conn.positions[1][1] = startCY;\n                conn.positions[1][2] = conn.positions[1][0];\n                conn.positions[1][3] = startCY;\n\n            }\n\n            /** End Node */\n            if (conn.end_direction === 'top') {\n\n                conn.positions[2][0] = conn.positions[1][2];\n                conn.positions[2][1] = endTY - 60;\n                conn.positions[2][2] = endCX;\n                conn.positions[2][3] = endTY - 60;\n\n                conn.positions[3][0] = endCX;\n                conn.positions[3][1] = endTY - 60;\n                conn.positions[3][2] = endCX;\n                conn.positions[3][3] = endTY;\n\n                // if(conn.positions[3][3] > conn.positions[1][1]) {\n                //     // conn.positions[1][3] = conn.positions[3][1];\n                //     conn.positions[2][1] = conn.positions[1][1];\n                // }\n            }\n\n            if (conn.end_direction === 'right') {\n                conn.positions[2][0] = conn.positions[1][2];\n                conn.positions[2][1] = endCY;\n                conn.positions[2][2] = end.x + end.width + 60;\n                conn.positions[2][3] = endCY;\n\n                conn.positions[3][0] = endRX + 60;\n                conn.positions[3][1] = endCY;\n                conn.positions[3][2] = endRX;\n                conn.positions[3][3] = endCY;\n\n                if (conn.positions[3][0] > conn.positions[1][0]) {\n                    conn.positions[1][2] = conn.positions[3][0];\n                    conn.positions[2][0] = conn.positions[3][0];\n                }\n            }\n\n            if (conn.end_direction === 'bottom') {\n                conn.positions[2][0] = conn.positions[1][2];\n                conn.positions[2][1] = endBY + 60;\n                conn.positions[2][2] = endCX;\n                conn.positions[2][3] = endBY + 60;\n\n                conn.positions[3][0] = endCX;\n                conn.positions[3][1] = endBY + 60;\n                conn.positions[3][2] = endCX;\n                conn.positions[3][3] = endBY;\n            }\n\n            if (conn.end_direction === 'left') {\n                conn.positions[2][0] = conn.positions[1][2];\n                conn.positions[2][1] = endCY;\n                conn.positions[2][2] = endLX - 60;\n                conn.positions[2][3] = endCY;\n\n                conn.positions[3][0] = endLX - 60;\n                conn.positions[3][1] = endCY;\n                conn.positions[3][2] = endLX;\n                conn.positions[3][3] = endCY;\n\n                if (conn.positions[3][0] < conn.positions[1][0]) {\n                    conn.positions[1][2] = conn.positions[3][0];\n                    conn.positions[2][0] = conn.positions[3][0];\n                }\n            }\n        });\n\n        return nodes;\n    }\n    moveObject = (x, y) => {\n        let state = this.props.state;\n\n        if (!state.workflowsStart && state.chart.access_type === 'EDIT') {\n            var index;\n\n            let nodes = state.nodes;\n            if (state.current && !state.resizeDir && !state.connectorDir && !state.connectorNode && !state.multiSelection) {\n                index = state.current.index;\n\n                // console.log('move object', x, y);\n\n                if (x <= 90) {\n                    x = 90\n                }\n                if (y <= 60) {\n                    y = 60\n                }\n                if (x >= state.base_chart_width - 40) {\n                    x = state.base_chart_width - 40\n                }\n                if (y >= state.base_chart_height - 40) {\n                    y = state.base_chart_height - 40\n                }\n\n                nodes.shapes[index].x = x - 60;\n                nodes.shapes[index].y = y - 30;\n                // console.log('connector:', nodes.connector);\n                // var data = nodes.shapes[index]? { ...nodes.shapes[index] }: null;\n\n                var connector = nodes.connector? [...nodes.connector]:[];\n                var data = { ...nodes.shapes[index] };\n                if(nodes.shapes[index]){this.props.saveUndoProcess({\n                    action: 'move-shape',\n                    index: index,\n                    data,\n                    connector\n                })}\n\n                nodes = this.moveConnectorAlong(nodes, index);\n\n                this.nodes_changed(nodes);\n            } else if (state.multiSelection && state.multiSelectionStatus) {\n                // console.log('pos: ', x, y);\n                let multiSelectionStatus = state.multiSelectionStatus;\n                multiSelectionStatus.width = x - multiSelectionStatus.startX\n                multiSelectionStatus.height = y - multiSelectionStatus.startY\n                // this.startSelection(document.querySelector('#chart>svg'));\n                this.props.setStateValue({\n                    multiSelectionStatus\n                });\n            } else if (state.connectorNode) {\n                let { index, index2, type } = state.connectorNode;\n\n                if (type === 'h') {\n                    nodes.connector[index].positions[index2][0] = x;\n                    nodes.connector[index].positions[index2][2] = x;\n                } else {\n                    nodes.connector[index].positions[index2][1] = y;\n                    nodes.connector[index].positions[index2][3] = y;\n                }\n\n                this.nodes_changed(nodes);\n\n            } else if (state.connectorDir && nodes.connector.length) {\n                this.moveConnector(x, y);\n            } else if (state.focused && state.resizeDir) {\n                index = state.focused.index;\n\n                switch (state.resizeDir) {\n                    case \"bottom\":\n                        nodes.shapes[index].height =\n                            y - nodes.shapes[index].y > 30 ? y - nodes.shapes[index].y : 30;\n                        break;\n\n                    case \"top\":\n                        if (state.nodes.shapes[index].y + state.nodes.shapes[index].height - y > 30) {\n                            nodes.shapes[index].height = state.nodes.shapes[index].y + state.nodes.shapes[index].height - y > 30 ? state.nodes.shapes[index].y + state.nodes.shapes[index].height - y : 30;\n                            nodes.shapes[index].y = y\n                        }\n                        break;\n\n                    case \"left\":\n                        if (state.nodes.shapes[index].x + state.nodes.shapes[index].width - x > 60) {\n                            nodes.shapes[index].width =\n                                nodes.shapes[index].x + nodes.shapes[index].width - x > 60\n                                    ? nodes.shapes[index].x + nodes.shapes[index].width - x\n                                    : 60;\n                            nodes.shapes[index].x = x;\n                        }\n                        break;\n\n                    case \"right\":\n                        nodes.shapes[index].width =\n                            x - nodes.shapes[index].x > 60\n                                ? x - nodes.shapes[index].x\n                                : 60;\n                        break;\n\n                    case \"left-top\":\n                        if (state.nodes.shapes[index].x + state.nodes.shapes[index].width - x > 60) {\n                            nodes.shapes[index].width =\n                                nodes.shapes[index].x + nodes.shapes[index].width - x > 60\n                                    ? nodes.shapes[index].x + nodes.shapes[index].width - x\n                                    : 60;\n                            nodes.shapes[index].x = x;\n                        }\n                        if (state.nodes.shapes[index].y + state.nodes.shapes[index].height - y > 30) {\n                            nodes.shapes[index].height =\n                                nodes.shapes[index].y + nodes.shapes[index].height - y > 30\n                                    ? nodes.shapes[index].y + nodes.shapes[index].height - y\n                                    : 30;\n                            nodes.shapes[index].y = y;\n                        }\n                        break;\n\n                    case \"right-top\":\n                        nodes.shapes[index].width =\n                            x - nodes.shapes[index].x > 60\n                                ? x - nodes.shapes[index].x\n                                : 60;\n                        if (state.nodes.shapes[index].y + state.nodes.shapes[index].height - y > 30) {\n                            nodes.shapes[index].height =\n                                nodes.shapes[index].y + nodes.shapes[index].height - y > 30\n                                    ? nodes.shapes[index].y + nodes.shapes[index].height - y\n                                    : 30;\n                            nodes.shapes[index].y = y;\n                        }\n                        break;\n\n                    case \"left-bottom\":\n                        if (state.nodes.shapes[index].x + state.nodes.shapes[index].width - x > 60) {\n                            nodes.shapes[index].width =\n                                nodes.shapes[index].x + nodes.shapes[index].width - x > 60\n                                    ? nodes.shapes[index].x + nodes.shapes[index].width - x\n                                    : 60;\n                            nodes.shapes[index].x = x;\n                        }\n                        nodes.shapes[index].height =\n                            y - nodes.shapes[index].y > 30\n                                ? y - nodes.shapes[index].y\n                                : 30;\n                        break;\n\n                    case \"right-bottom\":\n                        nodes.shapes[index].width =\n                            x - nodes.shapes[index].x > 60\n                                ? x - nodes.shapes[index].x\n                                : 60;\n                        nodes.shapes[index].height =\n                            y - nodes.shapes[index].y > 30\n                                ? y - nodes.shapes[index].y\n                                : 30;\n                        break;\n\n                    default:\n                        break;\n                }\n\n                nodes = this.moveConnectorAlong(nodes, index);\n\n                this.nodes_changed(nodes);\n            }\n        }\n    }\n\n    handleConnectionContext = (side, index) => {\n        let state = this.props.state;\n        let nodes = state.nodes;\n        if (side === 'delete') {\n            // console.log('sdf sijoidjfdioj ois sij oisdfj');\n\n            this.props.saveUndoProcess({\n                action: 'add-connector',\n                index: index,\n                connector: [...nodes.connector]\n            });\n            nodes.connector.splice(index, 1);\n        }\n\n        this.nodes_changed(nodes);\n\n        this.props.setStateValue({ openConnectorContextMenu: null });\n    }\n\n    copyShape = async (index) => {\n        let state = this.props.state;\n        let nodes = state.nodes;\n        let shape = { ...nodes.shapes[index] };\n        shape.x += 100;\n        nodes.shapes[nodes.shapes.length] = shape;\n        // let data = {\n        //     chart: nodes,\n        //     title: 'this is template'\n        // }\n        // let response = await addUpdateTemplets(data);\n\n        this.props.saveUndoProcess({\n            action: 'remove-shape',\n            index: nodes.shapes.length - 1,\n            data: shape\n        });\n\n        this.nodes_changed(nodes);\n    }\n\n    handleGoTo(side, index) {\n        let state = this.props.state;\n        let selected;\n        let nodes = state.nodes;\n        if (side === 'copy') {\n            this.copyShape(index);\n        } if(side === 'paste') {\n            this.copyShape(index)\n        }\n        else {\n            if (side === 'delete') {\n                this.removeShape(index)\n            }\n             else {\n                // console.log('nodes : ',nodes);\n                selected = nodes.shapes[index];\n                nodes.shapes.splice(index, 1);\n                if (side === 'front') {\n                    nodes.shapes.push(selected);\n                }\n                else {\n                    nodes.shapes.unshift(selected);\n                }\n            }\n        }\n        this.nodes_changed(nodes);\n    }\n    multiselecthandleGoTo(side) {\n        let state = this.props.state;\n        // console.log('sdjkfsdj', side);\n        // console.log('sdjfdhfjdklfjdf', state.multiSelectionStatus);\n        let pos = {\n            x: 0, y: 0, y1: 0, x1: 0\n        }\n        pos.x = state.multiSelectionStatus.startX;\n        pos.y = state.multiSelectionStatus.startY;\n        pos.x1 = state.multiSelectionStatus.startX + state.multiSelectionStatus.width;\n        pos.y1 = state.multiSelectionStatus.startY + state.multiSelectionStatus.height;\n        // console.log('pos', pos);\n        // console.log('state.nodes', state.nodes);\n        let shapes = [...state.nodes.shapes]\n        let connectors = [...state.nodes.connector]\n        if (side == 'copy') {\n            let ids = [],\n                newindex = {};\n            shapes.forEach((element, i) => {\n                ids.push(i);\n                newindex[i] = shapes.length;\n                let endX = element.x + element.width;\n                let endY = element.y + element.height;\n                if (pos.x <= element.x && pos.y <= element.y && pos.x1 >= endX && pos.y1 >= endY) {\n\n                    let nextElement = { ...element };\n                    nextElement.x += 300;\n                    shapes.push(nextElement);\n                }\n            });\n            connectors.forEach((conn, j) => {\n                let nextConnector = { ...conn };\n\n                nextConnector.shape1_index = newindex[nextConnector.shape1_index] ?? null;\n                nextConnector.shape2_index = newindex[nextConnector.shape2_index] ?? null;\n\n                nextConnector.positions[0][0] += 300;\n                nextConnector.positions[0][2] += 300;\n\n                nextConnector.positions[1][0] += 300;\n                nextConnector.positions[1][2] += 300;\n\n                nextConnector.positions[2][0] += 300;\n                nextConnector.positions[2][2] += 300;\n\n                nextConnector.positions[3][0] += 300;\n                nextConnector.positions[3][2] += 300;\n\n                connectors.push(nextConnector);\n                // console.log('connetor', connectors);\n            });\n        }\n        state.nodes.shapes = shapes;\n        state.nodes.connector = connectors;\n        // console.log('state nodes', state.nodes);\n        this.nodes_changed(state.nodes);\n        this.props.setStateValue({ multiSelectionStatus: null });\n\n    }\n    openEditorPop(i) {\n        let state = this.props.state;\n        if (!state.workflowsStart && state.chart.access_type === 'EDIT')\n            this.props.setStateValue({ showEditorPopup: { index: i, node: state.nodes.shapes[i] } })\n    }\n    openTextEditorPop(i) {\n        let state = this.props.state;\n        if (!state.workflowsStart && state.chart.access_type === 'EDIT')\n            this.props.setStateValue({ showTextEditorPopup: { index: i, node: state.nodes.shapes[i] } })\n    }\n    closeTextEditorPopup() {\n        this.props.setStateValue({ showTextEditorPopup: false })\n    }\n    closeEditorPopup() {\n        this.props.setStateValue({ showEditorPopup: false })\n    }\n    saveCanvas(node, i) {\n        let state = this.props.state;\n        // console.log('saved node: ', node);\n        let nodes = state.nodes;\n        nodes.shapes[i] = node;\n\n        // console.log('node: ', node);\n\n        this.nodes_changed(nodes);\n    }\n    onDeletePress = e => {\n        let state = this.props.state;\n        let nodes = state.nodes;\n        if (e.keyCode === 46 || e.keyCode === 8) {\n            if (state.focused) {\n                this.removeShape(state.focused.index);\n            }\n\n            if (state.connectorFocused) {\n\n                this.props.saveUndoProcess({\n                    action: 'add-connector',\n                    index: state.connectorFocused.index,\n                    connector: [...nodes.connector]\n                });\n\n                nodes.connector.splice(state.connectorFocused.index, 1);\n                this.nodes_changed(nodes);\n            }\n        }\n    }\n    onCopyPress = e => {\n        let state = this.props.state;\n        let nodes = state.nodes;\n        if (state.focused) {\n            this.copyShape(state.focused.index);\n        }\n    }\n    selectConnectorNode = (pos) => {\n        let { state } = this.props;\n        let nodes = state.nodes;\n        let index = pos.index;\n\n        if (pos.type === 'conn3_end') {\n            this.props.setStateValue({ connectorDir: nodes.connector[index].start_direction });\n        }\n\n        this.props.saveUndoProcess({\n            action: 'move-connector',\n            index: index,\n            connector: [...nodes.connector]\n        });\n\n        this.props.setStateValue({\n            connectorNode: pos\n        })\n    }\n    canvasFeatures = elmnt => {\n        let state = this.props.state;\n\n        if (!state.workflowsStart && state.chart.access_type === 'EDIT') {\n            var shape = document.querySelector(\"#chart > svg\");\n\n            if (shape) {\n                shape.onmousedown = moveObject;\n            } else {\n                elmnt.onmousedown = moveObject;\n            }\n\n            elmnt.ondrop = dropped;\n        }\n\n\n        let self = this;\n\n        function getMousePosition(evt) {\n            var svg = document.querySelector(`#chart>svg`);\n            var CTM = svg.getScreenCTM();\n            return {\n                x: (evt.clientX - CTM.e) / CTM.a,\n                y: (evt.clientY - CTM.f) / CTM.d,\n            };\n        }\n\n        function dropped(e) {\n            var { x, y } = getMousePosition(e);\n            self.dragging(x, y);\n        }\n\n        function moveObject(e) {\n            e = e || window.event;\n            e.preventDefault();\n            document.onmouseup = closeDragElement;\n\n            // call a function whenever the cursor moves:\n            document.onmousemove = elementDrag;\n        }\n\n        function elementDrag(e) {\n            e = e || window.event;\n            e.preventDefault();\n\n            var { x, y } = getMousePosition(e);\n\n            self.moveObject(x, y);\n        }\n\n        function closeDragElement() {\n            // stop moving when mouse button is released:\n            document.onmouseup = null;\n            document.onmousemove = null;\n        }\n    }\n    findDirection = (start_dir, positions) => {\n        let endDir = \"left\";\n        if (start_dir === 'left' || start_dir === \"right\") {\n            if (positions[0][1] > positions[2][1]) {\n                endDir = \"bottom\";\n            } else if (positions[0][1] < positions[2][1]) {\n                endDir = \"top\";\n            } else if (positions[0][0] > positions[2][0]) {\n                endDir = \"left\";\n            } else {\n                endDir = \"right\";\n            }\n        }\n\n        if (start_dir === 'top' || start_dir === \"bottom\") {\n            if (positions[0][1] > positions[2][1] && positions[0][0] === positions[2][0]) {\n                endDir = \"bottom\";\n            } else if (positions[0][1] < positions[2][1] && positions[0][0] === positions[2][0]) {\n                endDir = \"top\";\n            } else if (positions[0][0] > positions[2][0]) {\n                endDir = \"left\";\n            } else {\n                endDir = \"right\";\n            }\n        }\n        // console.log('end dire: ', endDir);\n        return endDir;\n    }\n    increaseCanvasArea = side => {\n        let self = this;\n        // console.log('side: ', side);\n        let nodes = this.props.state.nodes;\n        // console.log('nodes data', nodes);\n        if (side === 'right' || side === 'left') {\n            let width = this.props.state.base_chart_width + 842;\n            this.props.setStateValue({ base_chart_width: width })\n            this.props.setStateValue({ other_w_chart: this.props.state.other_w_chart + 1 });\n\n            this.nodes_changed(nodes);\n        }\n        if (side === 'top' || side === 'bottom') {\n            let height = this.props.state.base_chart_height + 595;\n            this.props.setStateValue({ base_chart_height: height });\n            this.props.setStateValue({ other_h_chart: this.props.state.other_h_chart + 1 })\n\n            this.nodes_changed(nodes);\n        }\n        if (side === 'left') {\n            for (let key in nodes.shapes) {\n                nodes.shapes[key].x += 842;\n            }\n            let pos;\n            for (let index in nodes.connector) {\n                pos = nodes.connector[index].positions;\n                pos.forEach(p => {\n                    p[0] += 842;\n                    p[2] += 842;\n                });\n            }\n            this.nodes_changed(nodes);\n        }\n        if (side === 'top') {\n            for (let key in nodes.shapes) {\n                nodes.shapes[key].y += 595;\n            }\n            let pos;\n            for (let index in nodes.connector) {\n                pos = nodes.connector[index].positions;\n                pos.forEach(p => {\n                    p[1] += 595;\n                    p[3] += 595;\n                });\n            }\n            this.nodes_changed(nodes);\n        }\n\n\n        setTimeout(() => {\n            let { base_chart_width, base_chart_height, zoom } = self.props.state;\n            this.props.setStateValue({\n                svg_chart_width: base_chart_width + (base_chart_width * zoom / 100),\n                svg_chart_height: base_chart_height + (base_chart_height * zoom / 100)\n            })\n            self.props.setStateValue({ base_chart_viewbox: `0 0 ${base_chart_width} ${base_chart_height}` });\n        }, 100);\n    }\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.onDeletePress, false);\n        document.removeEventListener('keydown', this.onCopyPress, false);\n    }\n    componentDidMount() {\n        let self = this;\n        document.addEventListener('keydown', this.onDeletePress, false);\n        // document.addEventListener('keydown', this.onCopyPress, false);\n        this.canvasFeatures(document.querySelector('#chart'))\n\n        var ctrlDown = false,\n            ctrlKey = 17,\n            cmdKey = 91,\n            vKey = 86,\n            cKey = 67;\n\n        // $(document).keydown(function(e) {\n        //     if (e.keyCode == ctrlKey || e.keyCode == cmdKey) ctrlDown = true;\n        // }).keyup(function(e) {\n        //     if (e.keyCode == ctrlKey || e.keyCode == cmdKey) ctrlDown = false;\n        // });\n\n        document.addEventListener('keydown', function (e) {\n            if (e.keyCode == ctrlKey || e.keyCode == cmdKey) ctrlDown = true;\n        }, false);\n\n        document.addEventListener('keyup', function (e) {\n            if (e.keyCode == ctrlKey || e.keyCode == cmdKey) ctrlDown = false;\n        }, false);\n\n        document.addEventListener('keydown', function (e) {\n            if (ctrlDown && (e.keyCode == cKey)) {\n                self.onCopyPress();\n            }\n        }, false)\n    }\n    int(val) {\n        // console.log(val);\n        return Math.round(val);\n    }\n    render() {\n        let state = this.props.state;\n        let self = this;\n        let h_scr = 0;\n        let w_scr = 0;\n        let h_array = [];\n        if (this.props.state.other_h_chart !== 1) {\n            for (let index = 0; index < this.props.state.other_h_chart; index++) {\n                h_array[index] = index;\n            }\n        }\n        if (this.props.state.other_h_chart !== 1) {\n            h_scr = this.props.state.svg_chart_height / this.props.state.other_h_chart;\n            // console.log('height', this.props.state.svg_chart_height, h_scr, this.props.state.other_h_chart);\n        }\n        if (this.props.state.other_w_chart !== 1) {\n            // console.log('width', this.props.state.svg_chart_width, this.props.state.other_w_chart);\n            w_scr = this.int(this.props.svg_chart_width) / this.props.state.other_w_chart;\n            // console.log('width', w_scr);\n        }\n        // console.log('chart details', state);\n\n        return (\n            <div className=\"canvas-area\">\n                <div\n                    className=\"flex-fill\"\n                    style={{\n                        ...state.svg_chart_styles,\n                        width: state.chart ? state.chart.chart.width ? state.chart.chart.width : state.svg_chart_width : state.svg_chart_width,\n                        height: state.chart ? state.chart.chart.height ? state.chart.chart.height : state.svg_chart_height : state.svg_chart_height,\n                    }}\n                    id=\"chart\"\n                    onDragOver={(e) => { e.preventDefault(); }}\n                    // onDrop={e => { self.dragging(e) }}\n                    onMouseDown={(e) => { if (e.button !== 2) self.props.setStateValue({ showContextMenu: false }); }}\n                    onClick={(e) => self.unselectAll(e)}\n                >\n                    <div className=\"increase-area top\" onClick={() => self.increaseCanvasArea('top')}>\n                        <i className=\"icon-plus-circle\"></i>\n                    </div>\n                    <div className=\"increase-area right\" onClick={() => self.increaseCanvasArea('right')}>\n                        <i className=\"icon-plus-circle\"></i>\n                    </div>\n                    <div className=\"increase-area bottom\" onClick={() => self.increaseCanvasArea('bottom')}>\n                        <i className=\"icon-plus-circle\"></i>\n                    </div>\n                    <div className=\"increase-area left\" onClick={() => self.increaseCanvasArea('left')}>\n                        <i className=\"icon-plus-circle\"></i>\n                    </div>\n                    <svg\n                        onMouseDown={self.startSelection}\n                        onMouseUp={self.stopObject}\n                        onMouseLeave={self.stopObject}\n                        // onMouseMove={self.moveObject}\n                        width={state.chart ? state.chart.chart.width ? state.chart.chart.width : state.svg_chart_width : state.svg_chart_width}\n                        height={state.chart ? state.chart.chart.height ? state.chart.chart.height : state.svg_chart_height : state.svg_chart_height}\n                        viewBox={state.chart ? state.chart.chart.width ? `0 0 ${state.chart.chart.width} ${state.chart.chart.height}` : state.base_chart_viewbox : state.base_chart_viewbox}\n                    >\n                        <marker id=\"arrow\" markerUnits=\"strokeWidth\" viewBox=\"0 0 12 12\" refX=\"9\" refY=\"5\" markerWidth=\"8\" markerHeight=\"8\" orient=\"auto\">\n                            <path d=\"M 0 0 L 10 5 L 0 10 z\" fill=\"#000\"></path>\n                        </marker>\n                        <marker id=\"squareArrow\" markerUnits=\"strokeWidth\" viewBox=\"0 0 12 12\" refX=\"5\" refY=\"6\" markerWidth=\"8\" markerHeight=\"8\" orient=\"auto\">\n                            <rect x=\"1\" y=\"1\" width=\"10\" height=\"10\" fill=\"white\" stroke=\"#000\" strokeWidth=\"1\" />\n                        </marker>\n                        <marker id=\"squareFillArrow\" markerUnits=\"strokeWidth\" viewBox=\"0 0 12 12\" refX=\"5\" refY=\"6\" markerWidth=\"8\" markerHeight=\"8\" orient=\"auto\">\n                            <rect x=\"1\" y=\"1\" width=\"10\" height=\"10\" fill=\"#000\" stroke=\"#000\" strokeWidth=\"1\" />\n                        </marker>\n                        <marker id=\"circleArrow\" markerUnits=\"strokeWidth\" viewBox=\"0 0 12 12\" refX=\"5\" refY=\"6\" markerWidth=\"8\" markerHeight=\"8\" orient=\"auto\">\n                            <circle cx=\"6\" cy=\"6\" r=\"5\" width=\"10\" height=\"10\" fill=\"white\" stroke=\"#000\" strokeWidth=\"1\" />\n                        </marker>\n                        <marker id=\"circleFillArrow\" markerUnits=\"strokeWidth\" viewBox=\"0 0 12 12\" refX=\"5\" refY=\"6\" markerWidth=\"8\" markerHeight=\"8\" orient=\"auto\">\n                            <circle cx=\"6\" cy=\"6\" r=\"5\" width=\"10\" height=\"10\" fill=\"#000\" stroke=\"#000\" strokeWidth=\"1\" />\n                        </marker>\n                        {\n                            state.nodes && state.nodes.connector && state.nodes.connector.map(function (node, i) {\n                                let path = '';\n                                let lastWorkflowShape = null;\n                                let connClass = state.connectorFocused !== null && state.connectorFocused.index === i ? \"connection focused\" : \"connection\";\n\n                                if (state.workflowShapes.length) {\n                                    let shapeId = state.workflowShapes[state.workflowShapes.length - 1];\n\n                                    lastWorkflowShape = state.nodes.shapes.findIndex(s => s.id === shapeId);\n\n\n                                    if (node.shape1_index === lastWorkflowShape) {\n                                        connClass += \" focused\";\n                                    }\n                                    // console.log('connection start index: ', node.shape1_index, connClass, lastWorkflowShape);\n                                }\n\n                                node.positions.forEach(function (row, j) {\n                                    path += j === 0 ? 'M' : 'L';\n                                    path += `${row[0]},${row[1]}L${row[2]},${row[3]}`;\n                                });\n                                return <g className={connClass} key={i} onMouseDown={e => self.focusConnector(e, i)}>\n                                    <path stroke=\"#000\" strokeWidth=\"15\" fill=\"none\" strokeDasharray={node.dasharray} d={path} markerEnd={`url(#${node.arrow})`} style={{ opacity: 0 }}></path>\n                                    <path stroke=\"#000\" strokeWidth=\"2\" fill=\"none\" strokeDasharray={node.dasharray} d={path} markerEnd={`url(#${node.arrow})`}></path>\n\n                                    {\n                                        (state.connectorFocused !== null && state.connectorFocused.index === i) ?\n                                            <>\n                                                {\n                                                    node.positions.map((npos, k) => {\n                                                        if (k > 0 && k < node.positions.length - 1) {\n                                                            return <rect\n                                                                key={k}\n                                                                style={{\n                                                                    cursor: npos[1] === npos[3] ? 'ns-resize' : 'ew-resize'\n                                                                }}\n                                                                x={npos[1] === npos[3] ? npos[0] + (npos[2] - npos[0]) / 2 - 5 : npos[0] - 5}\n                                                                y={npos[1] === npos[3] ? npos[1] - 5 : npos[1] + (npos[3] - npos[1]) / 2 - 5}\n                                                                width=\"10\"\n                                                                height=\"10\"\n                                                                fill=\"#12640a\"\n                                                                stroke=\"#12640a\"\n                                                                onMouseDown={() => self.selectConnectorNode({ index: i, cx: [2, 0], cy: [2, 1], 'type': npos[1] === npos[3] ? 'v' : 'h', index2: k })}\n                                                            />\n                                                        } else {\n                                                            return null;\n                                                        }\n                                                    })\n                                                }\n                                            </>\n                                            : null\n                                    }\n                                </g>\n                            })\n                        }\n                        {\n                            state?.nodes && state?.nodes?.shapes && state?.nodes?.shapes.map(function (node, i) {\n                                // console.log('node', node);\n                                let className = \"flowchart-shape\";\n                                if (state?.current && i === state?.current?.index) {\n                                    className += \" selected\";\n                                }\n                                if (state?.focused && i === state?.focused?.index) {\n                                    className += \" focused\";\n                                }\n\n                                if (state?.workflowShapes?.includes(node?.id)) {\n                                    className += \" active\";\n                                }\n\n                                let filtered_shapes = state?.shapes?.filter(s => s?.shape_key === node?.type);\n                                let s = filtered_shapes[0];\n\n                                return <>\n                                    {\n                                        node?.type == \"rectangle\" || node?.type == \"ellipse\" ?\n                                            <g\n                                                onMouseDown={(e) => self.selectObject(e, i)}\n                                                onClick={() => self.focusObject(i)}\n                                                onMouseOver={() => { self.props.setStateValue({ activeNode: i }) }}\n                                                onMouseLeave={() => { self.props.setStateValue({ activeNode: null }) }}\n                                                id={`svg_obj_${i}`}\n                                                key={`shape_${i}`}\n                                                className={className}\n                                            >\n                                                {\n                                                    s && s.shape && s.shape.length && s.shape.map((shapeJSON, s_index) => {\n                                                        // let shapeJSON = s.shape;\n                                                        let ShapeTag = shapeJSON.tag;\n\n                                                        let shape_attr = shapeJSON.attributes, filtered_value, filtered_value2, s_attr = {}, s_attr2 = {};\n\n\n                                                        if (s.shape_key === node.type) {\n                                                            for (let index in shape_attr) {\n                                                                filtered_value = shape_attr[index].toString();\n\n                                                                filtered_value = filtered_value\n                                                                    .replace(/\\[w\\]/gi, node.width)\n                                                                    .replace(/\\[h\\]/gi, node.height)\n                                                                    .replace(/\\[x\\]/gi, node.x)\n                                                                    .replace(/\\[y\\]/gi, node.y)\n                                                                    // Math calculation\n                                                                    .replace(/{(.*?)}/gi, function (r) {\n                                                                        let res_string = r.replace(/{(.*?)}/gi, \"\\$1\");\n                                                                        return eval(res_string)\n                                                                    });\n\n                                                                s_attr[index] = filtered_value;\n\n                                                                filtered_value2 = shape_attr[index].toString();\n\n                                                                filtered_value2 = filtered_value2\n                                                                    .replace(/\\[w\\]/gi, node.width + 30)\n                                                                    .replace(/\\[h\\]/gi, node.height + 30)\n                                                                    .replace(/\\[x\\]/gi, node.x - 15)\n                                                                    .replace(/\\[y\\]/gi, node.y - 15)\n                                                                    // Math calculation\n                                                                    .replace(/{(.*?)}/gi, function (r) {\n                                                                        let res_string = r.replace(/{(.*?)}/gi, \"\\$1\");\n                                                                        return eval(res_string)\n                                                                    });\n\n                                                                s_attr2[index] = filtered_value2;\n                                                            }\n\n                                                            return (\n                                                                <React.Fragment key={s_index}>\n                                                                    {/* {\n                                                                        node.x == 0 || node.y == 0\n                                                                    } */}\n                                                                    <ShapeTag\n                                                                        className=\"body start\"\n                                                                        x={node.x - 15}\n                                                                        y={node.y - 15}\n                                                                        width={node.width + 30}\n                                                                        height={node.height + 30}\n                                                                        stroke={node.stroke}\n                                                                        fill={node.fill}\n                                                                        strokeWidth={node.type !== 'text' ? node.strokeWidth : 0}\n                                                                        strokeDasharray={node.dasharray}\n                                                                        {...s_attr2}\n                                                                        style={{ opacity: 0 }}\n                                                                    />\n                                                                    <ShapeTag\n                                                                        className=\"body start\"\n                                                                        x={node.x}\n                                                                        y={node.y}\n                                                                        width={node.width}\n                                                                        height={node.height}\n                                                                        stroke={node.stroke}\n                                                                        fill={node.fill}\n                                                                        fillOpacity={s && s.chart_type === \"Flowchart\" ? 1 : 0}\n                                                                        strokeWidth={node.type !== 'text' ? node.strokeWidth : 0}\n                                                                        strokeDasharray={node.dasharray}\n                                                                        {...s_attr}\n                                                                    />\n                                                                </React.Fragment>\n                                                            );\n                                                        } else {\n                                                            return <></>\n                                                        }\n                                                    })\n                                                }\n                                                {\n                                                    s && (s.chart_type === 'Flowchart' || node.type === 'text') ?\n                                                        <>\n                                                            <text\n                                                                x={node.x + node.width / 2}\n                                                                y={node.y + node.height / 2}\n                                                                className=\"unselectable\"\n                                                                textAnchor=\"middle\"\n                                                                alignmentBaseline=\"middle\"\n                                                            >\n                                                                {\n                                                                    node && node.name && node.name.toLowerCase().replace(/\\b[a-z]/g, function (letter) {\n                                                                        return letter.toUpperCase();\n                                                                    })\n                                                                }\n                                                            </text>\n\n                                                        </>\n                                                        : <></>\n                                                }\n                                                {\n                                                    s && s.chart_type && s.chart_type === 'Flowchart' ?\n                                                        <FlowchartConnector\n                                                            params={{ node, display: state.activeNode === i, workflowsStart: state.workflowsStart, index: i }}\n                                                            state={state}\n                                                            selectConnector={(dir) => self.selectConnector(dir, i)}\n                                                            doneConnection={(dir) => self.doneConnection(dir, i)}\n                                                        /> : <></>\n                                                }\n                                                {\n                                                    state.focused && state.focused.index === i ?\n                                                        <FlowchartResizeNode\n                                                            params={{ node }}\n                                                            selectResize={(dir) => self.selectResize(dir)}\n                                                        />\n                                                        : <></>\n                                                }\n                                            </g>\n                                            :\n                                            <>\n                                                {\n                                                    node?.type == \"text\" ?\n                                                        <g\n                                                            onMouseDown={(e) => self.selectObject(e, i)}\n                                                            onClick={() => self.focusObject(i)}\n                                                            onDoubleClick={() => self.openTextEditorPop(i)}\n                                                            onMouseOver={() => { self.props.setStateValue({ activeNode: i }) }}\n                                                            onMouseLeave={() => { self.props.setStateValue({ activeNode: null }) }}\n                                                            id={`svg_obj_${i}`}\n                                                            key={`shape_${i}`}\n                                                            className={className}\n                                                        >\n                                                            {\n                                                                s && s.shape && s.shape.length && s.shape.map((shapeJSON, s_index) => {\n                                                                    // let shapeJSON = s.shape;\n                                                                    let ShapeTag = shapeJSON.tag;\n\n                                                                    let shape_attr = shapeJSON.attributes, filtered_value, filtered_value2, s_attr = {}, s_attr2 = {};\n\n\n                                                                    if (s.shape_key === node.type) {\n                                                                        for (let index in shape_attr) {\n                                                                            filtered_value = shape_attr[index].toString();\n\n                                                                            filtered_value = filtered_value\n                                                                                .replace(/\\[w\\]/gi, node.width)\n                                                                                .replace(/\\[h\\]/gi, node.height)\n                                                                                .replace(/\\[x\\]/gi, node.x)\n                                                                                .replace(/\\[y\\]/gi, node.y)\n                                                                                // Math calculation\n                                                                                .replace(/{(.*?)}/gi, function (r) {\n                                                                                    let res_string = r.replace(/{(.*?)}/gi, \"\\$1\");\n                                                                                    return eval(res_string)\n                                                                                });\n\n                                                                            s_attr[index] = filtered_value;\n\n                                                                            filtered_value2 = shape_attr[index].toString();\n\n                                                                            filtered_value2 = filtered_value2\n                                                                                .replace(/\\[w\\]/gi, node.width + 30)\n                                                                                .replace(/\\[h\\]/gi, node.height + 30)\n                                                                                .replace(/\\[x\\]/gi, node.x - 15)\n                                                                                .replace(/\\[y\\]/gi, node.y - 15)\n                                                                                // Math calculation\n                                                                                .replace(/{(.*?)}/gi, function (r) {\n                                                                                    let res_string = r.replace(/{(.*?)}/gi, \"\\$1\");\n                                                                                    return eval(res_string)\n                                                                                });\n\n                                                                            s_attr2[index] = filtered_value2;\n                                                                        }\n\n                                                                        return (\n                                                                            <React.Fragment key={s_index}>\n                                                                                <ShapeTag\n                                                                                    className=\"body start\"\n                                                                                    x={node.x - 15}\n                                                                                    y={node.y - 15}\n                                                                                    width={node.width + 30}\n                                                                                    height={node.height + 30}\n                                                                                    stroke={node.stroke}\n                                                                                    fill={node.fill}\n                                                                                    strokeWidth={node.type !== 'text' ? node.strokeWidth : 0}\n                                                                                    strokeDasharray={node.dasharray}\n                                                                                    {...s_attr2}\n                                                                                    style={{ opacity: 0 }}\n                                                                                />\n                                                                                <ShapeTag\n                                                                                    className=\"body start\"\n                                                                                    x={node.x}\n                                                                                    y={node.y}\n                                                                                    width={node.width}\n                                                                                    height={node.height}\n                                                                                    stroke={node.stroke}\n                                                                                    fill={node.fill}\n                                                                                    fillOpacity={s && s.chart_type === \"Flowchart\" ? 1 : 0}\n                                                                                    strokeWidth={node.type !== 'text' ? node.strokeWidth : 0}\n                                                                                    strokeDasharray={node.dasharray}\n                                                                                    {...s_attr}\n                                                                                />\n                                                                            </React.Fragment>\n                                                                        );\n                                                                    } else {\n                                                                        return <></>\n                                                                    }\n                                                                })\n                                                            }\n                                                            {\n                                                                s && (s.chart_type === 'Flowchart' || node.type === 'text') ?\n                                                                    <>\n                                                                        <text\n                                                                            x={node.x + node.width / 2}\n                                                                            y={node.y + node.height / 2}\n                                                                            className=\"unselectable\"\n                                                                            textAnchor=\"middle\"\n                                                                            alignmentBaseline=\"middle\"\n                                                                        >\n                                                                            {\n                                                                                node && node.name && node.name.toLowerCase().replace(/\\b[a-z]/g, function (letter) {\n                                                                                    return letter.toUpperCase();\n                                                                                })\n                                                                            }\n                                                                        </text>\n                                                                    </>\n                                                                    : <></>\n                                                            }\n                                                            {\n                                                                s && s.chart_type && s.chart_type === 'Flowchart' ?\n                                                                    <FlowchartConnector\n                                                                        params={{ node, display: state.activeNode === i, workflowsStart: state.workflowsStart, index: i }}\n                                                                        state={state}\n                                                                        selectConnector={(dir) => self.selectConnector(dir, i)}\n                                                                        doneConnection={(dir) => self.doneConnection(dir, i)}\n                                                                    /> : <></>\n                                                            }\n                                                            {\n                                                                state.focused && state.focused.index === i ?\n                                                                    <FlowchartResizeNode\n                                                                        params={{ node }}\n                                                                        selectResize={(dir) => self.selectResize(dir)}\n                                                                    />\n                                                                    : <></>\n                                                            }\n                                                        </g>\n                                                        :\n                                                        <g\n                                                            onMouseDown={(e) => self.selectObject(e, i)}\n                                                            onClick={() => self.focusObject(i)}\n                                                            onDoubleClick={() => self.openEditorPop(i)}\n                                                            onMouseOver={() => { self.props.setStateValue({ activeNode: i }) }}\n                                                            onMouseLeave={() => { self.props.setStateValue({ activeNode: null }) }}\n                                                            id={`svg_obj_${i}`}\n                                                            key={`shape_${i}`}\n                                                            className={className}\n                                                        >\n                                                            {\n                                                                s && s.shape && s.shape.length && s.shape.map((shapeJSON, s_index) => {\n                                                                    // let shapeJSON = s.shape;\n                                                                    let ShapeTag = shapeJSON.tag;\n\n                                                                    let shape_attr = shapeJSON.attributes, filtered_value, filtered_value2, s_attr = {}, s_attr2 = {};\n\n\n                                                                    if (s.shape_key === node.type) {\n                                                                        for (let index in shape_attr) {\n                                                                            filtered_value = shape_attr[index].toString();\n\n                                                                            filtered_value = filtered_value\n                                                                                .replace(/\\[w\\]/gi, node.width)\n                                                                                .replace(/\\[h\\]/gi, node.height)\n                                                                                .replace(/\\[x\\]/gi, node.x)\n                                                                                .replace(/\\[y\\]/gi, node.y)\n                                                                                // Math calculation\n                                                                                .replace(/{(.*?)}/gi, function (r) {\n                                                                                    let res_string = r.replace(/{(.*?)}/gi, \"\\$1\");\n                                                                                    return eval(res_string)\n                                                                                });\n\n                                                                            s_attr[index] = filtered_value;\n\n                                                                            filtered_value2 = shape_attr[index].toString();\n\n                                                                            filtered_value2 = filtered_value2\n                                                                                .replace(/\\[w\\]/gi, node.width + 30)\n                                                                                .replace(/\\[h\\]/gi, node.height + 30)\n                                                                                .replace(/\\[x\\]/gi, node.x - 15)\n                                                                                .replace(/\\[y\\]/gi, node.y - 15)\n                                                                                // Math calculation\n                                                                                .replace(/{(.*?)}/gi, function (r) {\n                                                                                    let res_string = r.replace(/{(.*?)}/gi, \"\\$1\");\n                                                                                    return eval(res_string)\n                                                                                });\n\n                                                                            s_attr2[index] = filtered_value2;\n                                                                        }\n\n                                                                        return (\n                                                                            <React.Fragment key={s_index}>\n                                                                                <ShapeTag\n                                                                                    className=\"body start\"\n                                                                                    x={node.x - 15}\n                                                                                    y={node.y - 15}\n                                                                                    width={node.width + 30}\n                                                                                    height={node.height + 30}\n                                                                                    stroke={node.stroke}\n                                                                                    fill={node.fill}\n                                                                                    strokeWidth={node.type !== 'text' ? node.strokeWidth : 0}\n                                                                                    strokeDasharray={node.dasharray}\n                                                                                    {...s_attr2}\n                                                                                    style={{ opacity: 0 }}\n                                                                                />\n                                                                                <ShapeTag\n                                                                                    className=\"body start\"\n                                                                                    x={node.x}\n                                                                                    y={node.y}\n                                                                                    width={node.width}\n                                                                                    height={node.height}\n                                                                                    stroke={node.stroke}\n                                                                                    fill={node.fill}\n                                                                                    fillOpacity={s && s.chart_type === \"Flowchart\" ? 1 : 0}\n                                                                                    strokeWidth={node.type !== 'text' ? node.strokeWidth : 0}\n                                                                                    strokeDasharray={node.dasharray}\n                                                                                    {...s_attr}\n                                                                                />\n                                                                            </React.Fragment>\n                                                                        );\n                                                                    } else {\n                                                                        return <></>\n                                                                    }\n                                                                })\n                                                            }\n                                                            {\n                                                                s && (s.chart_type === 'Flowchart' || node.type === 'text') ?\n                                                                    <>\n                                                                        <text\n                                                                            x={node.x + node.width / 2}\n                                                                            y={node.y + node.height / 2}\n                                                                            className=\"unselectable\"\n                                                                            textAnchor=\"middle\"\n                                                                            alignmentBaseline=\"middle\"\n                                                                        >\n                                                                            {\n                                                                                node && node.name && node.name.toLowerCase().replace(/\\b[a-z]/g, function (letter) {\n                                                                                    return letter.toUpperCase();\n                                                                                })\n                                                                            }\n                                                                        </text>\n                                                                    </>\n                                                                    : <></>\n                                                            }\n                                                            {\n                                                                s && s.chart_type && s.chart_type === 'Flowchart' ?\n                                                                    <FlowchartConnector\n                                                                        params={{ node, display: state.activeNode === i, workflowsStart: state.workflowsStart, index: i }}\n                                                                        state={state}\n                                                                        selectConnector={(dir) => self.selectConnector(dir, i)}\n                                                                        doneConnection={(dir) => self.doneConnection(dir, i)}\n                                                                    /> : <></>\n                                                            }\n                                                            {\n                                                                state.focused && state.focused.index === i ?\n                                                                    <FlowchartResizeNode\n                                                                        params={{ node }}\n                                                                        selectResize={(dir) => self.selectResize(dir)}\n                                                                    />\n                                                                    : <></>\n                                                            }\n                                                        </g>\n                                                }\n                                            </>\n                                    }\n                                </>\n                            })\n                        }\n                        <rect\n                            x={state.multiSelectionStatus ? state.multiSelectionStatus.startX : 1}\n                            y={state.multiSelectionStatus ? state.multiSelectionStatus.startY : 1}\n                            width={state.multiSelectionStatus ? state.multiSelectionStatus.width : 10}\n                            height={state.multiSelectionStatus ? state.multiSelectionStatus.height : 10}\n                            fill=\"#0000ff88\"\n                            stroke=\"#12640a\"\n                            fillOpacity={.1}\n                            id=\"selectionRect\"\n                            style={{\n                                visibility: state.multiSelectionStatus ? \"visible\" : \"hidden\"\n                            }}\n                            onMouseDown={(e) => self.multiselectObject(e)}\n                        />\n                    </svg>\n                    {/* <SelectionMenu showSelectionMenu={state.showSelectionMenu} onGoTo={(side, index) => self.handleGoTo(side, index)} /> */}\n                    <ContextMenu showContextMenu={state.showContextMenu} onGoTo={(side, index) => self.handleGoTo(side, index)} undo_process={state?.undo_process} redo_process={state?.redo_process} setStateValue={params => this.props.setStateValue(params)} />\n                    <ContextMultiSelectMenu showContextMultiSelectMenu={state.showContextMultiSelectMenu} onGoTo={(side) => self.multiselecthandleGoTo(side)} />\n                    <ConnectorContextMenu showContextMenu={state.openConnectorContextMenu} onGoTo={(side, index) => self.handleConnectionContext(side, index)} />\n\n                    <ShapePopup shapes={state.shapes} showShapePopup={this.state.showShapePopup} selectShape={async (key) => {\n                        // console.log('clicked key: ', key);\n                        if (this.state.showShapePopup) {\n                            let { x, y } = this.state.showShapePopup;\n                            let last = state.nodes.connector[state.nodes.connector.length - 1];\n                            this.props.setStateValue({ drag_type: key });\n\n\n                            if (\n                                last.start_direction === 'left' || last.start_direction === 'right'\n                            ) {\n                                if (last.positions[0][1] !== last.positions[2][3]) {\n                                    x -= 40;\n                                }\n                                if (last.positions[0][1] > last.positions[2][3]) {\n                                    y -= 40;\n                                }\n                            }\n\n                            if (\n                                last.start_direction === 'bottom' || last.start_direction === 'top'\n                            ) {\n                                if (last.positions[0][0] === last.positions[2][2]) {\n                                    x -= 40;\n                                } else {\n                                    y -= 20;\n                                }\n\n                                if (last.positions[0][0] > last.positions[2][2]) {\n                                    x -= 80;\n                                }\n                            }\n                            this.nodes_changed(state.nodes);\n\n                            setTimeout(() => {\n                                this.dragging(x, y);\n                            }, 10);\n\n                            setTimeout(async () => {\n                                this.setState({ endConnector: false });\n                                let endDir = await self.findDirection(last.start_dir, last.positions);\n\n                                // nodes.connector\n                                last.shape2_index = state.nodes.shapes.length - 1;\n                                last.end_direction = endDir;\n\n                                this.nodes_changed(state.nodes);\n\n                                this.setState({ showShapePopup: null });\n                            }, 100);\n                        }\n                    }} />\n                </div>\n                {\n                    state.showEditorPopup ?\n                        <EditorPopup setStateValue={params => this.props.setStateValue(params)} showEditorPopup={state.showEditorPopup} shapesList={state.shapes} onSave={(node, index) => self.saveCanvas(node, index)} closeEditorPopup={() => self.closeEditorPopup()}></EditorPopup> :\n                        \"\"\n                }\n                {\n                    state.showTextEditorPopup ?\n                        <TextEditorPopup setStateValue={params => this.props.setStateValue(params)} showTextEditorPopup={state.showTextEditorPopup} shapesList={state.shapes} onSave={(node, index) => self.saveCanvas(node, index)} closeTextEditorPopup={() => self.closeTextEditorPopup()}></TextEditorPopup> :\n                        \"\"\n                }\n            </div >\n        );\n    }\n}\n","import { Component } from \"react\";\n\nclass ContextMenu extends Component {\n    handleGoTo(e, side, index) {\n        if (e.button === 0) {\n            this.props.onGoTo(side, index);\n        }\n    }\n\n    saveUndoProcess = (params, delete_redo = true) => {\n        let state = this.props.state;\n        let undo_process = state.undo_process ?? [];\n        undo_process.push(params);\n\n        this.props.setStateValue({ undo_process });\n\n        if (delete_redo) {\n            this.props.setStateValue({ redo_process: [] });\n        }\n    }\n    saveRedoProcess = params => {\n        let state = this.props.state;\n        let redo_process = state.redo_process;\n        redo_process.push(params);\n\n        this.props.setStateValue({ redo_process });\n    }\n\n    doUndo = () => {\n        let state = this.props.state;\n        let undo_process = state?.undo_process;\n        let nodes = state?.nodes;\n\n        if (undo_process && undo_process.length) {\n            this.saveRedoProcess(nodes);\n            let last = undo_process[undo_process.length - 1];\n\n            switch (last.action) {\n                case 'add-shape':\n                    this.saveRedoProcess({\n                        action: 'remove-shape',\n                        index: nodes.shapes.length,\n                        data: last.data,\n                        connectors: last.connectors\n                    });\n                    nodes.shapes.push(last.data);\n                    nodes.connector = last.connectors;\n                    break;\n\n                case 'remove-shape':\n                    this.saveRedoProcess({\n                        action: 'add-shape',\n                        index: last.index,\n                        data: last.data\n                    });\n\n                    nodes.shapes.splice(last.index, 1);\n\n                    break;\n\n                case 'add-connector':\n                    this.saveRedoProcess({\n                        action: 'remove-connector',\n                        index: last.index,\n                        connector: [...nodes.connector]\n                    }, false);\n\n                    nodes.connector = last.connector;\n                    break;\n\n                case 'remove-connector':\n                    this.saveRedoProcess({\n                        action: 'add-connector',\n                        index: last.index,\n                        connector: [...nodes.connector]\n                    }, false);\n\n                    nodes.connector.splice(last.index, 1);\n                    break;\n\n                case 'resize-shape':\n                    this.saveRedoProcess({\n                        action: 'resize-shape',\n                        index: last.index,\n                        data: { ...nodes.shapes[last.index] },\n                        connectors: last.connectors\n                    });\n\n                    nodes.shapes[last.index] = last.data;\n                    break;\n\n                case 'move-shape':\n                    this.saveRedoProcess({\n                        action: 'move-shape',\n                        index: last.index,\n                        data: { ...nodes.shapes[last.index] },\n                        connector: [...nodes.connector],\n                    });\n\n                    nodes.shapes[last.index] = last.data;\n                    nodes.connector = last.connector;\n                    break;\n\n                case 'move-connector':\n                    console.log('Undo move-connector');\n                    console.log('Undo move-connector', last.index);\n                    console.log('Undo move-connector', [...nodes.connector]);\n                    this.saveRedoProcess({\n                        action: 'move-connector',\n                        index: last.index,\n                        connector: [...nodes.connector],\n                    });\n\n                    nodes.connector = last.connector;\n                    break;\n\n\n                default:\n                    break;\n            }\n\n            undo_process.splice(undo_process.length - 1, 1)\n        }\n\n        console.log('undo process: ', undo_process);\n\n        this?.props?.setStateValue({ undo_process, nodes });\n    }\n\n    doRedo = () => {\n        let state = this.props.state;\n        let redo_process = state?.redo_process;\n        let nodes = state?.nodes;\n\n        if (redo_process && redo_process.length) {\n            let last = redo_process[redo_process.length - 1];\n\n            this.saveUndoProcess(nodes, false);\n\n            this.props.setStateValue({ nodes: last });\n\n            switch (last.action) {\n                case 'add-shape':\n                    nodes.shapes.push(last.data);\n                    this.saveUndoProcess({\n                        action: 'remove-shape',\n                        index: last.index,\n                        data: last.data\n                    }, false);\n                    break;\n\n                case 'remove-shape':\n                    this.saveUndoProcess({\n                        action: 'add-shape',\n                        index: last.index,\n                        data: last.data\n                    });\n\n                    nodes.shapes.splice(last.index, 1);\n\n                    break;\n\n                case 'add-connector':\n                    this.saveUndoProcess({\n                        action: 'remove-connector',\n                        index: last.index,\n                        connector: [...nodes.connector]\n                    }, false);\n\n                    nodes.connector = last.connector;\n                    break;\n\n                case 'remove-connector':\n                    this.saveUndoProcess({\n                        action: 'add-connector',\n                        index: last.index,\n                        connector: [...nodes.connector]\n                    }, false);\n\n                    nodes.connector.splice(last.index, 1);\n                    break;\n\n                case 'resize-shape':\n                    this.saveUndoProcess({\n                        action: 'resize-shape',\n                        index: last.index,\n                        data: { ...nodes.shapes[last.index] }\n                    });\n                    console.log('last.data', last.data);\n\n                    nodes.shapes[last.index] = last.data;\n                    break;\n\n                case 'move-shape':\n                    this.saveUndoProcess({\n                        action: 'move-shape',\n                        index: last.index,\n                        data: { ...nodes.shapes[last.index] },\n                        connector: [...nodes.connector],\n                    });\n\n                    nodes.shapes[last.index] = last.data;\n                    nodes.connector = last.connector;\n                    // nodes.connector.push(last.connector);\n                    break;\n\n                case 'move-connector':\n                    console.log('redo move-connector');\n                    console.log('redo move-connector', last.index);\n                    console.log('redo move-connector', [...nodes.connector]);\n                    this.saveUndoProcess({\n                        action: 'move-connector',\n                        index: last.index,\n                        connector: [...nodes.connector],\n                    });\n\n                    nodes.connector = last.connector;\n                    break;\n\n                default:\n                    break;\n            }\n\n            redo_process.splice(-1, 1);\n        }\n\n        console.log('redo process: ', redo_process);\n\n        this.props.setStateValue({ redo_process, nodes });\n    }\n\n    render() {\n        console.log(this?.props?.state?.undo_process, this?.props?.state?.redo_process, 'sasasa')\n        if (this.props.showContextMenu.x && this.props.showContextMenu.y) {\n            return (\n                <ul className=\"context-menu\" style={{ left: this.props.showContextMenu.x + 'px', top: this.props.showContextMenu.y + 'px', }}>\n                    {/* <li onMouseDown={(e) => this.handleGoTo(e, 'front', this.props.showContextMenu.index)}>Go to Front</li> */}\n                    {/* <li onMouseDown={(e) => this.handleGoTo(e, 'back', this.props.showContextMenu.index)}>Go to Back</li> */}\n                    <li onMouseDown={() => this.doUndo()}>Undo</li>\n                    <li onMouseDown={() => this.doRedo()}>Redo</li>\n                    <li onMouseDown={(e) => this.handleGoTo(e, 'copy', this.props.showContextMenu.index)}>Copy</li>\n                    <li onMouseDown={(e) => this.handleGoTo(e, 'paste', this.props.showContextMenu.index)}>Paste</li>\n                    <li onMouseDown={(e) => this.handleGoTo(e, 'delete', this.props.showContextMenu.index)}>Delete</li>\n                    <li>Add To Shape Group</li>\n                </ul >\n            );\n        } else {\n            return null\n        }\n    }\n}\n\nexport default ContextMenu;\n","import { Component } from \"react\";\n\nclass ConnectorContextMenu extends Component {\n    handleGoTo(e, side, index) {\n        if (e.button === 0) {\n            this.props.onGoTo(side, index);\n        }\n    }\n    render() {\n        if (this.props.showContextMenu) {\n            let { x, y, index } = this.props.showContextMenu;\n            if (x && y) {\n                return (\n                    <ul className=\"context-menu\" style={{ left: x + 'px', top: y + 'px', }}>\n                        <li onMouseDown={(e) => this.handleGoTo(e, 'delete', index)}>Delete</li>\n                    </ul>\n                );\n            } else {\n                return null\n            }\n        } else {\n            return null\n        }\n    }\n}\n\nexport default ConnectorContextMenu;\n","import { Component, useState } from \"react\";\nimport Dropzone from \"react-dropzone\";\nimport useSpeechToText from 'react-hook-speech-to-text';\n\nimport { Editor } from \"@tinymce/tinymce-react\";\nimport { uploadMediaFile } from \"../Api/file.api\";\n\nimport swal from \"sweetalert\";\nimport CustomSelect from \"./CustomSelect\";\n\nconst TextEditor = ({ description, changeDescription }) => {\n    let [editorSel, setEditorSel] = useState(null);\n\n    let [speech, setSpeech] = useState(null);\n    let [speechCount, setSpeechCount] = useState(0);\n\n    const {\n        isRecording,\n        results,\n        startSpeechToText,\n        stopSpeechToText\n    } = useSpeechToText({\n        continuous: true,\n        // timeout: 10000,\n        speechRecognitionProperties: {\n            // lang: 'es-ES',\n            interimResults: true\n        },\n        onStoppedSpeaking: (res) => {\n            console.log('on stop: ', res);\n        }\n    });\n\n    if (results.length !== speechCount) {\n        setSpeech(results[results.length - 1]);\n        setSpeechCount(results.length);\n    }\n\n\n    // if(speech) changeDescription(speech + ' ');\n\n    setTimeout(() => {\n        editorSel && speech && editorSel.insertContent(speech + ' ');\n        setSpeech(null);\n    }, 1);\n\n    return <>\n        <div className=\"float-right\">\n            <span className=\"d-inline-block mr-2\">{isRecording ? 'Listening...' : 'Click to Speak'}</span>\n            <button className={isRecording ? \"speak-btn listening\" : \"speak-btn\"} onClick={isRecording ? stopSpeechToText : startSpeechToText}>\n                <i className=\"icon-mic\"></i>\n            </button>\n        </div>\n        <label>\n            Description\n        </label>\n        <Editor\n            onInit={(evt, editor) => {\n                setEditorSel(editor)\n            }}\n            value={description}\n            init={{\n                height: 300,\n                menubar: false,\n                branding: false,\n                plugins: [\n                    'advlist autolink lists link image charmap print preview anchor',\n                    'searchreplace visualblocks code fullscreen',\n                    'insertdatetime media table paste code help wordcount'\n                ],\n                toolbar: 'undo redo | ' +\n                    'bold italic underline | backcolor forecolor | alignleft aligncenter ' +\n                    'alignright alignjustify | help speechButton',\n                content_style: 'body { font-family:Helvetica,Arial,sans-serif; font-size:14px }'\n            }}\n            onEditorChange={newText => changeDescription(newText)}\n        />\n    </>\n}\n\nclass EditorPopup extends Component {\n    state = {\n        fields: null,\n        changes: false\n    }\n    constructor(props) {\n        super(props);\n        if (props.showEditorPopup && props.showEditorPopup.node) {\n            this.state = {\n                fields: { ...props.showEditorPopup.node }\n            }\n        }\n    }\n    changeDescription = description => {\n        let fields = this.state.fields;\n        fields.description = description;\n\n        this.setState({ fields, changes: true });\n    }\n    handleChange(e, field) {\n        this.changeNode(e.target.value, field);\n    }\n    changeNode = (val, field) => {\n        let fields = this.state.fields;\n        fields[field] = val;\n        this.setState({ fields, changes: true });\n    }\n    handleFile = async (e, field) => {\n        let file = e.target.files[0];\n        let response = await uploadMediaFile(file);\n\n        if (response.success) this.changeNode(response.data.url.Location, field);\n    }\n    uploadImage = async (file, field) => {\n        let response = await uploadMediaFile(file[0]);\n\n        if (response.success) this.changeNode(response.data.url.Location, field);\n    }\n    saveChanges() {\n        this.props.onSave(this.state.fields, this.props.showEditorPopup.index);\n        this.closePopup();\n    }\n    closePopup() {\n        this.props.closeEditorPopup()\n    }\n    componentDidMount() {\n        this.props.setStateValue({\n            focused: false\n        });\n    }\n    render() {\n        let self = this\n        // window.addEventListener('keyup', function () {\n        //     let textInput = this.document.getElementById('title-input').value;\n        //     this.document.getElementById('title-output').innerHTML = textInput;\n        // })\n        if (this.state.fields) {\n            let { name, type, description } = this.state.fields\n\n            return (\n                <div className=\"editorPopup\">\n                    <div className=\"editorHeading\">\n                        <h4>Flowchart Shape Info</h4>\n                        <div className=\"close-btn\" onMouseDown={(e) => {\n                            if (e.button === 0) {\n                                if (self.state.changes) {\n                                    swal({\n                                        title: \"Are you sure?\",\n                                        text: \"Your changes will not made.\",\n                                        icon: \"warning\",\n                                        buttons: true,\n                                        dangerMode: true,\n                                    })\n                                        .then((willDelete) => {\n                                            if (willDelete) {\n                                                self.closePopup()\n                                            }\n                                        });\n                                } else {\n                                    self.closePopup();\n                                }\n                            }\n                        }}>\n                            <i className=\"icon-close1\"></i>\n                        </div>\n                    </div>\n                    <div className=\"editorBody\">\n                        <div className=\"row\">\n                            <div className=\"col-6\">\n                                <div className=\"form-group\">\n                                    <label>Title</label>\n                                    {/* <input name=\"text\" className=\"form-control\" placeholder=\"Enter Text\" autoComplete=\"off\" value={name} onInput={e => this.handleChange(e, 'name')} /> */}\n                                    <textarea name=\"text\" id='title-input' className=\"form-control\" placeholder=\"Enter Text\" autoComplete=\"off\" value={name} onInput={e => this.handleChange(e, 'name')}></textarea>\n                                </div>\n                            </div>\n                            <div className=\"col-6\">\n                                <div className=\"form-group\">\n                                    <label>Shape</label>\n                                    <CustomSelect items={this.props.shapesList} value={type} chageValue={e => this.changeNode(e, 'type')} />\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"form-group\">\n                            <TextEditor description={description ? description : ''} changeDescription={(desc) => this.changeDescription(desc)} />\n                        </div>\n                        <div className=\"from-group\">\n                            <Dropzone onDrop={acceptedFiles => this.uploadImage(acceptedFiles, 'photos')}>\n                                {({ getRootProps, getInputProps }) => (\n                                    <section className=\"dropzone\">\n                                        <div {...getRootProps()}>\n                                            <input {...getInputProps()} accept=\"image/*\" />\n                                            <p>Drag 'n' drop some images here, or click to select images</p>\n                                        </div>\n                                    </section>\n                                )}\n                            </Dropzone>\n                        </div>\n                        <div className=\"form-group\">\n                            <label>Attachments</label>\n                            <input type=\"file\" accept=\".pdf, .docx, .doc\" className=\"d-block\" onChange={e => this.handleFile(e, 'attachment')} />\n                        </div>\n                        <div className=\"text-right\">\n                            <button className=\"btn btn-secondary\" onMouseDown={(e) => { if (e.button === 0) this.closePopup() }}>\n                                <i className=\"icon-close\"></i>\n                                &nbsp; Cancel\n                            </button>\n                            <button className=\"btn btn-primary ml-2\" onMouseDown={(e) => { if (e.button === 0) this.saveChanges() }}>\n                                <i className=\"icon-check1\"></i>\n                                &nbsp; Save\n                            </button>\n                        </div>\n                    </div>\n                </div >\n            );\n        } else {\n            return null\n        }\n    }\n}\n\nexport default EditorPopup;\n","import { Component } from \"react\";\n\nexport default class CustomSelect extends Component {\n    dropdownSelected = (val) => {\n        this.props.chageValue(val);\n    }\n    render() {\n        return (\n            <div class=\"dropdown\">\n                <div class=\"form-control dropdown-toggle\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                    {this.props.value ?? 'Select Shape'}\n                </div>\n                <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\" style={{ height: 300, overflowY: 'scroll' }}>\n                    {/* <select name=\"type\" className=\"form-control\" value={type} onChange={e => this.handleChange(e, 'type')}> */}\n                    {\n                        this.props.items.map(s => {\n                            console.log('shape', s);\n                            let w = 30,\n                                h = 18;\n                            return (\n                                <div class=\"dropdown-item\" onClick={() => this.dropdownSelected(s.shape_key)}>\n                                    <span>\n                                        <svg width={w} height={h} viewBox=\"0 0 30 18\">\n                                            {\n                                                s.shape.map(function (shapeJSON, s_index) {\n                                                    let ShapeTag = shapeJSON.tag;\n\n                                                    let shape_attr = shapeJSON.attributes, filtered_value = \"\", s_attr = {};\n\n                                                    for (let index in shape_attr) {\n                                                        filtered_value = shape_attr[index].toString();\n                                                        filtered_value = filtered_value\n                                                            .replace(/\\[w\\]/gi, w - 4)\n                                                            .replace(/\\[h\\]/gi, h - 4)\n                                                            .replace(/\\[x\\]/gi, 1)\n                                                            .replace(/\\[y\\]/gi, 1)\n                                                            // Math calculation\n                                                            .replace(/{(.*?)}/gi, function (r) {\n                                                                let res_string = r.replace(/{(.*?)}/gi, \"\\$1\");\n                                                                return eval(res_string)\n                                                            });\n\n                                                        s_attr[index] = filtered_value;\n                                                    }\n                                                    return (\n                                                        <g key={s_index}>\n                                                            <ShapeTag\n                                                                width={w - 4}\n                                                                height={h - 4}\n                                                                {...s_attr}\n                                                                x=\"1\"\n                                                                y=\"1\"\n                                                                stroke=\"#000\"\n                                                                strokeWidth={2}\n                                                                fill=\"#ffffff\"\n                                                                key={s_index}\n                                                                strokeDasharray={s.shape_key === 'text' ? '5 5' : '0 0'}\n                                                            ></ShapeTag>\n                                                            <text\n                                                                x={w / 2}\n                                                                y={h / 2}\n                                                                textAnchor=\"middle\"\n                                                                alignmentBaseline=\"middle\"\n                                                            >{s.shape_key === 'text' ? 'Text' : null}</text>\n                                                        </g>\n                                                    );\n                                                })\n                                            }\n                                        </svg>\n                                    </span>\n                                    &nbsp; {s.shape_key}\n                                </div>\n                            )\n                        })\n                    }\n                </div>\n            </div >\n        );\n    }\n}","import React, { Component } from \"react\";\n\nexport default class ShapePopup extends Component {\n    render() {\n        let { shapes, showShapePopup } = this.props;\n        if (showShapePopup) {\n            let { x, y } = showShapePopup;\n            return (\n                <div className=\"shape-dropdown\" style={{ top: y, left: x }}>\n                    {\n                        shapes.map((s, s_i) => {\n                            let w = 40,\n                                h = 25;\n\n                            return (\n                                <div className=\"shape-list\" key={s_i}>\n                                    <div onClick={() => this.props.selectShape(s.shape_key)}>\n                                        <svg width={w} height={h} viewBox=\"0 0 40 25\">\n                                            {\n                                                s.shape.map(function (shapeJSON, s_index) {\n                                                    let ShapeTag = shapeJSON.tag;\n\n                                                    let shape_attr = shapeJSON.attributes, filtered_value = \"\", s_attr = {};\n\n                                                    for (let index in shape_attr) {\n                                                        filtered_value = shape_attr[index].toString();\n                                                        filtered_value = filtered_value\n                                                            .replace(/\\[w\\]/gi, w - 4)\n                                                            .replace(/\\[h\\]/gi, h - 4)\n                                                            .replace(/\\[x\\]/gi, 1)\n                                                            .replace(/\\[y\\]/gi, 1)\n                                                            // Math calculation\n                                                            .replace(/{(.*?)}/gi, function (r) {\n                                                                let res_string = r.replace(/{(.*?)}/gi, \"\\$1\");\n                                                                return eval(res_string)\n                                                            });\n\n                                                        s_attr[index] = filtered_value;\n                                                    }\n                                                    return (\n                                                        <g key={s_index}>\n                                                            <ShapeTag\n                                                                width={w - 4}\n                                                                height={h - 4}\n                                                                {...s_attr}\n                                                                x=\"1\"\n                                                                y=\"1\"\n                                                                stroke=\"#000\"\n                                                                strokeWidth={2}\n                                                                fill=\"#ffffff\"\n                                                                key={s_index}\n                                                                strokeDasharray={s.shape_key === 'text' ? '5 5' : '0 0'}\n                                                            ></ShapeTag>\n                                                            <text\n                                                                x={w / 2}\n                                                                y={h / 2}\n                                                                textAnchor=\"middle\"\n                                                                alignmentBaseline=\"middle\"\n                                                            >{s.shape_key === 'text' ? 'Text' : null}</text>\n                                                        </g>\n                                                    );\n                                                })\n                                            }\n                                        </svg>\n                                        {s.shape_key}\n                                    </div>\n                                </div>\n                            );\n                        })\n                    }\n                </div>\n            );\n        } else {\n            return (<></>);\n        }\n    }\n}\n","import { Component, useState } from \"react\";\nimport Dropzone from \"react-dropzone\";\nimport useSpeechToText from 'react-hook-speech-to-text';\n\nimport { Editor } from \"@tinymce/tinymce-react\";\nimport { uploadMediaFile } from \"../Api/file.api\";\n\nimport swal from \"sweetalert\";\n\nconst TextEditor = ({ description, changeDescription }) => {\n    let [editorSel, setEditorSel] = useState(null);\n\n    let [speech, setSpeech] = useState(null);\n    let [speechCount, setSpeechCount] = useState(0);\n\n    const {\n        isRecording,\n        results,\n        startSpeechToText,\n        stopSpeechToText\n    } = useSpeechToText({\n        continuous: true,\n        // timeout: 10000,\n        speechRecognitionProperties: {\n            // lang: 'es-ES',\n            interimResults: true\n        },\n        onStoppedSpeaking: (res) => {\n            console.log('on stop: ', res);\n        }\n    });\n\n    if (results.length !== speechCount) {\n        setSpeech(results[results.length - 1]);\n        setSpeechCount(results.length);\n    }\n\n\n    // if(speech) changeDescription(speech + ' ');\n\n    setTimeout(() => {\n        editorSel && speech && editorSel.insertContent(speech + ' ');\n        setSpeech(null);\n    }, 1);\n\n    return <>\n        <div className=\"float-right\">\n            <span className=\"d-inline-block mr-2\">{isRecording ? 'Listening...' : 'Click to Speak'}</span>\n            <button className={isRecording ? \"speak-btn listening\" : \"speak-btn\"} onClick={isRecording ? stopSpeechToText : startSpeechToText}>\n                <i className=\"icon-mic\"></i>\n            </button>\n        </div>\n        <label>\n            Description\n        </label>\n        <Editor\n            onInit={(evt, editor) => {\n                setEditorSel(editor)\n            }}\n            value={description}\n            init={{\n                height: 300,\n                menubar: false,\n                branding: false,\n                plugins: [\n                    'advlist autolink lists link image charmap print preview anchor',\n                    'searchreplace visualblocks code fullscreen',\n                    'insertdatetime media table paste code help wordcount'\n                ],\n                toolbar: 'undo redo | ' +\n                    'bold italic underline | backcolor forecolor | alignleft aligncenter ' +\n                    'alignright alignjustify | help speechButton',\n                content_style: 'body { font-family:Helvetica,Arial,sans-serif; font-size:14px }'\n            }}\n            onEditorChange={newText => changeDescription(newText)}\n        />\n    </>\n}\n\nclass TextEditorPopup extends Component {\n    state = {\n        fields: null,\n        changes: false\n    }\n    constructor(props) {\n        super(props);\n        if (props.showTextEditorPopup && props.showTextEditorPopup.node) {\n            this.state = {\n                fields: { ...props.showTextEditorPopup.node }\n            }\n            console.log('fileds', this.state.fields);\n        }\n    }\n    changeDescription = description => {\n        let fields = this.state.fields;\n        fields.description = description;\n\n        this.setState({ fields, changes: true });\n    }\n    handleChange(e, field) {\n        this.changeNode(e.target.value, field);\n    }\n    changeNode = (val, field) => {\n        let fields = this.state.fields;\n        fields[field] = val;\n        this.setState({ fields, changes: true });\n    }\n    handleFile = async (e, field) => {\n        let file = e.target.files[0];\n        let response = await uploadMediaFile(file);\n\n        if (response.success) this.changeNode(response.data.url.Location, field);\n    }\n    uploadImage = async (file, field) => {\n        let response = await uploadMediaFile(file[0]);\n\n        if (response.success) this.changeNode(response.data.url.Location, field);\n    }\n    saveChanges() {\n        this.props.onSave(this.state.fields, this.props.showTextEditorPopup.index);\n        this.closePopup();\n    }\n    closePopup() {\n        this.props.closeTextEditorPopup()\n    }\n    componentDidMount() {\n        this.props.setStateValue({\n            focused: false\n        });\n    }\n    render() {\n        let self = this\n        if (this.state.fields) {\n            let { name, type, description } = this.state.fields\n\n            return (\n                <>\n                    <div className=\"editorPopup\">\n                        <div className=\"editorBody\">\n                            <div className=\"row\">\n                                <div className=\"col-12\">\n                                    <div className=\"form-group\">\n                                        <label>Title</label>\n                                        {/* <input name=\"text\" className=\"form-control\" placeholder=\"Enter Text\" autoComplete=\"off\" value={name} onInput={e => this.handleChange(e, 'name')} /> */}\n                                        <textarea name=\"text\" className=\"form-control\" placeholder=\"Enter Text\" autoComplete=\"off\" value={name} onInput={e => this.handleChange(e, 'name')}></textarea>\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"text-right\">\n                                <button className=\"btn btn-secondary\" onMouseDown={(e) => { if (e.button === 0) this.closePopup() }}>\n                                    <i className=\"icon-close\"></i>\n                                    &nbsp; Cancel\n                                </button>\n                                <button className=\"btn btn-primary ml-2\" onMouseDown={(e) => { if (e.button === 0) this.saveChanges() }}>\n                                    <i className=\"icon-check1\"></i>\n                                    &nbsp; Save\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </>\n            );\n        } else {\n            return null\n        }\n    }\n}\n\nexport default TextEditorPopup;\n","import { Component } from \"react\";\n\nclass ContextMultiSelectMenu extends Component {\n    handleGoTo(e, side) {\n        if (e.button === 0) {\n            this.props.onGoTo(side);\n        }\n    }\n    render() {\n        if (this.props.showContextMultiSelectMenu.x && this.props.showContextMultiSelectMenu.y) {\n            return (\n                <ul className=\"context-menu\" style={{ left: this.props.showContextMultiSelectMenu.x + 'px', top: this.props.showContextMultiSelectMenu.y + 'px', }}>\n                    <li onMouseDown={(e) => this.handleGoTo(e, 'front')}>Go to Front</li>\n                    <li onMouseDown={(e) => this.handleGoTo(e, 'back')}>Go to Back</li>\n                    <li onMouseDown={(e) => this.handleGoTo(e, 'delete')}>Delete</li>\n                    <li onMouseDown={(e) => this.handleGoTo(e, 'copy')}>Copy</li>\n                </ul>\n            );\n        } else {\n            return null\n        }\n    }\n}\n\nexport default ContextMultiSelectMenu;\n","import { Component } from \"react\";\n\nclass SelectionMenu extends Component {\n    handleGoTo(e, side, index) {\n        if (e.button === 0) {\n            this.props.onGoTo(side, index);\n        }\n    }\n    render() {\n        if (this.props.showContextMenu.x && this.props.showContextMenu.y) {\n            return (\n                <ul className=\"context-menu\" style={{ left: this.props.showContextMenu.x + 'px', top: this.props.showContextMenu.y + 'px', }}>\n                    <li onMouseDown={(e) => this.handleGoTo(e, 'front', this.props.showContextMenu.index)}>Go to Front</li>\n                    <li onMouseDown={(e) => this.handleGoTo(e, 'back', this.props.showContextMenu.index)}>Go to Back</li>\n                    <li onMouseDown={(e) => this.handleGoTo(e, 'delete', this.props.showContextMenu.index)}>Delete</li>\n                    <li onMouseDown={(e) => this.handleGoTo(e, 'copy', this.props.showContextMenu.index)}>Copy</li>\n                </ul>\n            );\n        } else {\n            return null\n        }\n    }\n}\n\nexport default SelectionMenu;\n","import React, { Component } from \"react\";\nimport { Link } from 'react-router-dom';\nimport { addUpdateChartAccess, getChartAccess } from \"../../Api/chart.api\";\nimport swal from \"sweetalert\";\nimport Avatar from 'react-avatar';\n\nexport default class CanvasHeader extends Component {\n    state = {\n        share: {\n            email: '',\n            access_type: ''\n        },\n        chartAccess: null\n    }\n    saveTemplate = () => {\n        // console.log('save templete', this.props);\n        this.props.saveTemplate();\n    }\n    exportJson() {\n        this.props.setStateValue({ focused: false });\n        let fname = this.props.chart_name;\n        fname = fname.replace(\" \", \"_\");\n        console.log('fname', fname);\n        let filename;\n        if (fname != '') {\n            filename = fname + \".wfs\";\n        } else {\n            filename = \"workflowsim.wfs\";\n        }\n        let text = JSON.stringify(this.props.nodes, null, 2);\n\n        var element = document.createElement(\"a\");\n        element.setAttribute(\n            \"href\",\n            \"data:text/plain;charset=utf-8,\" + encodeURIComponent(text)\n        );\n        element.setAttribute(\"download\", filename);\n\n        element.style.display = \"none\";\n        document.body.appendChild(element);\n\n        element.click();\n\n        document.body.removeChild(element);\n    }\n    svgString2Image(svgString, width, height, format, callback) {\n        // set default for format parameter\n        format = format ? format : \"png\";\n        // SVG data URL from SVG string\n        var svgData =\n            \"data:image/svg+xml;base64,\" +\n            btoa(unescape(encodeURIComponent(svgString)));\n        // create canvas in memory(not in DOM)\n        var canvas = document.createElement(\"canvas\");\n        // get canvas context for drawing on canvas\n        var context = canvas.getContext(\"2d\");\n        // set canvas size\n        canvas.width = width;\n        canvas.height = height;\n        // create image in memory(not in DOM)\n        var image = new Image();\n        // later when image loads run this\n        image.onload = function () {\n            // async (happens later)\n            // clear canvas\n            context.clearRect(0, 0, width, height);\n            // draw image with SVG data to canvas\n            context.drawImage(image, 0, 0, width, height);\n            // snapshot canvas as png\n            var pngData = canvas.toDataURL(\"image/\" + format);\n            // pass png data URL to callback\n            callback(pngData);\n        }; // end async\n        // start loading SVG data into in memory image\n        image.src = svgData;\n    }\n    exportImage() {\n        let self = this;\n        this.props.setStateValue({ focused: false });\n\n        setTimeout(() => {\n\n            let fname = this.props.chart_name;\n            fname = fname.replace(\" \", \"_\");\n            console.log('fname', fname);\n            let filename;\n            if (fname != '') {\n                filename = fname + \".png\";\n            } else {\n                filename = \"workflowsim.png\";\n            }\n\n            var svg = document.querySelector(\"#chart svg\");\n            var xml = new XMLSerializer().serializeToString(svg);\n\n            self.svgString2Image(xml, 800, 600, \"png\", (image64) => {\n                var element = document.createElement(\"a\");\n                element.setAttribute(\"href\", image64);\n                element.setAttribute(\"download\", filename);\n\n                element.style.display = \"none\";\n                document.body.appendChild(element);\n\n                element.click();\n\n                document.body.removeChild(element);\n            });\n        }, 10);\n\n    }\n    getChartAccess = async () => {\n        let { chart } = this.props.state;\n        let response = await getChartAccess(chart.chart_id);\n        this.setState({\n            chartAccess: response.data\n        });\n        console.log('access response: ', response);\n    }\n    handleInput = (e, type) => {\n        let share = this.state.share;\n        share[type] = e.target.value;\n\n        this.setState({ share });\n    }\n    changeAccess = async (e, index) => {\n        let chartAccess = this.state.chartAccess;\n        chartAccess.shared_users[index].access_type = e.target.value;\n\n        this.setState({ chartAccess });\n\n        var data = {\n            \"email\": chartAccess.shared_users[index].email,\n            \"chart_id\": chartAccess.shared_users[index].chart_id,\n            \"access_type\": e.target.value,\n            \"is_active\": true,\n            \"chart_access_id\": chartAccess.shared_users[index].chart_access_id\n        }\n        let response = await addUpdateChartAccess(data);\n\n        console.log('edited access: ', response);\n    }\n    accessChart = async e => {\n        e.preventDefault();\n        var { email, access_type } = this.state.share\n        let { chart } = this.props.state;\n        var data = {\n            \"email\": email,\n            \"chart_id\": chart.chart_id,\n            \"access_type\": access_type,\n            \"is_active\": true,\n            \"chart_access_id\": null\n        }\n        let response = await addUpdateChartAccess(data);\n        this.setState({\n            share: {\n                email: '',\n                access_type: ''\n            }\n        });\n        this.getChartAccess();\n        if (response.success) {\n            swal(\"Success!\", \"You've successfully shared your chart.\", \"success\");\n        } else {\n            swal(\"Warning!\", \"Some propblems occurs.\", \"warning\");\n        }\n\n        // console.log(response);\n    }\n    closeSharePopup() {\n        document.querySelector('.share-popup-container').classList.remove('active');\n    }\n    componentDidMount() {\n        document.querySelector('.share-btn')\n            .addEventListener(\"click\", function (e) {\n                e.preventDefault();\n                document.querySelector('.share-popup-container').classList.add('active');\n            });\n\n        document.querySelector('.share-popup-container .close-btn')\n            .addEventListener(\"click\", e => {\n                console.log('closing popup');\n                e.preventDefault();\n                this.closeSharePopup()\n            })\n\n        document.querySelector('.share-popup-container .share-popup-bg')\n            .addEventListener(\"click\", e => {\n                console.log('closing popup');\n                e.preventDefault();\n                this.closeSharePopup()\n            })\n\n        this.getChartAccess()\n    }\n    render() {\n        let { email, access_type } = this.state.share\n        let userString = localStorage.getItem('user');\n        let user = JSON.parse(userString);\n        return (\n            <div className=\"canvas-header\">\n                <Link to=\"/\" className=\"file-icon\">\n                    <i className=\"icon-folder\"></i>\n                </Link>\n                <div>\n                    <input type=\"text\" value={this.props.chart_name} className=\"canvas-title\" onInput={e => this.props.updateChartName(e.target.value)} onClick={() => this.props.setStateValue({ focused: null })} />\n                    <ul className=\"menu\">\n                        <li className=\"dropdown\">\n                            <Link to=\"#\" data-toggle=\"dropdown\">File</Link>\n                            <div className=\"dropdown-menu\">\n                                {/* <Link className=\"dropdown-item\" to=\"#\">Import</Link> */}\n                                <button className=\"dropdown-item\" onClick={() => this.saveTemplate()}>Save As Template</button>\n                                <button className=\"dropdown-item\" onClick={() => this.exportJson()}>Export</button>\n                                <button className=\"dropdown-item\" onClick={() => this.exportImage()}>Download Image</button>\n                            </div>\n                        </li>\n                        <li>\n                            <Link to=\"#\">Edit</Link>\n                        </li>\n                        <li>\n                            <Link to=\"#\">Select</Link>\n                        </li>\n                        <li>\n                            <Link to=\"#\">View</Link>\n                        </li>\n                        <li>\n                            <Link to=\"#\">Insert</Link>\n                        </li>\n                        <li>\n                            <Link to=\"#\">Arrange</Link>\n                        </li>\n                        <li>\n                            <Link to=\"#\">Help</Link>\n                        </li>\n                        <li>\n                            {\n                                this.props.state.save_status ?\n                                    <Link to=\"#\"><i className=\"icon-clock\"></i> Saving...</Link>\n                                    :\n                                    <Link to=\"#\"><i className=\"icon-clock\"></i> Saved</Link>\n                            }\n                        </li>\n                    </ul>\n                </div>\n                <div className=\"ml-auto d-flex align-items-center\">\n                    <div className=\"flex-end mr-2\">\n                        <button className=\"btn btn-primary share-btn\" type=\"button\"><i className=\"icon-users2\"></i> Share</button>\n                    </div>\n                    <div className=\"flex-end\">\n                        <div className=\"dropdown\">\n\n                            <div data-toggle=\"dropdown\" style={{ cursor: \"pointer\" }} className=\"dropdown-toggle rounded-circle\">\n                                {/* <ConfigProvider colors={['red', 'green', 'blue']}> */}\n                                <Avatar name={user ? user.name : ''} size={36} className=\" rounded-circle\" />\n                                {/* </ConfigProvider> */}\n                            </div>\n                            {/* <img\n                                src={'/profile.jpg'}\n                                data-toggle=\"dropdown\"\n                                style={{ width: \"36px\", cursor: \"pointer\" }}\n                                alt=\"profile image\"\n                                className=\"dropdown-toggle rounded-circle\"\n                            /> */}\n                            <ul className=\"dropdown-menu dropdown-menu-right\">\n                                <li>\n                                    <div className=\"dropdown-item text-primary\">\n                                        Hi, {user ? user.name : ''}<br />\n                                        <small>({user ? user.email : ''})</small>\n                                    </div>\n                                </li>\n                                <li><Link className=\"dropdown-item\" to=\"#\">Account Setting</Link></li>\n                                <li><a className=\"dropdown-item\" style={{ cursor: \"pointer\" }} onClick={() => this.props.onLogout()}>Logout</a></li>\n                            </ul>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"share-popup-container\">\n                    <div className=\"share-popup-bg\"></div>\n                    <div className=\"share-popup\">\n                        <div className=\"card\">\n                            <div className=\"card-header\">\n                                <button className=\"close close-btn\" title=\"Close\">&times;</button>\n                                Share\n                            </div>\n                            <div className=\"card-body\">\n                                <form action=\"\" method=\"post\" className=\"d-flex form-group\" onSubmit={this.accessChart}>\n                                    <div className=\"\">\n                                        <div className=\"d-flex input-custom-group\">\n                                            <input type=\"email\" name=\"email\" className=\"form-control\" placeholder=\"Enter email address\" value={email} autoComplete=\"off\" onInput={e => this.handleInput(e, 'email')} />\n                                            <select value={access_type} onInput={e => this.handleInput(e, 'access_type')}>\n                                                <option value=\"VIEW\">can view</option>\n                                                <option value=\"EDIT\">can edit</option>\n                                            </select>\n                                        </div>\n                                    </div>\n                                    <div className=\"ml-2\">\n                                        <button type=\"submit\" className=\"btn btn-block btn-primary\">Share</button>\n                                    </div>\n                                </form>\n                                {\n                                    this.state.chartAccess\n                                        ? <ul className=\"shared-users\">\n                                            <li className=\"heading\">\n                                                Shared Users\n                                            </li>\n                                            <li>\n                                                <div className=\"flex-fill\">\n                                                    <div>{this.state.chartAccess.created_user.name}</div>\n                                                    <div>{this.state.chartAccess.created_user.email}</div>\n                                                </div>\n                                                <div>\n                                                    ADMIN\n                                                </div>\n                                            </li>\n                                            {\n                                                this.state.chartAccess.shared_users\n                                                && this.state.chartAccess.shared_users.length\n                                                && this.state.chartAccess.shared_users.map((row, index) => {\n                                                    return (\n                                                        <li key={index}>\n                                                            <div className=\"flex-fill\">\n                                                                <div>{row.name}</div>\n                                                                <div>{row.email}</div>\n                                                            </div>\n                                                            <div>\n                                                                <select value={row.access_type} onInput={e => this.changeAccess(e, index)}>\n                                                                    <option value=\"VIEW\">can view</option>\n                                                                    <option value=\"EDIT\">can edit</option>\n                                                                </select>\n                                                            </div>\n                                                        </li>\n                                                    );\n                                                })\n                                            }\n                                        </ul>\n                                        : <></>\n                                }\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\n\nexport default class CanvasMenu extends Component {\n\n    saveUndoProcess = (params, delete_redo = true) => {\n        let state = this.props.state;\n        let undo_process = state.undo_process ?? [];\n        undo_process.push(params);\n\n        this.props.setStateValue({ undo_process });\n\n        if (delete_redo) {\n            this.props.setStateValue({ redo_process: [] });\n        }\n    }\n    saveRedoProcess = params => {\n        let state = this.props.state;\n        let redo_process = state.redo_process;\n        redo_process.push(params);\n\n        this.props.setStateValue({ redo_process });\n    }\n\n    doUndo = () => {\n        let state = this.props.state;\n        let undo_process = [...state.undo_process];\n        let nodes = state.nodes;\n\n        if (undo_process && undo_process.length) {\n            this.saveRedoProcess(nodes);\n            let last = undo_process[undo_process.length - 1];\n\n            switch (last.action) {\n                case 'add-shape':\n                    this.saveRedoProcess({\n                        action: 'remove-shape',\n                        index: nodes.shapes.length,\n                        data: last.data,\n                        connectors: last.connectors\n                    });\n                    nodes.shapes.push(last.data);\n                    nodes.connector = last.connectors;\n                    break;\n\n                case 'remove-shape':\n                    this.saveRedoProcess({\n                        action: 'add-shape',\n                        index: last.index,\n                        data: last.data\n                    });\n\n                    nodes.shapes.splice(last.index, 1);\n\n                    break;\n\n                case 'add-connector':\n                    this.saveRedoProcess({\n                        action: 'remove-connector',\n                        index: last.index,\n                        connector: [...nodes.connector]\n                    }, false);\n\n                    nodes.connector = last.connector;\n                    break;\n\n                case 'remove-connector':\n                    this.saveRedoProcess({\n                        action: 'add-connector',\n                        index: last.index,\n                        connector: [...nodes.connector]\n                    }, false);\n\n                    nodes.connector.splice(last.index, 1);\n                    break;\n\n                case 'resize-shape':\n                    this.saveRedoProcess({\n                        action: 'resize-shape',\n                        index: last.index,\n                        data: { ...nodes.shapes[last.index] },\n                        connectors: last.connectors\n                    });\n\n                    nodes.shapes[last.index] = last.data;\n                    break;\n\n                case 'move-shape':\n                    this.saveRedoProcess({\n                        action: 'move-shape',\n                        index: last.index,\n                        data: { ...nodes.shapes[last.index] },\n                        connector: [...nodes.connector],\n                    });\n\n                    nodes.shapes[last.index] = last.data;\n                    nodes.connector = last.connector;\n                    break;\n\n                case 'move-connector':\n                    console.log('Undo move-connector');\n                    console.log('Undo move-connector', last.index);\n                    console.log('Undo move-connector', [...nodes.connector]);\n                    this.saveRedoProcess({\n                        action: 'move-connector',\n                        index: last.index,\n                        connector: [...nodes.connector],\n                    });\n\n                    nodes.connector = last.connector;\n                    break;\n\n\n                default:\n                    break;\n            }\n\n            undo_process.splice(undo_process.length - 1, 1)\n        }\n\n        console.log('undo process: ', undo_process);\n\n        this.props.setStateValue({ undo_process, nodes });\n    }\n    doRedo = () => {\n        let state = this.props.state;\n        let redo_process = state.redo_process;\n        let nodes = state.nodes;\n\n        if (redo_process && redo_process.length) {\n            let last = redo_process[redo_process.length - 1];\n\n            this.saveUndoProcess(nodes, false);\n\n            this.props.setStateValue({ nodes: last });\n\n            switch (last.action) {\n                case 'add-shape':\n                    nodes.shapes.push(last.data);\n                    this.saveUndoProcess({\n                        action: 'remove-shape',\n                        index: last.index,\n                        data: last.data\n                    }, false);\n                    break;\n\n                case 'remove-shape':\n                    this.saveUndoProcess({\n                        action: 'add-shape',\n                        index: last.index,\n                        data: last.data\n                    });\n\n                    nodes.shapes.splice(last.index, 1);\n\n                    break;\n\n                case 'add-connector':\n                    this.saveUndoProcess({\n                        action: 'remove-connector',\n                        index: last.index,\n                        connector: [...nodes.connector]\n                    }, false);\n\n                    nodes.connector = last.connector;\n                    break;\n\n                case 'remove-connector':\n                    this.saveUndoProcess({\n                        action: 'add-connector',\n                        index: last.index,\n                        connector: [...nodes.connector]\n                    }, false);\n\n                    nodes.connector.splice(last.index, 1);\n                    break;\n\n                case 'resize-shape':\n                    this.saveUndoProcess({\n                        action: 'resize-shape',\n                        index: last.index,\n                        data: { ...nodes.shapes[last.index] }\n                    });\n                    console.log('last.data', last.data);\n\n                    nodes.shapes[last.index] = last.data;\n                    break;\n\n                case 'move-shape':\n                    this.saveUndoProcess({\n                        action: 'move-shape',\n                        index: last.index,\n                        data: { ...nodes.shapes[last.index] },\n                        connector: [...nodes.connector],\n                    });\n\n                    nodes.shapes[last.index] = last.data;\n                    nodes.connector = last.connector;\n                    // nodes.connector.push(last.connector);\n                    break;\n\n                case 'move-connector':\n                    console.log('redo move-connector');\n                    console.log('redo move-connector', last.index);\n                    console.log('redo move-connector', [...nodes.connector]);\n                    this.saveUndoProcess({\n                        action: 'move-connector',\n                        index: last.index,\n                        connector: [...nodes.connector],\n                    });\n\n                    nodes.connector = last.connector;\n                    break;\n\n                default:\n                    break;\n            }\n\n            redo_process.splice(-1, 1);\n        }\n\n        console.log('redo process: ', redo_process);\n\n        this.props.setStateValue({ redo_process, nodes });\n    }\n\n    toggleDropdown = name => {\n        let state = this.props.state\n        if (state.dropdownOpen && state.dropdownOpen === name) {\n            this.props.setStateValue({ dropdownOpen: null });\n        } else {\n            this.props.setStateValue({ dropdownOpen: name });\n        }\n    }\n\n    selectArrow = (arrow) => {\n        let state = this.props.state\n        this.props.setStateValue({\n            activeArrow: arrow,\n            dropdownOpen: null\n        });\n\n        if (state.connectorFocused) {\n            let nodes = state.nodes\n            nodes.connector[state.connectorFocused.index].arrow = arrow;\n            this.props.setStateValue({ nodes })\n        }\n    }\n\n    changeShapeHandler = (e, key) => {\n        let state = this.props.state;\n        if (state.focused) {\n            let nodes = state.nodes;\n            nodes.shapes[state.focused.index][key] = e.target.value;\n            this.props.setStateValue({ nodes: nodes })\n        }\n    }\n\n    selectBorderType = (dasharray) => {\n        let state = this.props.state\n        this.props.setStateValue({\n            activeDashArray: dasharray,\n            dropdownOpen: null\n        });\n        let nodes = state.nodes\n        if (state.connectorFocused) {\n            nodes.connector[state.connectorFocused.index].dasharray = dasharray;\n            this.setState({ nodes })\n        }\n        if (state.focused) {\n            nodes.shapes[state.focused.index].dasharray = dasharray;\n            this.setState({ nodes })\n        }\n    }\n    render() {\n        let state = this.props.state\n        return (\n            <div className=\"canvas-menu\">\n                <div className=\"menu-block border-right\">\n                    <button type=\"button\" disabled={!state?.undo_process?.length} onClick={() => this.doUndo()}>\n                        <i className=\"icon-undo2\"></i>\n                    </button>\n                    <button type=\"button\" disabled={!state?.redo_process?.length} onClick={() => this.doRedo()}>\n                        <i className=\"icon-redo2\"></i>\n                    </button>\n                </div>\n                <div className=\"menu-block flex-fill\">\n                    <label htmlFor=\"fillColorSelector\" className=\"mr-2\">\n                        <span type=\"button\">\n                            <i className=\"icon-format_color_fill\"></i>\n                        </span>\n                        <input type=\"color\" className=\"d-none\" id=\"fillColorSelector\" onChange={(e) => this.changeShapeHandler(e, 'fill')} />\n                    </label>\n                    <label htmlFor=\"strokeColorSelector\" className=\"mr-2\">\n                        <span type=\"button\">\n                            <i className=\"icon-border_color\"></i>\n                        </span>\n                        <input type=\"color\" className=\"d-none\" id=\"strokeColorSelector\" onChange={(e) => this.changeShapeHandler(e, 'stroke')} />\n                    </label>\n                    <select id=\"strokeWidthSelector\" onChange={(e) => this.changeShapeHandler(e, 'strokeWidth')}>\n                        {(function (rows, i, len) {\n                            while (++i <= len) {\n                                rows.push(<option value={i} key={i}>{i}px</option>);\n                            }\n                            return rows;\n                        })([], 0, 50)}\n                    </select>\n                    <label className=\"custom-selectbox\">\n                        <div className=\"box-container\" onClick={() => this.toggleDropdown('line-dropdown')}>\n                            <svg viewBox=\"0 0 64 32\" width=\"80\" height=\"24\">\n                                <path d=\"M1 16 L63 16\" stroke=\"#000\" strokeWidth=\"2\" strokeDasharray={state.activeDashArray} />\n                            </svg>\n                        </div>\n\n                        <div className={state.dropdownOpen === \"line-dropdown\" ? \"custom-selectbox-content shown\" : \"custom-selectbox-content\"}>\n                            <div className=\"custom-selectbox-dropdown\">\n                                <div className=\"svg-line-box\" onClick={() => this.selectBorderType('0,0')}>\n                                    <svg viewBox=\"0 0 64 32\" width=\"80\" height=\"24\">\n                                        <path d=\"M1 16 L63 16\" stroke=\"#000\" strokeWidth=\"2\" strokeDasharray=\"0,0\" />\n                                    </svg>\n                                </div>\n                                <div className=\"svg-line-box\" onClick={() => this.selectBorderType('5,5')}>\n                                    <svg viewBox=\"0 0 64 32\" width=\"80\" height=\"24\">\n                                        <path d=\"M1 16 L63 16\" stroke=\"#000\" strokeWidth=\"2\" strokeDasharray=\"5,5\" />\n                                    </svg>\n                                </div>\n                                <div className=\"svg-line-box\" onClick={() => this.selectBorderType('5,7,15,7,15,7')}>\n                                    <svg viewBox=\"0 0 64 32\" width=\"80\" height=\"24\">\n                                        <path d=\"M1 16 L63 16\" stroke=\"#000\" strokeWidth=\"2\" strokeDasharray=\"5,7,15,7,15,7\" />\n                                    </svg>\n                                </div>\n                                <div className=\"svg-line-box\" onClick={() => this.selectBorderType('23,15')}>\n                                    <svg viewBox=\"0 0 64 32\" width=\"80\" height=\"24\">\n                                        <path d=\"M1 16 L63 16\" stroke=\"#000\" strokeWidth=\"2\" strokeDasharray=\"23,15\" />\n                                    </svg>\n                                </div>\n                                <div className=\"svg-line-box\" onClick={() => this.selectBorderType('5,8,2,8,15,8,2,8')}>\n                                    <svg viewBox=\"0 0 64 32\" width=\"80\" height=\"24\">\n                                        <path d=\"M1 16 L63 16\" stroke=\"#000\" strokeWidth=\"2\" strokeDasharray=\"5,8,2,8,15,8,2,8\" />\n                                    </svg>\n                                </div>\n                                <div className=\"svg-line-box\" onClick={() => this.selectBorderType('15,9,2,9,2,9')}>\n                                    <svg viewBox=\"0 0 64 32\" width=\"80\" height=\"24\">\n                                        <path d=\"M1 16 L63 16\" stroke=\"#000\" strokeWidth=\"2\" strokeDasharray=\"15,9,2,9,2,9\" />\n                                    </svg>\n                                </div>\n                                <div className=\"svg-line-box\" onClick={() => this.selectBorderType('10,8,25,8')}>\n                                    <svg viewBox=\"0 0 64 32\" width=\"80\" height=\"24\">\n                                        <path d=\"M1 16 L63 16\" stroke=\"#000\" strokeWidth=\"2\" strokeDasharray=\"10,8,25,8\" />\n                                    </svg>\n                                </div>\n                                <div className=\"svg-line-box\" onClick={() => this.selectBorderType('2,5')}>\n                                    <svg viewBox=\"0 0 64 32\" width=\"80\" height=\"24\">\n                                        <path d=\"M1 16 L63 16\" stroke=\"#000\" strokeWidth=\"2\" strokeDasharray=\"2,5\" />\n                                    </svg>\n                                </div>\n                                <div className=\"svg-line-box\" onClick={() => this.selectBorderType('2,15')}>\n                                    <svg viewBox=\"0 0 64 32\" width=\"80\" height=\"24\">\n                                        <path d=\"M1 16 L63 16\" stroke=\"#000\" strokeWidth=\"2\" strokeDasharray=\"2,15\" />\n                                    </svg>\n                                </div>\n                                <div className=\"svg-line-box\" onClick={() => this.selectBorderType('2,8,15,8,15,8')}>\n                                    <svg viewBox=\"0 0 64 32\" width=\"80\" height=\"24\">\n                                        <path d=\"M1 16 L63 16\" stroke=\"#000\" strokeWidth=\"2\" strokeDasharray=\"2,8,15,8,15,8\" />\n                                    </svg>\n                                </div>\n                                <div className=\"svg-line-box\" onClick={() => this.selectBorderType('5,20')}>\n                                    <svg viewBox=\"0 0 64 32\" width=\"80\" height=\"24\">\n                                        <path d=\"M1 16 L63 16\" stroke=\"#000\" strokeWidth=\"2\" strokeDasharray=\"5,20\" />\n                                    </svg>\n                                </div>\n                            </div>\n                        </div>\n                    </label>\n                    <label className=\"custom-selectbox\">\n                        <div className=\"box-container\" onClick={() => this.toggleDropdown('arrow-dropdown')}>\n                            <svg viewBox=\"0 0 64 32\" width=\"80\" height=\"24\">\n                                <path d=\"M1 16 L63 16\" stroke=\"#000\" strokeWidth=\"2\" markerEnd={`url(#${state.activeArrow})`} />\n                            </svg>\n                        </div>\n\n                        <div className={state.dropdownOpen === \"arrow-dropdown\" ? \"custom-selectbox-content shown\" : \"custom-selectbox-content\"}>\n                            <div className=\"custom-selectbox-dropdown\">\n                                <div className=\"svg-line-box\" onClick={() => this.selectArrow('arrow')}>\n                                    <svg viewBox=\"0 0 64 32\" width=\"80\" height=\"24\">\n                                        <path d=\"M1 16 L63 16\" stroke=\"#000\" strokeWidth=\"2\" markerEnd=\"url(#arrow)\" />\n                                    </svg>\n                                </div>\n                                <div className=\"svg-line-box\" onClick={() => this.selectArrow('squareArrow')}>\n                                    <svg viewBox=\"0 0 64 32\" width=\"80\" height=\"24\">\n                                        <path d=\"M1 16 L63 16\" stroke=\"#000\" strokeWidth=\"2\" markerEnd=\"url(#squareArrow)\" />\n                                    </svg>\n                                </div>\n                                <div className=\"svg-line-box\" onClick={() => this.selectArrow('squareFillArrow')}>\n                                    <svg viewBox=\"0 0 64 32\" width=\"80\" height=\"24\">\n                                        <path d=\"M1 16 L63 16\" stroke=\"#000\" strokeWidth=\"2\" markerEnd=\"url(#squareFillArrow)\" />\n                                    </svg>\n                                </div>\n                                <div className=\"svg-line-box\" onClick={() => this.selectArrow('circleArrow')}>\n                                    <svg viewBox=\"0 0 64 32\" width=\"80\" height=\"24\">\n                                        <path d=\"M1 16 L63 16\" stroke=\"#000\" strokeWidth=\"2\" markerEnd=\"url(#circleArrow)\" />\n                                    </svg>\n                                </div>\n                                <div className=\"svg-line-box\" onClick={() => this.selectArrow('circleFillArrow')}>\n                                    <svg viewBox=\"0 0 64 32\" width=\"80\" height=\"24\">\n                                        <path d=\"M1 16 L63 16\" stroke=\"#000\" strokeWidth=\"2\" markerEnd=\"url(#circleFillArrow)\" />\n                                    </svg>\n                                </div>\n                            </div>\n                        </div>\n                    </label>\n                </div>\n            </div>\n        );\n    }\n}\n","const { default: apiExecute } = require(\".\")\n\nexport const addUpdateFlowchart = async (data) => {\n    return apiExecute(`add-update-workflow`, 'POST', {data, auth: true});\n}\n\nexport const getFlowchart = async (pageId) => {\n    return apiExecute(`get-workflows/${pageId}`, 'GET', {auth: true});\n}\n\n// module.exports = {\n//     addUpdateFlowchart,\n//     getFlowchart\n// }\n","import React, { Component } from \"react\";\nimport { addUpdateChart } from \"../../Api/chart.api\";\nimport { addUpdateFlowchart, getFlowchart } from \"../../Api/flowchart.api\";\nimport { Modal, Button } from 'react-bootstrap';\n\nexport default class CanvasRightSidebar extends Component {\n    state = {\n        flowchartPopupOpen: false,\n        formData: {\n            name: '',\n            description: ''\n        },\n        workflows: [],\n        showModal: false,\n        options: []\n    }\n\n    activeWorkflow = (e, id) => {\n        // e.preventDefault();\n        this.props.activeWorkflow(id);\n    }\n    playWorkflow = (e, id) => {\n        // e.preventDefault();\n        this.props.playWorkflow(id);\n    }\n\n    handleVoice = (e) => {\n        this.props.handleVoice(e);\n    }\n\n    handleVolume = (e) => {\n        this.props.handleVolume(e);\n    }\n\n    requestOptions = {\n        method: 'GET',\n        headers: { \"accept\": \"application/json\" },\n    };\n\n    componentDidMount() {\n        fetch('https://libretranslate.de/languages', this.requestOptions)\n            .then((response) => response.json())\n            .then(opt => {\n                this.setState({ options: opt });\n            });\n    }\n\n    changeToLanguage = (e) => {\n        this.props.handleToLanguage(e);\n    }\n\n    changeFromLanguage = (e) => {\n        this.props.handleFromLanguage(e);\n    }\n\n    playPauseWorkflow = e => {\n        this.props.playPauseWorkflow(e);\n    }\n    showModal = () => {\n        this.setState({ showModal: true })\n    }\n    closeModal = () => {\n        this.setState({ showModal: false })\n    }\n\n    handleInput = (e, feild) => {\n        let formData = this.state.formData;\n        formData[feild] = e.target.value;\n        this.setState({ formData });\n        console.log(this.state.formData, 'formdata')\n    }\n\n    toggleFlowChart = e => {\n        e.preventDefault();\n        document.getElementById('flowchart-popup').classList.toggle(\"shown\");\n    }\n\n    // handleSpeechOptions = (value, field) => {\n    //     this.props.state.speechOptions[field] = value;\n\n    //     switch (field) {\n    //         case 'volume':\n    //             this.props.state.speech.setVolume(value);\n    //             break;\n\n    //         case 'lang':\n    //             this.props.state.speech.setLanguage(value);\n    //             break;\n\n    //         case 'voice':\n    //             this.props.state.speech.setVoice(value);\n    //             break;\n\n    //         default:\n    //             break;\n    //     }\n\n    //     this.props.setStateValue({ speechOptions: value });\n    // }\n\n    creatFlowchart = async e => {\n        e.preventDefault();\n        let state = this.props.state;\n        let { name, description } = this.state.formData\n        var data = {\n            \"workflow_id\": null,\n            \"pages_id\": state.chart.pages_id,\n            \"workflow_name\": name,\n            \"workflow_description\": description,\n            \"workflow\": state.workflowShapes,\n            \"is_active\": true\n        }\n        let response = await addUpdateFlowchart(data);\n\n        this.setState({\n            workflows: response.data.data,\n            formData: {\n                name: '',\n                description: ''\n            }\n        });\n\n        this.props.setStateValue({\n            workflowShapes: [],\n            workflows: response.data.data\n        });\n\n        document.getElementById('flowchart-popup').classList.remove(\"shown\");\n    }\n\n\n\n    deleteWorkflow = async (row) => {\n        var data = {\n            \"workflow_id\": row.workflow_id,\n            \"pages_id\": row.pages_id,\n            \"workflow_name\": row.workflow_name,\n            \"workflow_description\": row.workflow_description,\n            \"workflow\": row.workflow,\n            \"is_active\": false\n        }\n        let response = await addUpdateFlowchart(data);\n        this.setState({\n            workflows: response.data.data,\n            showModal: false,\n            formData: {\n                name: '',\n                description: ''\n            }\n        });\n\n        this.props.setStateValue({\n            workflows: response.data.data\n        });\n        console.log(this.props.state.workflows, 'workflow deleted')\n    }\n\n    goToIndex = type => {\n        let { workflowIndex, workflowPlayList } = this.props.state;\n\n        workflowIndex = parseInt(workflowIndex);\n\n        // console.log('current workflow index: ', workflowIndex);\n        if (type === 'prev' && workflowIndex) {\n            workflowIndex--;\n        }\n        if (type === 'next' && workflowIndex < workflowPlayList.length - 1) {\n            workflowIndex++;\n        }\n\n        // console.log('new workflow index: ', workflowIndex);\n\n\n        this.props.setStateValue({\n            workflowIndex\n        });\n        // set timeout removed\n        this.props.playPauseWorkflow(type, false);\n\n    }\n\n    render() {\n        let state = this.props.state;\n        console.log(this.state.options, 'options')\n        return (\n            <>\n                <div className=\"chart-right-sidebar\">\n                    <div>\n                        <button className=\"btn btn-block\" onClick={() => {\n                            this.props.setStateValue({\n                                flowchartBoardOpen: !state.flowchartBoardOpen\n                            });\n                        }}><i className=\"icon-play2\"></i></button>\n                        <button className=\"btn btn-block\"><i className=\"icon-stack\"></i></button>\n                        <button className=\"btn btn-block\"><i className=\"icon-display\"></i></button>\n                        <button className=\"btn btn-block\"><i className=\"icon-comment1\"></i></button>\n\n                        <div className={!state.flowchartBoardOpen ? \"flowchart-board\" : \"flowchart-board active\"}>\n                            {\n                                state.chart.access_type === 'EDIT' ?\n                                    <button className=\"btn btn-block btn-primary btn-sm\" style={{ cursor: \"pointer\" }} onClick={e => this.props.activeWorkflow(null)}>Create new workflow</button>\n                                    : <></>\n                            }\n\n                            <ul className=\"workflow-lists\">\n                                {\n                                    state.workflows && state.workflows.length && state.workflows.map((row, i) => {\n                                        return (\n                                            <li>\n                                                <div className=\"d-flex\">\n                                                    <a href=\"#\" key={i} className=\"flex-fill workflow-name\" onClick={e => this.activeWorkflow(e, row.workflow_id)}>{row.workflow_name}</a>\n                                                    <a className=\"btn btn-sm btn-primary\" onClick={e => this.playWorkflow(e, row)}>\n                                                        <i className=\"icon-play2\"></i>\n                                                    </a>\n                                                    {\n                                                        state.chart.access_type === 'EDIT' ?\n                                                            <>\n                                                                <a className=\"btn btn-sm btn-info\">\n                                                                    <i className=\"icon-edit1\"></i>\n                                                                </a>\n                                                                <a className=\"btn btn-sm btn-danger\" onClick={() => this.showModal()}>\n                                                                    <i className=\"icon-trash1\"></i>\n                                                                </a>\n                                                                <Modal show={this.state.showModal} onHide={() => this.closeModal()}>\n                                                                    <Modal.Body style={{ fontWeight: '600' }}>\n                                                                        Are you sure, you want to delete this workflow?\n                                                                    </Modal.Body>\n                                                                    <Modal.Footer style={{ textAlign: 'center' }}>\n                                                                        <Button variant=\"secondary\" onClick={() => this.closeModal()}>\n                                                                            Cancel\n                                                                        </Button>\n                                                                        <Button variant=\"danger\" onClick={() => this.deleteWorkflow(row)}>\n                                                                            Delete\n                                                                        </Button>\n                                                                    </Modal.Footer>\n                                                                </Modal>\n                                                            </>\n                                                            : <></>\n                                                    }\n                                                </div>\n                                            </li>\n                                        );\n                                    })\n                                }\n                            </ul>\n                        </div>\n                    </div>\n                    <button type=\"button\" className=\"btn btn-block\" onClick={() => this.props.toggleFullScreen()}><i className={!state.isFullScreen ? \"icon-fullscreen\" : \"icon-fullscreen_exit\"}></i></button>\n                </div>\n                <div id=\"flowchart-popup\">\n                    <div className=\"popup-bg\" onClick={e => this.toggleFlowChart(e)}></div>\n                    <div className=\"popup-part\">\n                        <div className=\"popup-body\">\n                            <a href=\"#close\" className=\"close\" onClick={e => this.toggleFlowChart(e)}>&times;</a>\n                            <form method=\"POST\" onSubmit={e => this.creatFlowchart(e)}>\n                                <div className=\"form-group\">\n                                    <label>Workflow Name</label>\n                                    <input name=\"name\" className=\"form-control\" placeholder=\"Workflow Name\" onInput={e => this.handleInput(e, 'name')} />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label>Workflow Description</label>\n                                    <textarea rows=\"5\" name=\"description\" className=\"form-control\" placeholder=\"Workflow Description\" onInput={e => this.handleInput(e, 'description')}></textarea>\n                                </div>\n                                <div>\n                                    <button type=\"submit\" className=\"btn btn-primary btn-block\">Save Workflow</button>\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n                {\n                    state.workflowsStart && !state.workflowsPlayMode\n                        ? <div className=\"flowchart-save-btn\">\n                            <button className=\"btn btn-primary\" onClick={(e) => this.toggleFlowChart(e)}>Save &amp; Update</button>\n                        </div>\n                        : <></>\n                }\n                {\n                    state.workflowsStart && state.workflowsPlayMode\n                        ? <div className=\"flowchart-save-btn workflow-btn-group\">\n                            <button type=\"button\" title={!state.workflowsPaused ? \"Play\" : \"Pause\"} onClick={(e) => this.playPauseWorkflow(e)}>\n                                {\n                                    <i className={!state.workflowsPaused ? \"icon-play3\" : \"icon-pause\"}></i>\n                                }\n                            </button>\n                            <button\n                                type=\"button\"\n                                title=\"Previous\"\n                                disabled={!state.workflowIndex}\n                                onClick={() => this.goToIndex('prev')}\n                            >\n                                <i className=\"icon-skip_previous\"></i>\n                            </button>\n                            <button\n                                type=\"button\"\n                                title=\"Next\"\n                                disabled={state.workflowIndex === state.workflowPlayList.length - 1}\n                                onClick={() => this.goToIndex('next')}\n                            >\n                                <i className=\"icon-skip_next\"></i>\n                            </button>\n                            <input type=\"range\" min=\"0\" max=\"1\" value={this.props.state.speechOptions.volume} step=\"0.1\" onChange={e => this.handleVolume(e, 'volume')} />\n                            <select id=\"narator-list\" value={this.props.state.speechOptions.voice} onChange={e => this.handleVoice(e, 'voice')}>\n                                <option value=\"Google UK English Female\">Female</option>\n                                <option value=\"Google UK English Male\">Male</option>\n                            </select>\n                            <select id=\"lang-list\" onChange={e => this.changeFromLanguage(e)}>\n                                {\n                                    this.state.options.map((opt) => (\n                                        <option key={opt.code} value={opt.code}>{opt.name}</option>\n                                    ))\n                                }\n                            </select>\n                            <select id=\"lang-list\" onChange={e => this.changeToLanguage(e)}>\n                                {\n                                    this.state.options.map((opt) => (\n                                        <option key={opt.code} value={opt.code}>{opt.name}</option>\n                                    ))\n                                }\n                            </select>\n                        </div>\n                        : <></>\n                }\n            </>\n        );\n    }\n}\n","import { Component } from \"react\";\nimport { addUpdateChart, getChartInfo } from \"../../Api/chart.api\";\nimport { getFlowchart } from \"../../Api/flowchart.api\";\n\nexport default class CanvasFooter extends Component {\n    toggleDropdown = name => {\n        let state = this.props.state;\n        if (state.dropdownOpen && state.dropdownOpen === name) {\n            this.props.setStateValue({ dropdownOpen: null });\n        } else {\n            this.props.setStateValue({ dropdownOpen: name });\n        }\n    }\n    zoomHandler = zoom => {\n        let w = this.props.state.base_chart_width,\n            h = this.props.state.base_chart_height;\n\n        this.props.setStateValue({\n            zoom: zoom,\n            svg_chart_width: w + (w * zoom / 100),\n            svg_chart_height: h + (h * zoom / 100)\n        })\n\n        setTimeout(() => {\n            this.getCanvasChartSpacing();\n        }, 10);\n    }\n\n    chartZoom = e => {\n        this.zoomHandler(e.target.value)\n    }\n\n    zooming = (type) => {\n        let state = this.props.state;\n        let zoom = state.zoom;\n        zoom = parseFloat(zoom);\n        if (type === 'in') {\n            zoom += 10;\n            zoom = zoom < 200 ? zoom : 200;\n        } else if (zoom > -70) {\n            zoom -= 10;\n            zoom = zoom > -70 ? zoom : -70;\n        }\n\n        this.zoomHandler(zoom);\n    }\n\n    getCanvasChartSpacing() {\n        let state = this.props.state;\n\n        let canvas = document.querySelector('.canvas-area');\n        // let    chart = document.querySelector('#chart');\n\n        let styles = {};\n\n        if (canvas.clientWidth > state.svg_chart_width) {\n            styles.inset = `10px 0 10px ${(canvas.clientWidth - state.svg_chart_width) / 2}px`;\n        } else {\n            styles.inset = `10px 0 10px 0`;\n        }\n\n        let scrollBarWidth = canvas.offsetWidth - canvas.clientWidth,\n            scrollBarHeight = canvas.offsetHeight - canvas.clientHeight;\n\n        if (scrollBarWidth <= 0) {\n            scrollBarWidth = canvas.clientWidth;\n        }\n\n        if (scrollBarHeight <= 0) {\n            scrollBarHeight = canvas.clientHeiscrollBarHeight;\n        }\n\n        let mw = (canvas.scrollWidth - canvas.clientWidth) / canvas.scrollWidth,\n            mh = (canvas.scrollHeight - canvas.clientHeight) / canvas.scrollHeight,\n            offsetLeft = canvas.scrollLeft / canvas.scrollWidth,\n            offsetTop = canvas.scrollTop / canvas.scrollHeight;\n\n        mw = 168 - 168 * mw;\n        mh = 119 - 119 * mh;\n        offsetLeft = 168 * offsetLeft;\n        offsetTop = 119 * offsetTop;\n\n        // console.log(mw);\n\n        mw = mw > 5 ? mw : 5;\n        mh = mh > 5 ? mh : 5;\n        if (offsetLeft <= 15) {\n            offsetLeft = 15;\n        }\n        if (offsetTop <= 15) {\n            offsetTop = 15;\n        }\n\n        if (offsetLeft > 200 - 15) {\n            offsetLeft = 200 - 15;\n        }\n        if (offsetTop > 149 - 15) {\n            offsetTop = 149 - 15;\n        }\n\n\n        this.props.setStateValue({\n            minchart_style: {\n                width: `${mw}px`,\n                height: `${mh}px`,\n                left: offsetLeft,\n                top: offsetTop\n            },\n            svg_chart_styles: styles\n        });\n\n        this.dragElement(document.getElementById('picture-in-picture-handle'));\n    }\n    dragElement(elmnt) {\n        var pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;\n        // otherwise, move the DIV from anywhere inside the DIV:\n        elmnt.onmousedown = dragMouseDown;\n\n        function dragMouseDown(e) {\n            e = e || window.event;\n            e.preventDefault();\n            // get the mouse cursor position at startup:\n            pos3 = e.clientX;\n            pos4 = e.clientY;\n            document.onmouseup = closeDragElement;\n            // call a function whenever the cursor moves:\n            document.onmousemove = elementDrag;\n        }\n\n        function elementDrag(e) {\n            e = e || window.event;\n            e.preventDefault();\n            // calculate the new cursor position:\n            pos1 = pos3 - e.clientX;\n            pos2 = pos4 - e.clientY;\n            pos3 = e.clientX;\n            pos4 = e.clientY;\n            // set the element's new position:\n            let top = (elmnt.offsetTop - pos2) > 15 ? (elmnt.offsetTop - pos2) : 15;\n            let left = (elmnt.offsetLeft - pos1) > 15 ? (elmnt.offsetLeft - pos1) : 15;\n\n            if (top > 134 - elmnt.offsetHeight) {\n                top = 134 - elmnt.offsetHeight;\n            }\n            if (left > 183.4 - elmnt.offsetWidth) {\n                left = 183.4 - elmnt.offsetWidth;\n            }\n\n            elmnt.style.top = top + \"px\";\n            elmnt.style.left = left + \"px\";\n\n            var canvas = document.querySelector(\".canvas-area\");\n\n            let offsetLeftPercent = (left - 15) / 168.4;\n            let offsetTopPercent = (top - 15) / 119;\n\n            canvas.scrollLeft = canvas.scrollWidth * offsetLeftPercent\n            canvas.scrollTop = canvas.scrollHeight * offsetTopPercent\n        }\n\n        function closeDragElement() {\n            // stop moving when mouse button is released:\n            document.onmouseup = null;\n            document.onmousemove = null;\n        }\n    }\n\n    updatePageName = (name, index) => {\n        let pages = this.props.state.pages;\n        pages[index].page_name = name;\n        this.props.setStateValue({\n            pages\n        });\n    }\n\n    addPage = async () => {\n        let { state } = this.props;\n        let pageNum = state.pages ? state.pages.length + 1 : 1;\n        let json = state.chart;\n        json.pages_id = null;\n        json.page_name = \"Page \" + pageNum;\n        json.chart = {};\n\n        let response = await addUpdateChart(json);\n\n        if (response.success) {\n            let chart = response.data.data;\n            this.props.setStateValue({\n                nodes: chart.chart,\n                chart_name: chart.chart_name ?? \"Blank diagram\",\n                pages: chart.pages,\n                chart: chart\n            });\n        }\n    }\n\n    setActivePage = async pageNum => {\n        let { state } = this.props;\n        let chart = await getChartInfo(state.chart.chart_id, pageNum);\n        if (chart.success) {\n            chart = chart.data;\n            this.props.setStateValue({\n                nodes: chart.chart,\n                chart_name: chart.chart_name ?? \"Blank diagram\",\n                chart: chart,\n                currentPage: pageNum\n            });\n        }\n\n        let response = await getFlowchart(chart.pages_id)\n        this.props.setStateValue({ workflows: response.data });\n    }\n\n    componentWillUpdate(nextProps, nextState) {\n        var svg = document.querySelector(\"#chart svg\");\n        document.getElementById('mini-chart-svg').innerHTML = svg.innerHTML;\n    }\n\n    componentDidMount() {\n\n        this.getCanvasChartSpacing();\n\n        this.dragElement(document.getElementById('picture-in-picture-handle'));\n    }\n\n    render() {\n        let state = this.props.state;\n        let self = this;\n\n        // console.log('pages', state.pages);\n\n        let pages = state.pages ? state.pages.sort((a, b) => {\n            if (a.page_num < b.page_num) {\n                return -1;\n            } else {\n                return 1;\n            }\n        }) : [];\n\n        return (\n            <div className=\"canvas-footer-bar d-flex\">\n                <div className=\"menu-block flex-fill d-flex align-items-center\" style={{ marginTop: '-5px' }}>\n                    {\n                        pages && pages.map(function (page, pageKey) {\n                            if (state.currentPage === page.page_num) {\n                                return <span className=\"page-tab active\" key={pageKey}>\n                                    <input type=\"text\" value={page.page_name} className=\"page-name\" onInput={e => self.updatePageName(e.target.value, pageKey)} style={{\n                                        minWidth: 50,\n                                        width: (page.page_name.length + 1) * 8\n                                    }} />\n                                </span>\n                            } else {\n                                return <span\n                                    className=\"page-tab\"\n                                    style={{ cursor: 'pointer' }}\n                                    key={pageKey}\n                                    onClick={() => self.setActivePage(page.page_num)}\n                                >\n                                    {page.page_name}\n                                </span>\n                            }\n                        })\n                    }\n                    <span\n                        className=\"page-add-btn\"\n                        onClick={() => this.addPage()}\n                    ><i className=\"icon-plus2\"></i></span>\n                </div>\n                <div className=\"menu-block border-right\" style={{ padding: '3px 5px', marginBottom: '-5px', position: 'relative' }}>\n                    <button type=\"button\" onClick={() => this.toggleDropdown('picture-in-picture')}>\n                        <i className=\"icon-zoom-in1\"></i>\n                    </button>\n                    <div className={\n                        state.dropdownOpen && state.dropdownOpen === \"picture-in-picture\"\n                            ? \"picture-in-picture shown\"\n                            : \"picture-in-picture\"\n                    }\n                        onMouseUp={this.stopLensDrag}\n                    >\n                        <div id=\"picture-in-picture-container\">\n                            <svg\n                                width={168.4}\n                                height={119}\n                                viewBox={'0 0 842 595'}\n                                id=\"mini-chart-svg\"\n                            ></svg>\n                        </div>\n                        <div\n                            id=\"picture-in-picture-handle\"\n                            style={state.minchart_style}\n                        ></div>\n                    </div>\n                </div>\n                <div className=\"menu-block border-right\" style={{ padding: '3px 5px', marginBottom: '-5px' }}>\n                    <button type=\"button\" disabled={state.zoom === -70} onClick={() => this.zooming('out')}>\n                        <i className=\"icon-minus-circle1\"></i>\n                    </button>\n                    <input type=\"range\" min=\"-70\" max=\"200\" value={state.zoom} onChange={this.chartZoom} />\n                    <button type=\"button\" disabled={state.zoom === 200} onClick={() => this.zooming('in')}>\n                        <i className=\"icon-plus-circle1\"></i>\n                    </button>\n                </div>\n                <div className=\"menu-block\">\n                    <span className=\"px-3\">{state.zoom}%</span>\n                </div>\n            </div>\n        );\n    }\n}\n","import { Component } from 'react';\nimport { ViewShapeApi } from '../Api/shape.api.js';\nimport CanvasHeader from '../Components/Canvas/Header.js';\nimport CanvasMenu from '../Components/Canvas/Menu.js';\nimport CanvasLeftSidebar from '../Components/Canvas/LeftSidebar.js';\nimport CanvasArea from '../Components/Canvas/CanvasArea.js';\nimport CanvasRightSidebar from '../Components/Canvas/RightSidebar.js';\nimport CanvasFooter from '../Components/Canvas/CanvasFooter.js';\nimport { addUpdateChart, addUpdateTemplets, getChartInfo, getCharts, getTemplets } from '../Api/chart.api.js';\nimport { io } from 'socket.io-client';\nimport Speech from 'speak-tts' // es6\nimport { getFlowchart } from '../Api/flowchart.api.js';\nimport axios from 'axios';\n\nclass Canvas extends Component {\n    state = {\n        svg_chart_styles: {\n            inset: '10px 0 0 0'\n        },\n        zoom: 0,\n        other_w_chart: 1,\n        other_h_chart: 1,\n        base_chart_viewbox: '0 0 842 595',\n        base_chart_width: 842,\n        base_chart_height: 595,\n        svg_chart_width: 842,\n        svg_chart_height: 595,\n        shapes: [],\n        sidebarShapes: {},\n        nodes: {\n            shapes: [],\n            connector: []\n        },\n        drag_type: null,\n        activeNode: null,\n        current: null,\n        resizeDir: null,\n        connectorDir: null,\n        focused: null,\n        showContextMultiSelectMenu: false,\n        showContextMenu: false,\n        showSelectionMenu: false,\n        showEditorPopup: false,\n        TextEditorPopupPos: null,\n        showTextEditorPopup: false,\n        isFullScreen: false,\n        flowchartBoardOpen: false,\n        dropdownOpen: null,\n        connectorFocused: null,\n        openConnectorContextMenu: null,\n        activeArrow: 'arrow',\n        activeDashArray: '0,0',\n        undo_process: [],\n        redo_process: [],\n        multiSelection: false,\n        multiSelectionStatus: null,\n        minchart_style: {},\n        offset: {\n            offsetX: 0,\n            offsetY: 0\n        },\n        chart: {},\n        chart_name: null,\n        pages: [],\n        currentPage: 1,\n        loading: true,\n        workflowsStart: false,\n        workflowsPlayMode: false,\n        workflowsPaused: true,\n        workflowShapes: [],\n        workflowPlayList: [],\n        clients: {},\n        pointers: {},\n        socket: null,\n        speech: null,\n        workflows: [],\n        workflowIndex: 0,\n        volume: 0.7,\n        tolang: 'en',\n        fromlang: 'en',\n        rate: 1,\n        pitch: 1,\n        speakText: [],\n        voice: 'Google UK English Female',\n        speechOptions: {\n            'volume': 0.7,\n            'lang': 'en-US',\n            'rate': 1,\n            'pitch': 1,\n            'voice': 'Google UK English Female',\n            // 'splitSentences': true,\n            // listeners: {\n            //     onvoiceschanged: voices => {\n            //         console.log(\"Voices changed\", voices);\n            //     }\n            // }\n        },\n        chartdetails: {},\n        charts: [],\n        save_status: false,\n    }\n\n    resetWorkflow = () => {\n        this.setState({\n            workflowShapes: [],\n            workflowsPaused: true,\n            workflowIndex: 0\n        });\n    }\n\n    strip_html_tags(str) {\n        if ((str === null) || (str === ''))\n            return false;\n        else\n            str = str.toString();\n        return str.replace(/<[^>]*>/g, '');\n    }\n\n    enterWorkflow = id => {\n        // this.resetWorkflow();\n        this.setState({ workflowsStart: true, workflowsPlayMode: false });\n    }\n\n    playWorkflow = async row => {\n        const speech = await new Speech();\n        if(speech.hasBrowserSupport()) { // returns a boolean\n            console.log(\"speech synthesis supported\")\n        }\n        this.setState({ speech })\n        await speech.init(\n            this.state.volume,\n            this.state.tolang,\n            this.state.rate,\n            this.state.pitch,\n            // this.state.voice,\n        )\n            .then((data) => {\n                console.log('Speech is ready', data);\n                // this._addVoicesList(data.voices);\n                this.playAudioList(speech);\n            })\n        // this.resetWorkflow();\n        this.setState({ workflowsStart: true, workflowsPlayMode: true, workflowPlayList: row.workflow, speech });\n        // this.playPauseWorkflow(row);\n    }\n\n    playAudioList = async (speech, index) => {\n        await speech.init(\n            this.state.volume,\n            this.state.tolang,\n            this.state.rate,\n            this.state.pitch,\n            // this.state.voice,\n        );\n        let workflowShapes = this.state.workflowShapes;\n        let self = this;\n        let text;\n        if (index <= this.state.workflowPlayList.length - 1) {\n            if (workflowShapes[index] !== this.state.workflowPlayList[index])\n                workflowShapes.push(this.state.workflowPlayList[index]);\n            this.setState({ workflowShapes });\n\n            let node = this.state.nodes.shapes.filter((n) => {\n                return n.id === this.state.workflowPlayList[index];\n            });\n\n            node = node[0];\n\n            text = node.name;\n            if (node.description && node.description.length) {\n                text += \".\\n\" + this.strip_html_tags(node.description);\n            }\n            this.setState({\n                speakText: text\n            })\n            speech.speak({\n                text,\n                queue: false,\n                listeners: {\n                    onstart: () => {\n                        console.log(\"Start utterance\");\n                    },\n                    onend: () => {\n                        console.log(\"End utterance\");\n                    },\n                    onresume: () => {\n                        console.log(\"Resume utterance\");\n                    },\n                    onboundary: event => {\n                        // console.log(\n                        // event.name +\n                        //     \" boundary reached after \" +\n                        //     event.elapsedTime +\n                        //     \" milliseconds.\"\n                        // );\n                    }\n                }\n            })\n                .then(data => {\n                    if (this.state.workflowsPaused) {\n                        index = parseInt(index) + 1;\n                        self.setState({ workflowIndex: index })\n                        // console.log('new index success: ', index, data);\n                        // index++;\n                        if (index <= this.state.workflowPlayList.length - 1) {\n                            self.playAudioList(speech, index);\n                        } else {\n                            self.setState({ workflowsPaused: false });\n                        }\n                    }\n                })\n                .catch(e => {\n                    console.error(\"An error occurred :\", e);\n                });\n        } else {\n            self.setState({ workflowShapes: [], workflowIndex: 0 });\n            self.playAudioList(speech, 0);\n        }\n    }\n\n    playPauseWorkflow = (e, change_status = false) => {\n        let { workflowIndex } = this.state;\n        if (change_status) {\n            this.setState({\n                workflowsPaused: !this.state.workflowsPaused\n            });\n        }\n        let { speech } = this.state\n\n        // console.log('workflow index: ', workflowIndex, this.state.workflowsPaused);\n\n        if (change_status) {\n            if (!this.state.workflowsPaused) {\n                speech.resume();\n            } else {\n                speech.pause();\n            }\n        }\n\n        // if (this.state.workflowsPaused && speech) {\n        //     this.playAudioList(speech, workflowIndex);\n        // }\n\n\n    }\n\n    handleVoice = (e) => {\n        this.setState({\n            voice : e.target.value\n        })\n    }\n\n    handleVolume = (e) => {\n        this.setState({\n            volume: e.target.value\n        })\n    }\n\n    handleToLanguage = (e) => {\n        this.setState({\n            tolang: e.target.value\n        })\n        const params = new URLSearchParams();\n        params.append('q', this.state.speakText);\n        params.append('source', this.state.fromlang);\n        params.append('target', this.state.tolang);\n        params.append('api_key', 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx');\n        axios.post('https://libretranslate.de/translate', params, {\n            headers: { \n                \"accept\": \"application/json\",\n                \"Content-Type\" : \"application/x-www-form-urlencoded\"\n            },\n        }).then((res) => {\n            this.setState({\n                speakText: res.data.translatedText\n            })\n        }).catch((err) => {\n            console.log(err, 'error')\n        })\n    }\n\n    handleFromLanguage = (e) => {\n        this.setState({\n            fromlang: e.target.value\n        })\n    }\n\n    backToCanvas = () => {\n        this.resetWorkflow();\n        this.setState({ workflowsStart: false, workflowsPaused: true, workflowIndex: 0, workflowShapes: [] });\n    }\n\n    getAllShapes = async () => {\n        let shapes = await ViewShapeApi('type=type-wise');\n\n        console.log('shapes: ', shapes);\n\n        this.setState({ shapes: shapes.data.allShapes, sidebarShapes: shapes.data.shapes });\n\n        return shapes.data;\n    }\n\n    getAllCharts = async () => {\n        let charts = await getCharts();\n\n        console.log('charts: ', charts);\n\n        this.setState({ charts: charts.data });\n\n        return charts.data;\n    }\n\n    toggleDropdown = name => {\n        if (this.state.dropdownOpen && this.state.dropdownOpen === name) {\n            this.setState({ dropdownOpen: null });\n        } else {\n            this.setState({ dropdownOpen: name });\n        }\n    }\n\n    setStateValue = (params) => {\n        this.setState(params);\n    }\n\n    updateChartName(chart_name) {\n        this.setState({\n            chart_name\n        });\n    }\n\n    getCanvasChartSpacing() {\n        let state = this.state;\n        let canvas = document.querySelector('.canvas-area');\n        // let    chart = document.querySelector('#chart');\n\n        let styles = {};\n\n        if (canvas.clientWidth > state.svg_chart_width) {\n            styles.inset = `10px 0 10px ${(canvas.clientWidth - state.svg_chart_width) / 2}px`;\n        } else {\n            styles.inset = `10px 0 10px 0`;\n        }\n\n        let scrollBarWidth = canvas.offsetWidth - canvas.clientWidth,\n            scrollBarHeight = canvas.offsetHeight - canvas.clientHeight;\n\n        if (scrollBarWidth <= 0) {\n            scrollBarWidth = canvas.clientWidth;\n        }\n\n        if (scrollBarHeight <= 0) {\n            scrollBarHeight = canvas.clientHeiscrollBarHeight;\n        }\n\n        let mw = (canvas.scrollWidth - canvas.clientWidth) / canvas.scrollWidth,\n            mh = (canvas.scrollHeight - canvas.clientHeight) / canvas.scrollHeight,\n            offsetLeft = canvas.scrollLeft / canvas.scrollWidth,\n            offsetTop = canvas.scrollTop / canvas.scrollHeight;\n\n        mw = 168 - 168 * mw;\n        mh = 119 - 119 * mh;\n        offsetLeft = 168 * offsetLeft;\n        offsetTop = 119 * offsetTop;\n\n        // console.log(mw);\n\n        mw = mw > 5 ? mw : 5;\n        mh = mh > 5 ? mh : 5;\n        if (offsetLeft <= 15) {\n            offsetLeft = 15;\n        }\n        if (offsetTop <= 15) {\n            offsetTop = 15;\n        }\n\n        if (offsetLeft > 200 - 15) {\n            offsetLeft = 200 - 15;\n        }\n        if (offsetTop > 149 - 15) {\n            offsetTop = 149 - 15;\n        }\n\n\n        this.setState({\n            minchart_style: {\n                width: `${mw}px`,\n                height: `${mh}px`,\n                left: offsetLeft,\n                top: offsetTop\n            },\n            svg_chart_styles: styles\n        });\n\n        // this.dragElement(document.getElementById('picture-in-picture-handle'));\n    }\n\n    toggleFullScreen = () => {\n        let isFullScreen = this.state.isFullScreen\n\n        this.setState({ isFullScreen: !isFullScreen });\n\n        setTimeout(() => {\n            this.getCanvasChartSpacing();\n        }, 10);\n\n    }\n\n    UNSAFE_componentWillUpdate = async (nextProps, nextState) => {\n        if (!this.state.loading) {\n            // console.log('nextState', nextState);\n            // this.setState({ save_status: true });\n            let { chartId } = this.props.match.params;\n            let json = {\n                \"chart_id\": chartId,\n                \"product\": \"FC\",\n                \"is_template\": nextState.chart.is_template,\n                // \"is_starred\": false,\n                \"pages_id\": nextState.chart.pages_id,\n                \"chart\": nextState.nodes,\n                \"page_name\": nextState.pages ? nextState.pages[nextState.currentPage - 1].page_name : \"Page 1\",\n                \"chart_name\": nextState.chart_name\n            }\n            let response = await addUpdateChart(json);\n            if (response.success) {\n                // this.setState({ save_status: false });\n                console.log('Data updated');\n            }\n        }\n    }\n\n    saveUndoProcess = (params, delete_redo = true) => {\n        let { undo_process } = this.state;\n\n        undo_process.push(params);\n\n        this.setState({ undo_process });\n\n        if (delete_redo) {\n            this.setState({ redo_process: [] });\n        }\n\n        return undo_process;\n    }\n\n    saveTemplate = async () => {\n        let data = this.state.chartdetails.data;\n        data.is_template = true;\n        // console.log('chartdetails', data);\n        let response = await addUpdateChart(data);\n        if (response.success) {\n            console.log('response', response);\n        }\n    }\n\n    async componentDidMount() {\n        let userString = localStorage.getItem('user');\n        let user = JSON.parse(userString);\n\n        document.addEventListener('contextmenu', (e) => {\n            e.preventDefault();\n        });\n\n        let { chartId } = this.props.match.params;\n        let chart = await getChartInfo(chartId);\n\n\n        // console.log('chart', chart);\n        // console.log('this.is chart details', chart);\n\n        this.setState({ chartdetails: chart });\n\n        if (!chart.success) {\n            this.props.history.push('/');\n        }\n\n        let self = this;\n\n        this.setState({\n            nodes: chart.data.chart,\n            chart_name: chart.data.chart_name ?? \"Blank diagram\",\n            pages: chart.data.pages,\n            chart: chart.data\n        });\n        if (chart?.data?.chart?.width && chart?.data?.chart?.height) {\n            // console.log('width : ', chart.data.chart.width);\n            // console.log('height : ', chart.data.chart.height);\n            this.setState({\n                base_chart_width: chart.data.chart.width,\n                base_chart_height: chart.data.chart.height,\n            });\n            // console.log('state height : ', self.state.base_chart_height);\n            // console.log('state width : ', self.state.base_chart_width);\n        }\n\n\n        let shapes = await this.getAllShapes();\n        let charts = await this.getAllCharts();\n\n        if (shapes && chart && charts) {\n            this.setState({ loading: false });\n        }\n\n        let socket = io.connect('/');\n        this.setState({ socket });\n        let pointerContainer = document.getElementById(\"pointers\");\n        let pointer = document.createElement(\"div\");\n        pointer.setAttribute(\"class\", \"pointer\");\n        pointer.innerHTML = user.name;\n        // console.log('pointer name: ', user.name, pointer);\n        let pointers = this.state.pointers;\n\n        document.body.onmousemove = e => {\n            socket.emit(\"mousemove\", {\n                x: e.pageX,\n                y: e.pageY,\n                drawing: true,\n                user: user.name\n            });\n        }\n\n        let clients = this.state.clients;\n        socket.on(\"moving\", function (data) {\n            if (!clients.hasOwnProperty(data.id)) {\n                pointers[data.id] = pointerContainer.appendChild(pointer.cloneNode());\n            }\n\n            pointers[data.id].style.left = data.x + \"px\";\n            pointers[data.id].style.top = data.y + \"px\";\n\n            pointers[data.id].innerHTML = data.user;\n\n            clients[data.id] = data;\n            self.setState({ clients, pointers });\n        });\n\n        socket.on(\"node_changed\", function (nodes) {\n            self.setState({ nodes });\n        });\n\n        socket.on(\"clientdisconnect\", function (id) {\n            delete clients[id];\n            if (pointers[id]) {\n                pointers[id].parentNode.removeChild(pointers[id]);\n            }\n            self.setState({ clients, pointers });\n        });\n\n        let response = await getFlowchart(this.state.chart.pages_id)\n        this.setState({ workflows: response.data });\n    }\n\n    componentWillUnmount() {\n        let { socket } = this.state;\n\n        socket.disconnect();\n    }\n\n    render() {\n        console.log(this.state.speakText, this.state.fromlang, 'response data');\n        let canvasClass = 'canvas-screen';\n        if (this.state.isFullScreen) {\n            canvasClass += ' is-full-screen';\n        }\n\n        if (this.state.workflowsStart) {\n            canvasClass += ' workflow-screen';\n        }\n\n        if (this.state.loading) {\n            return (\n                <></>\n            );\n        } else {\n            return (\n                <div className={canvasClass}>\n                    <div id=\"pointers\"></div>\n                    {\n                        !this.state.workflowsStart\n                            ? <>\n                                <CanvasHeader\n                                    {...this.props}\n                                    nodes={this.state.nodes}\n                                    chart_name={this.state.chart_name}\n                                    updateChartName={name => this.updateChartName(name)}\n                                    state={this.state}\n                                    setStateValue={params => this.setStateValue(params)}\n                                    saveTemplate={() => this.saveTemplate()}\n                                />\n                                <CanvasMenu state={this.state} setStateValue={params => this.setStateValue(params)} />\n                            </>\n                            : <>\n                                <div className=\"flowchart-back-button\">\n                                    <button className=\"btn btn-light btn-sm\" onClick={() => this.backToCanvas()}>Back</button>\n                                </div>\n                            </>\n                    }\n                    <div className=\"d-flex chart-main-content\">\n                        {\n                            !this.state.workflowsStart ?\n                                <CanvasLeftSidebar state={this.state} setStateValue={params => this.setStateValue(params)} />\n                                : <></>\n                        }\n                        <CanvasArea\n                            state={this.state}\n                            setStateValue={params => this.setStateValue(params)}\n                            saveUndoProcess={nodes => this.saveUndoProcess(nodes)}\n                        />\n                        <CanvasRightSidebar\n                            state={this.state}\n                            setStateValue={params => this.setStateValue(params)}\n                            toggleFullScreen={() => this.toggleFullScreen()}\n                            activeWorkflow={(e, id) => this.enterWorkflow(e, id)}\n                            playWorkflow={(e, id) => this.playWorkflow(e, id)}\n                            handleVoice={(e) => this.handleVoice(e, 'voice')}\n                            handleVolume={(e) => this.handleVolume(e, 'volume')}\n                            handleToLanguage={(e) => this.handleToLanguage(e, 'lang')}\n                            handleFromLanguage={(e) => this.handleFromLanguage(e, 'lang')}\n                            playPauseWorkflow={(e, status = true) => this.playPauseWorkflow(e, status)}\n                        />\n                    </div>\n                    <CanvasFooter state={this.state} setStateValue={params => this.setStateValue(params)} />\n\n                </div>\n            );\n        }\n    }\n}\n\nexport default Canvas;\n","const { default: apiExecute } = require(\".\")\n\nexport const LoginApi = async (data) => {\n    return apiExecute('login', 'POST', { data: data })\n}\n\nexport const SendLinkToResetPassword = async (data) => {\n    return apiExecute('send-reset-password-link', 'POST', { data: data })\n}\n\nexport const SocialLoginApi = async (data) => {\n    return apiExecute('social-login', 'POST', { data: data })\n}\n\nexport const RegisterApi = async (data) => {\n    return apiExecute('register', 'POST', { data: data })\n}\n\nexport const ProfileApi = async () => {\n    return apiExecute('profile', 'GET', { auth: true })\n}\n\nexport const resetPasswordLinkApi = async (data) => {\n    return apiExecute('send-reset-password-link', 'POST', { data: data })\n}\n\nexport const getResetPasswordToken = async (id) => {\n    return apiExecute(`reset-password/${id}`, 'GET')\n}\n\nexport const changePassword = async (data) => {\n    return apiExecute('reset-password', 'POST', { data: data })\n}\n\n// module.exports = {\n//     LoginApi,\n//     SocialLoginApi,\n//     RegisterApi,\n//     ProfileApi\n// }\n","import axios from \"axios\";\nimport { Component } from \"react\";\n\nclass GithubLogin extends Component {\n    state = {\n        clientId: '5bfa604ec6a4efcf3cc7',\n        clientSecret: '190f8974545b8c83526f6d0ecd27e6a783297bf3',\n        redirectUrl: 'https://localhost:3000/login',\n        token: null\n    }\n    componentDidMount() {\n        const code =\n            window.location.href.match(/\\?code=(.*)/) &&\n            window.location.href.match(/\\?code=(.*)/)[1];\n\n        if (code) {\n            const { clientId, clientSecret } = this.state;\n            const body = {\n                client_id: clientId,\n                client_secret: clientSecret,\n                code: code\n            };\n            const opts = { headers: { accept: 'application/json' } };\n            axios.post('/oauth/access_token', body, opts)\n                .then(res => res.data['access_token'])\n                .then(_token => {\n                    this.setState({ token: _token })\n                    this.getInfo();\n                });\n        }\n    }\n    getInfo = () => {\n        let self = this;\n        const { token } = this.state;\n\n        let opts = {\n            headers: {\n                accept: 'application/json',\n                'Authorization': `Bearer ${token}`\n            }\n        }\n\n        axios.get('https://api.github.com/user', opts)\n            .then(res => res.data)\n            .then(response => {\n                let user = {\n                    id: response.id,\n                    name: response.name,\n                    image: response.avatar_url,\n                    email: null,\n                    type: 'github'\n                }\n\n                self.props.onSuccess(user);\n            });\n    }\n    render() {\n        const { clientId, redirectUrl } = this.state;\n        return (\n            <a href={`https://github.com/login/oauth/authorize?client_id=${clientId}&scope=user&redirect_uri=${redirectUrl}`} className='btn btn-block btn-outline-dark'>\n                <i className='icon-github'></i><br />Github\n            </a>\n        );\n    }\n}\n\nexport default GithubLogin;\n","import { Component } from \"react\";\n\nclass GoogleLogin extends Component {\n    state = {\n        clientId: '125942560180-2r0gk1hdm64509oer3k42gssj29nelhs.apps.googleusercontent.com',\n        clientSecret: '2Y_mrzSCkghmhMEOd_BwBmbM'\n    }\n    componentDidMount() {\n        window['googleSDKLoaded'] = () => {\n            window['gapi'].load('auth2', () => {\n                this.auth2 = window['gapi'].auth2.init({\n                    client_id: this.state.clientId,\n                    cookiepolicy: 'single_host_origin',\n                    scope: 'profile email'\n                });\n                this.prepareLoginButton();\n            });\n        }\n\n        (function (d, s, id) {\n            var js, fjs = d.getElementsByTagName(s)[0];\n            if (d.getElementById(id)) { return; }\n            js = d.createElement(s); js.id = id;\n            js.src = \"https://apis.google.com/js/platform.js?onload=googleSDKLoaded\";\n            fjs.parentNode.insertBefore(js, fjs);\n        }(document, 'script', 'google-jssdk'));\n    }\n    prepareLoginButton = () => {\n        let self = this;\n        this.auth2.attachClickHandler(this.refs.googleLoginBtn, {},\n            (googleUser) => {\n\n                let profile = googleUser.getBasicProfile();\n                // console.log('Token || ' + googleUser.getAuthResponse().id_token);\n                // console.log('ID: ' + profile.getId());\n                // console.log('Name: ' + profile.getName());\n                // console.log('Image URL: ' + profile.getImageUrl());\n                // console.log('Email: ' + profile.getEmail());\n                //YOUR CODE HERE\n\n                let user = {\n                    id: profile.getId(),\n                    name: profile.getName(),\n                    image: profile.getImageUrl(),\n                    email: profile.getEmail(),\n                    type: 'google'\n                }\n\n                self.props.onSuccess(user);\n\n            }, (error) => {\n                alert(JSON.stringify(error, undefined, 2));\n            });\n\n    }\n    render() {\n        return (\n            <button type='button' className='btn btn-block btn-outline-danger' ref='googleLoginBtn'>\n                <i className='icon-google'></i><br />Google\n            </button>\n        );\n    }\n}\n\nexport default GoogleLogin;\n","import { Component } from \"react\";\nimport { SocialLoginApi } from \"../../Api/auth.api\";\n// import FacebookLogin from \"./FacebookLogin\";\nimport GithubLogin from \"./GithubLogin\";\nimport GoogleLogin from \"./GoogleLogin\";\n\nclass SocialLogin extends Component {\n    socialLogin = async (user) => {\n        if(this.props.shareToken){user.share_token = this.props.shareToken}\n        let data = await SocialLoginApi(user);\n        this.props.onLoginSuccess(data);\n    }\n    render() {\n        return (\n            <div className='row text-primary mt-3'>\n                <div className='col'>\n                    <GoogleLogin onSuccess={(user) => this.socialLogin(user)}></GoogleLogin>\n                </div>\n                {/* <div className='col'>\n                    <FacebookLogin onSuccess={(user) => this.socialLogin(user)}></FacebookLogin>\n                </div> */}\n                <div className='col'>\n                    <GithubLogin onSuccess={(user) => this.socialLogin(user)}></GithubLogin>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default SocialLogin;\n","import { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { LoginApi } from \"../../Api/auth.api\"; // \"../../Api/auth.api\";\nimport SocialLogin from \"./SocialLogin\";\nimport Lottie from \"react-lottie\";\nimport logicform from \"../../assets/images/logicform.json\";\n\nconst defaultOptions = {\n  loop: true,\n  autoplay: true,\n  animationData: logicform,\n  rendererSettings: {\n    preserveAspectRatio: \"xMidYMid slice\",\n  },\n};\nclass Login extends Component {\n  state = {\n    alert: {\n      msg: null,\n      type: null,\n    },\n  };\n\n  handleSubmit = async (e) => {\n    e.preventDefault();\n\n    this.setState({\n      alert: {\n        type: \"info\",\n        msg: \"Progressing, Please wait...\",\n      },\n    });\n\n    var formdata = new FormData(e.target);\n    var data = await LoginApi(Object.fromEntries(formdata));\n\n    if (data.success) {\n      let remember_me = document.getElementById(\"rememberMe\").checked;\n      this.setState({\n        alert: {\n          type: \"success\",\n          msg: data.data.msg,\n        },\n      });\n      this.loginRedirect(data, remember_me);\n    } else {\n      this.setState({\n        alert: {\n          type: \"danger\",\n          msg: data.data.msg,\n        },\n      });\n    }\n  };\n\n  loginRedirect = (data, remember_me = true) => {\n    const { history } = this.props;\n\n    if (data.data.accessToken && typeof data.data.accessToken !== \"undefined\") {\n      localStorage.removeItem(\"token\");\n      sessionStorage.removeItem(\"token\");\n\n      if (remember_me) {\n        localStorage.setItem(\"token\", data.data.accessToken);\n      } else {\n        sessionStorage.setItem(\"token\", data.data.accessToken);\n      }\n\n      localStorage.setItem(\"user\", JSON.stringify(data.data.data));\n\n      this.setState({\n        alert: {\n          type: \"success\",\n          msg: data.data.msg,\n        },\n      });\n\n      this.props.onLogin(data.data.accessToken);\n\n      history.push(\"/\");\n    } else {\n      this.setState({\n        alert: {\n          type: \"danger\",\n          msg: \"something went wrong, try again.\",\n        },\n      });\n    }\n  };\n\n  render() {\n    let alertBox = null,\n      disabled = false;\n    if (this.state.alert.type) {\n      alertBox = (\n        <div className={`alert alert-${this.state.alert.type}`}>\n          {this.state.alert.msg}\n        </div>\n      );\n    }\n    if (this.state.alert.type === \"info\") {\n      disabled = \"disabled\";\n    }\n\n    return (\n      <div\n        className=\"vh-100 d-flex align-items-center justify-content-center\"\n        style={{ backgroundColor: \"#222\" }}\n      >\n        <div className=\"row text-primary mt-3\">\n          <div className=\"col\">\n            <div\n              style={{ width: 450 }}\n              className=\"d-flex align-items-center justify-content-center\"\n            >\n              {/* <Lottie\n                style={{\n                  width: 700,\n                  height: 400,\n                  paddingBlockEnd: 100,\n                  borderBlockColor: \"red\",\n                  borderBlockWidth: 5,\n                }}\n                options={defaultOptions}\n                // height={800}\n                // width={900}\n              /> */}\n              <img\n                src={\"/logo.png\"}\n                alt=\"logo\"\n                style={{ width: \"100%\", paddingBottom: 100 }}\n              ></img>\n            </div>\n          </div>\n          <div className=\"col\">\n            <div\n              className=\"card\"\n              style={{\n                width: 400,\n              }}\n            >\n              <div className=\"card-body\">\n                <form\n                  method=\"post\"\n                  autoComplete=\"off\"\n                  onSubmit={this.handleSubmit}\n                >\n                  {alertBox}\n                  <div className=\"form-group\">\n                    <input\n                      type=\"email\"\n                      name=\"login\"\n                      className=\"form-control\"\n                      placeholder=\"Enter Email Address\"\n                      autoComplete=\"off\"\n                      required\n                    />\n                  </div>\n                  <div className=\"form-group\">\n                    <input\n                      type=\"password\"\n                      name=\"password\"\n                      className=\"form-control\"\n                      placeholder=\"Enter Password\"\n                      autoComplete=\"new-password\"\n                      required\n                    />\n                  </div>\n                  <div className=\"form-group d-flex\">\n                    <label>\n                      <input\n                        type=\"checkbox\"\n                        name=\"remember_me\"\n                        value=\"1\"\n                        className=\"mr-1\"\n                        id=\"rememberMe\"\n                      />\n                      Remember Me?\n                    </label>\n                    <Link to=\"/forgot-password\" className=\"ml-auto\">\n                      Forgot Password?\n                    </Link>\n                  </div>\n                  <button\n                    type=\"submit\"\n                    className=\"btn  btn-block\"\n                    disabled={disabled}\n                    style={{ backgroundColor: \"#222\", color: \"#fff\" }}\n                  >\n                    Login\n                  </button>\n                  <div className=\"text-center mt-1\">\n                    Doesn't have account?{\" \"}\n                    <Link to=\"/register\">Register here</Link>.\n                  </div>\n                  <hr />\n                  <div className=\"text-center\">\n                    <h5>Login with</h5>\n                    <SocialLogin\n                      onLoginSuccess={(data) => this.loginRedirect(data)}\n                    ></SocialLogin>\n                  </div>\n                </form>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Login;\n","import { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { RegisterApi } from \"../../Api/auth.api\";\nimport SocialLogin from \"./SocialLogin\";\nimport queryString from \"query-string\";\nimport Lottie from \"react-lottie\";\nimport logicform from \"../../assets/images/logicform.json\";\n\nconst defaultOptions = {\n  loop: true,\n  autoplay: true,\n  animationData: logicform,\n  rendererSettings: {\n    preserveAspectRatio: \"xMidYMid slice\",\n  },\n};\n\nclass Register extends Component {\n  state = {\n    alert: {\n      type: null,\n      msg: null,\n    },\n  };\n  handleSubmit = async (e) => {\n    e.preventDefault();\n    let search = this.props.location.search;\n\n    const { history } = this.props;\n\n    this.setState({\n      alert: {\n        type: \"info\",\n        msg: \"Progressing! Please wait...\",\n      },\n    });\n\n    var formdata = new FormData(e.target);\n    let query = queryString.parse(search);\n    if (query.key) formdata.append(\"share_token\", query.key);\n\n    var data = await RegisterApi(Object.fromEntries(formdata));\n\n    this.setState({\n      alert: {\n        type: data.success ? \"success\" : \"danger\",\n        msg: data.data.msg,\n      },\n    });\n\n    if (data.success) history.push(\"/\");\n  };\n\n  loginRedirect = (data) => {\n    const { history } = this.props;\n    localStorage.setItem(\"token\", data.accessToken);\n\n    this.setState({\n      alert: {\n        type: \"success\",\n        msg: data.msg,\n      },\n    });\n    history.push(\"/\");\n  };\n\n  render() {\n    let alertBox = null,\n      disabled = false;\n    let search = this.props.location.search;\n    let query = queryString.parse(search);\n\n    if (this.state.alert.type) {\n      alertBox = (\n        <div className={`alert alert-${this.state.alert.type}`}>\n          {this.state.alert.msg}\n        </div>\n      );\n    }\n    if (this.state.alert.type === \"info\") {\n      disabled = \"disabled\";\n    }\n    return (\n      <div className=\"vh-100 bg-primary d-flex align-items-center justify-content-center\">\n        <div\n          style={{ width: \"50%\", paddingBottom: 10 }}\n          className=\"row text-primary mt-3\"\n        >\n          <div className=\"col\">\n            <Lottie\n              style={{\n                width: 700,\n                height: 400,\n                paddingBlockEnd: 100,\n                borderBlockColor: \"red\",\n                borderBlockWidth: 5,\n              }}\n              options={defaultOptions}\n              // height={800}\n              // width={900}\n            />\n          </div>\n        </div>\n        <div\n          style={{ width: \"50%\", paddingBottom: 10, paddingInlineStart: 100 }}\n          className=\"row text-primary mt-3\"\n        >\n          <div className=\"col\">\n            <div className=\"card\" style={{ width: 400 }}>\n              <div className=\"card-body\">\n                <form\n                  method=\"post\"\n                  autoComplete=\"off\"\n                  onSubmit={this.handleSubmit}\n                >\n                  {alertBox}\n                  <div className=\"form-group\">\n                    <input\n                      type=\"text\"\n                      name=\"name\"\n                      className=\"form-control\"\n                      placeholder=\"Enter Name\"\n                      required\n                    />\n                  </div>\n                  <div className=\"form-group\">\n                    <input\n                      type=\"email\"\n                      name=\"email\"\n                      className=\"form-control\"\n                      placeholder=\"Enter Email Address\"\n                      required\n                    />\n                  </div>\n                  <div className=\"form-group\">\n                    <input\n                      type=\"password\"\n                      name=\"password\"\n                      className=\"form-control\"\n                      placeholder=\"Enter Password\"\n                      autoComplete=\"new-password\"\n                      required\n                    />\n                  </div>\n                  <div className=\"form-group\">\n                    <input\n                      type=\"password\"\n                      className=\"form-control\"\n                      placeholder=\"Confirm Password\"\n                      autoComplete=\"new-password\"\n                      required\n                    />\n                  </div>\n                  <button\n                    type=\"submit\"\n                    className=\"btn btn-primary btn-block\"\n                    disabled={disabled}\n                  >\n                    Register\n                  </button>\n                  <div className=\"text-center mt-1\">\n                    Already have an account? <Link to=\"/login\">Login here</Link>\n                    .\n                  </div>\n                  <hr />\n                  <div className=\"text-center\">\n                    <h5>Register with</h5>\n                    <SocialLogin\n                      onLoginSuccess={(data) => this.loginRedirect(data)}\n                      shareToken={query.key}\n                    ></SocialLogin>\n                  </div>\n                </form>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Register;\n","import React, { Component } from \"react\";\nimport Avatar from \"react-avatar\";\nimport { Link } from \"react-router-dom\";\n\nexport default class Header extends Component {\n    render() {\n        let userString = localStorage.getItem('user');\n        let user = JSON.parse(userString);\n\n        return (\n            <header>\n                <div className=\"container-fluid\">\n                    <div className=\"header-bar\">\n                        <Link to='/'>\n                            <img src={'/logo.png'} alt=\"logo\" style={{ width: \"110px\", height: '55px', cursor: \"pointer\" }}></img>\n                        </Link>\n                        <div className=\"ml-auto d-flex\">\n                            <input className=\"form-control\" type='text' value={this.props.inputText} onChange={this.props.getSearchResults} placeholder=\"SEARCH DOCUMENT\" />\n                            <div class=\"dropdown ml-2\" style={{ width: 70 }}>\n                                <div data-toggle=\"dropdown\" style={{ cursor: \"pointer\" }} className=\"dropdown-toggle rounded-circle\">\n                                    {/* <ConfigProvider colors={['red', 'green', 'blue']}> */}\n                                    <Avatar name={user ? user.name : ''} size={36} className=\" rounded-circle\" />\n                                    {/* </ConfigProvider> */}\n                                </div>\n                                {/* <img src={'/profile.jpg'} alt=\"profile\" data-toggle=\"dropdown\" style={{ width: \"36px\", cursor: \"pointer\" }} className=\"dropdown-toggle rounded-circle\" /> */}\n                                <ul class=\"dropdown-menu dropdown-menu-right\">\n                                    <li>\n                                        <div className=\"dropdown-item text-primary\">\n                                            Hi, {user ? user.name : ''}<br />\n                                            <small>({user ? user.email : ''})</small>\n                                        </div>\n                                    </li>\n                                    <li><Link className=\"dropdown-item\" to=\"#\">Account Setting</Link></li>\n                                    <li>\n                                        <button className=\"dropdown-item\" style={{ cursor: \"pointer\" }} onClick={() => this.props.onLogout()}>\n                                            Logout\n                                        </button>\n                                    </li>\n                                </ul>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </header>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { addUpdateChart } from \"../Api/chart.api\";\n\nexport default class Sidebar extends Component {\n    createChart = async (type = \"FC\") => {\n        let json = {\n            \"chart_id\": null,\n            \"product\": type,\n            \"is_template\": false,\n            \"is_starred\": false,\n            \"pages_id\": null,\n            \"chart\": {},\n            \"page_name\": \"Page 1\",\n            \"chart_name\": \"Blank diagram\"\n        }\n        let response = await addUpdateChart(json);\n\n        if (response.success) {\n            type === \"FC\"\n                ? this.props.history.push(`/canvas/${response.data.data.chart_id}`)\n                : this.props.history.push(`/whiteboard/${response.data.data.chart_id}`);\n        } else {\n            // alert(response.data.msg);\n        }\n    }\n    async componentDidMount() {\n        var element = document.querySelector(\".sub-dropdown\");\n        var element1 = document.querySelector(\".sub-dropdown-menu\");\n        element.addEventListener('mouseover', function (e) {\n            element1.setAttribute(\"style\", \"display:block;\")\n        }, false);\n        element.addEventListener('mouseout', function (e) {\n            element1.setAttribute(\"style\", \"display:none;\")\n        }, false);\n\n        element1.addEventListener('mouseover', function (e) {\n            element1.setAttribute(\"style\", \"display:block;\")\n        }, false);\n        element1.addEventListener('mouseout', function (e) {\n            element1.setAttribute(\"style\", \"display:none;\")\n        }, false);\n    }\n\n    render() {\n        return (\n            <aside className=\"dashboard-sidebar\">\n                <div className=\"d-grid\">\n                    <div className=\"btn-group w-100\">\n                        <button type=\"button\" className=\"btn btn-dark d-block dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                            + Create\n                        </button>\n                        <div className=\"dropdown-menu w-100\">\n                            <button class=\"dropdown-item sub-dropdown\">NEW FLOWCHART</button>\n                            <button onClick={() => this.createChart('WB')} class=\"dropdown-item\">NEW WHITEBOARD</button>\n                        </div>\n                    </div>\n                    <div>\n                        <ul class=\"sub-dropdown-menu\" style={{ display: 'none' }}>\n                            <button onClick={() => this.createChart('FC')} class=\"dropdown-item\">NEW FLOWCHART</button>\n                            <Link to=\"/templets\" class=\"dropdown-item\">NEW TEMPLETE</Link>\n                        </ul>\n                    </div>\n                </div>\n\n                <ul>\n                    <li>\n                        <Link to=\"/\">Dashboard</Link>\n                    </li>\n                    <li>\n                        <Link to=\"/\">For You</Link>\n                    </li>\n                    <li>\n                        <Link to=\"/templets\">Templates</Link>\n                    </li>\n                </ul>\n                <button className=\"btn btn-success btn-block\">Upgrade</button>\n            </aside>\n        );\n    }\n}\n","var constants = {}\n\nconstants.dateFormat = \"MMMM D, Y\";\nconstants.NODE_URL  = \"http://localhost:9229/\"\n\nexport default constants;\n","import { Component } from \"react\";\nimport { foramatedDate } from \"../../Configs/date.config\";\nimport { ChartSvgImage } from \"../../Views/ChartSvgImage\";\nimport { SvgImage } from \"../../Views/SvgImage\";\n\nexport default class ChartList extends Component {\n    render() {\n        let self = this;\n        let ch = this.props.template;\n\n        // console.log(ch);\n\n        return (\n            <div className=\"col-sm-3 mb-3\">\n                <div className=\"card overflow-hidden\">\n                    <div className=\"card-body\">\n                        <ChartSvgImage id={ch.chart_id} height={150} template={ch} />\n                        <div className=\"py-3\">\n                            <h4>{ch.chart_name && ch.chart_name.trim() !== '' ? ch.chart_name : \"Blank diagram\"}</h4>\n                            <span style={{ position: 'absolute', top: 35, right: 20, zIndex: 999 }}>\n                                <i className={ch.is_starred ? \"icon-star-full\" : \"icon-star-empty\"} style={{ cursor: 'pointer' }} onClick={() => self.props.isStarredChart(ch)}></i>\n                            </span>\n                            <span className=\"bg-secondary rounded px-2 text-white\">\n                                {ch.product === \"FC\" ? \"Flowchart\" : \"Whiteboard\"}\n                            </span>\n                            <div>\n                                <i className=\"icon-user2\"></i> {ch.name}\n                            </div>\n                            <div>\n                                <i className=\"icon-clock1\"></i> {foramatedDate(ch.date_modified)}\n                            </div>\n                            {\n                                ch.access_type ?\n                                    <div>\n                                        <i className=\"icon-share2\"></i> {ch.access_type}\n                                    </div>\n                                    : <></>\n                            }\n                        </div>\n                    </div>\n                    <div className=\"p-3 bg-dark text-white card-heading\">\n                        {!ch.access_type || ch.access_type === \"EDIT\" ? \"Edit\" : \"Open\"} Now\n                    </div>\n                    <a href={ch.product === \"FC\" ? `canvas/${ch.chart_id}` : `whiteboard/${ch.chart_id}`}></a>\n                </div>\n            </div>\n        );\n    }\n}","import constants from \"./constants.config\";\nimport moment from \"moment\";\nexport const foramatedDate = date => {\n    // console.log(date);\n    return moment(date).format(constants.dateFormat);\n}\n","import React, { Component } from \"react\"\nimport { foramatedDate } from \"../../Configs/date.config\";\nimport { SvgImage } from \"../../Views/SvgImage\";\nimport ChartList from \"./ChartList\";\n\nexport default class ChartListing extends Component {\n    state = {\n        starred_view: false,\n        recent_view: false,\n        mychart_view: false,\n        shared_view: false,\n        templet_view: false,\n        allchart_view: false,\n    }\n    isStarredChart = (data) => {\n        data.is_starred = !data.is_starred;\n        this.props.onGoTo(data);\n    }\n    render() {\n        let self = this;\n        return (\n            <>\n                {/* Starred Charts */}\n                {\n                    this.props.charts.map(function (row, i) {\n                        if (i == 0) {\n                            return (\n                                <div key={i} >\n                                    <div>\n                                        <h5 style={{ float: 'left', textAlign: 'right' }}>Starred Charts</h5>\n                                        {\n                                            row.data && row.data.filter(li => li.is_starred == true).length && row.data.filter(li => li.is_starred == true).length > 4 ?\n                                                <>\n                                                    {\n                                                        self.state.starred_view ?\n                                                            <div style={{ float: 'right', textAlign: 'right', cursor: 'pointer' }} onClick={() => self.setState({ starred_view: false })}>view less</div>\n                                                            :\n                                                            <div style={{ float: 'right', textAlign: 'right', cursor: 'pointer' }} onClick={() => self.setState({ starred_view: true })}>view more</div>\n                                                    }\n                                                </>\n                                                : ''\n                                        }\n                                        <div class=\"clearfix\"></div>\n                                    </div>\n                                    {\n                                        row.data && row.data.filter(li => li.is_starred === true).length\n                                            ? <div className=\"row dashboard-blocks\">\n                                                {\n                                                    row.data.filter(li => li.is_starred == true).filter((ch) => {\n                                                        if(self?.props?.searchTerm === '') {\n                                                            return ch;\n                                                        } else if(ch?.chart_name?.toLowerCase().includes(self?.props?.searchTerm?.toLowerCase())) {\n                                                            return ch;\n                                                        }\n                                                    }).map((ch, j) => {\n                                                        if (self.state.starred_view) {\n                                                            return <ChartList {...self.props} template={ch} isStarredChart={(ch) => self.isStarredChart(ch)} key={j} />\n                                                        } else {\n                                                            if (j < 4) {\n                                                                return <ChartList {...self.props} template={ch} isStarredChart={(ch) => self.isStarredChart(ch)} key={j} />\n                                                            }\n                                                        }\n                                                    })\n                                                }\n                                            </div>\n                                            : <div>No records in <strong>Starred Charts</strong>.</div>\n                                    }\n\n                                </div>\n                            )\n                        }\n                    })\n                }\n                {/* Recent Charts */}\n                {\n                    this.props.charts.map(function (row, i) {\n                        if (i == 0) {\n                            return (\n                                <div key={i} style={{ marginTop: 30 }}>\n                                    <div>\n                                        <h5 style={{ float: 'left', textAlign: 'right' }}>Recent Charts</h5>\n                                        {\n                                            row.data && row.data.length && row.data.length > 4 ?\n                                                <>\n                                                    {\n                                                        self.state.recent_view ?\n                                                            <div style={{ float: 'right', textAlign: 'right', cursor: 'pointer' }} onClick={() => self.setState({ recent_view: false })}>view less</div>\n                                                            :\n                                                            <div style={{ float: 'right', textAlign: 'right', cursor: 'pointer' }} onClick={() => self.setState({ recent_view: true })}>view more</div>\n                                                    }\n                                                </>\n                                                : ''\n                                        }\n                                        <div class=\"clearfix\"></div>\n                                    </div>\n                                    {\n                                        row.data && row.data.length\n                                            ? <div className=\"row dashboard-blocks\">\n                                                {\n                                                    row.data.filter((ch) => {\n                                                        if(self?.props?.searchTerm === '') {\n                                                            return ch;\n                                                        } else if(ch?.chart_name?.toLowerCase().includes(self?.props?.searchTerm?.toLowerCase())) {\n                                                            return ch;\n                                                        }\n                                                    }).map((ch, j) => {\n                                                        if (self.state.recent_view) {\n                                                            return <ChartList {...self.props} template={ch} isStarredChart={(ch) => self.isStarredChart(ch)} key={j} />\n                                                        } else {\n                                                            if (j < 4) {\n                                                                return <ChartList {...self.props} template={ch} isStarredChart={(ch) => self.isStarredChart(ch)} key={j} />\n                                                            }\n                                                        }\n                                                    })\n                                                }\n                                            </div>\n                                            : <div>No records in <strong>Recent Charts</strong>.</div>\n                                    }\n\n                                </div>\n                            )\n                        }\n                    })\n                }\n                {/* My Charts */}\n                {\n                    this.props.charts.map(function (row, i) {\n                        if (i == 0) {\n                            return (\n                                <div key={i} style={{ marginTop: 30 }}>\n                                    <div>\n                                        <h5 style={{ float: 'left', textAlign: 'right' }}>My Charts</h5>\n                                        {\n                                            row.data && row.data.length && row.data.length > 4 ?\n                                                <>\n                                                    {\n                                                        self.state.mychart_view ?\n                                                            <div style={{ float: 'right', textAlign: 'right', cursor: 'pointer' }} onClick={() => self.setState({ mychart_view: false })}>view less</div>\n                                                            :\n                                                            <div style={{ float: 'right', textAlign: 'right', cursor: 'pointer' }} onClick={() => self.setState({ mychart_view: true })}>view more</div>\n                                                    }\n                                                </>\n                                                : ''\n                                        }\n                                        <div class=\"clearfix\"></div>\n                                    </div>\n                                    {\n                                        row.data && row.data.length\n                                            ? <div className=\"row dashboard-blocks\">\n                                                {\n                                                    row.data.filter((ch) => {\n                                                        if(self?.props?.searchTerm === '') {\n                                                            return ch;\n                                                        } else if(ch?.chart_name?.toLowerCase().includes(self?.props?.searchTerm?.toLowerCase())) {\n                                                            return ch;\n                                                        }\n                                                    }).map((ch, j) => {\n                                                        if (self.state.mychart_view) {\n                                                            return <ChartList {...self.props} template={ch} isStarredChart={(ch) => self.isStarredChart(ch)} key={j} />\n                                                        } else {\n                                                            if (j < 4) {\n                                                                return <ChartList {...self.props} template={ch} isStarredChart={(ch) => self.isStarredChart(ch)} key={j} />\n                                                            }\n                                                        }\n                                                    })\n                                                }\n                                            </div>\n                                            : <div>No records in <strong>My Charts</strong>.</div>\n                                    }\n\n                                </div>\n                            )\n                        }\n                    })\n                }\n                {/* Shared With Me */}\n                {\n                    this.props.charts.map(function (row, i) {\n                        if (i == 1) {\n                            return (\n                                <div key={i} style={{ marginTop: 30 }}>\n                                    <div>\n                                        <h5 style={{ float: 'left', textAlign: 'right' }}>Shared With Me</h5>\n                                        {\n                                            row.data && row.data.length && row.data.length > 4 ?\n                                                <>\n                                                    {\n                                                        self.state.shared_view ?\n                                                            <div style={{ float: 'right', textAlign: 'right', cursor: 'pointer' }} onClick={() => self.setState({ shared_view: false })}>view less</div>\n                                                            :\n                                                            <div style={{ float: 'right', textAlign: 'right', cursor: 'pointer' }} onClick={() => self.setState({ shared_view: true })}>view more</div>\n                                                    }\n                                                </>\n                                                : ''\n                                        }\n                                        <div class=\"clearfix\"></div>\n                                    </div>\n                                    {\n                                        row.data && row.data.length\n                                            ? <div className=\"row dashboard-blocks\">\n                                                {\n                                                    row.data.filter((ch) => {\n                                                        if(self?.props?.searchTerm === '') {\n                                                            return ch;\n                                                        } else if(ch?.chart_name?.toLowerCase().includes(self?.props?.searchTerm?.toLowerCase())) {\n                                                            return ch;\n                                                        }\n                                                    }).map((ch, j) => {\n                                                        if (self.state.shared_view) {\n                                                            return <ChartList {...self.props} template={ch} isStarredChart={(ch) => self.isStarredChart(ch)} key={j} />\n                                                        } else {\n                                                            if (j < 4) {\n                                                                return <ChartList {...self.props} template={ch} isStarredChart={(ch) => self.isStarredChart(ch)} key={j} />\n                                                            }\n                                                        }\n                                                    })\n                                                }\n                                            </div>\n                                            : <div>No records in <strong>Shared With Me</strong>.</div>\n                                    }\n\n                                </div>\n                            )\n                        }\n                    })\n                }\n                {/* Templets */}\n                {\n                    this.props.charts.map(function (row, i) {\n                        if (i == 0) {\n                            return (\n                                <div key={i} style={{ marginTop: 30 }}>\n                                    <div>\n                                        <h5 style={{ float: 'left', textAlign: 'right' }}>Templates</h5>\n                                        {\n                                            row.data && row.data.filter(li => li.is_template == true).length ?\n                                                <>\n                                                    {\n                                                        self.state.templet_view && row.data.length > 4 ?\n                                                            <div style={{ float: 'right', textAlign: 'right', cursor: 'pointer' }} onClick={() => self.setState({ templet_view: false })}>view less</div>\n                                                            :\n                                                            <div style={{ float: 'right', textAlign: 'right', cursor: 'pointer' }} onClick={() => self.setState({ templet_view: true })}>view more</div>\n                                                    }\n                                                </>\n                                                : ''\n                                        }\n                                        <div class=\"clearfix\"></div>\n                                    </div>\n                                    {\n                                        row.data && row.data.filter(li => li.is_template == true).length\n                                            ? <div className=\"row dashboard-blocks\">\n                                                {\n                                                    row.data.filter(li => li.is_template == true).filter((ch) => {\n                                                        if(self?.props?.searchTerm === '') {\n                                                            return ch;\n                                                        } else if(ch?.chart_name?.toLowerCase().includes(self?.props?.searchTerm?.toLowerCase())) {\n                                                            return ch;\n                                                        }\n                                                    }).map((ch, j) => {\n                                                        if (self.state.templet_view) {\n                                                            return <ChartList {...self.props} template={ch} isStarredChart={(ch) => self.isStarredChart(ch)} key={j} />\n                                                        } else {\n                                                            if (j < 4) {\n                                                                return <ChartList {...self.props} template={ch} isStarredChart={(ch) => self.isStarredChart(ch)} key={j} />\n                                                            }\n                                                        }\n                                                    })\n                                                }\n                                            </div>\n                                            : <div>No records in <strong>Templets</strong>.</div>\n                                    }\n\n                                </div>\n                            )\n                        }\n                    })\n                }\n\n                {/* All Charts */}\n                {\n                    this.props.charts.map(function (row, i) {\n                        if (i == 0) {\n                            return (\n                                <div key={i} style={{ marginTop: 30 }}>\n                                    <div>\n                                        <h5 style={{ float: 'left', textAlign: 'right' }}>All Charts</h5>\n                                        {\n                                            row.data && row.data.length ?\n                                                <>\n                                                    {\n                                                        self.state.allchart_view ?\n                                                            <div style={{ float: 'right', textAlign: 'right', cursor: 'pointer' }} onClick={() => self.setState({ allchart_view: false })}>view less</div>\n                                                            :\n                                                            <div style={{ float: 'right', textAlign: 'right', cursor: 'pointer' }} onClick={() => self.setState({ allchart_view: true })}>view more</div>\n                                                    }\n                                                </>\n                                                : ''\n                                        }\n                                        <div class=\"clearfix\"></div>\n                                    </div>\n                                    {\n                                        row.data && row.data.length\n                                            ? <div className=\"row dashboard-blocks\">\n                                                {\n                                                    row.data.filter((ch) => {\n                                                        if(self?.props?.searchTerm === '') {\n                                                            return ch;\n                                                        } else if(ch?.chart_name?.toLowerCase().includes(self?.props?.searchTerm?.toLowerCase())) {\n                                                            return ch;\n                                                        }\n                                                    })\n                                                    .map((ch, j) => {\n                                                        if (self.state.allchart_view) {\n                                                            return <ChartList {...self.props} template={ch} isStarredChart={(ch) => self.isStarredChart(ch)} key={j} />\n                                                        } else {\n                                                            if (j < 4) {\n                                                                return <ChartList {...self.props} template={ch} isStarredChart={(ch) => self.isStarredChart(ch)} key={j} />\n                                                            }\n                                                        }\n                                                    })\n                                                }\n                                            </div>\n                                            : <div>No records in <strong>All Charts</strong>.</div>\n                                    }\n\n                                </div>\n                            )\n                        }\n                    })\n                }\n\n            </>\n        );\n    }\n}\n","import React, { Component } from \"react\";\n\nexport default class Loading extends Component {\n    render() {\n        return (\n            <div style={{ textAlign: 'center' }}>\n                <span class=\"spinner-border\" role=\"status\"> </span>\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\"\nimport { addUpdateChart, addUpdateTemplets, getCharts } from \"../Api/chart.api\"\nimport Header from \"../Components/Header\"\nimport Sidebar from \"../Components/Sidebar\"\nimport ChartListing from \"../Components/Dashboard/ChartListing\";\nimport Loading from \"../Components/Loading\";\n\nexport default class Dashboard extends Component {\n    state = {\n        charts: [],\n        loading: true,\n        inputField: ''\n    }\n    async componentDidMount() {\n        this.getCharts();\n    }\n    getCharts = async () => {\n        let res = await getCharts();\n        this.setState({ loading: false });\n        if (res && res.success) {\n                this.setState({\n                    charts: res.data\n                })\n        }\n    }\n    updateChart = async (data) => {\n        // console.log('data', data);\n        let response = await addUpdateChart(data);\n        if (response.success) {\n            this.getCharts();\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <Header {...this.props} inputText={this.state.inputField} getSearchResults={(e) => this.setState({ inputField: e.target.value })} />\n                <div className=\"d-flex\">\n                    <Sidebar {...this.props} />\n                    <div className=\"dashboard-content bg-light\">\n                        {\n                            !this.state.loading\n                                ?\n                                    this.state.charts.length\n                                        ? <ChartListing searchTerm={this.state.inputField} charts={this.state.charts} onGoTo={(data) => this.updateChart(data)} />\n                                        : <div>No charts owned by you yet.</div>\n                                : <Loading />\n                        }\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n","import { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { addUpdateChartAccess, getChartAccess } from \"../../Api/chart.api\";\n\nexport default class WhiteboardHeader extends Component {\n    state = {\n        share: {\n            email: '',\n            access_type: ''\n        },\n        chartAccess: null\n    }\n    updateChartName = whiteboard_name => {\n        let { chart } = this.props.state\n        chart.chart_name = whiteboard_name\n        this.props.updateState({\n            chart\n        });\n    }\n    getChartAccess = async () => {\n        let { chart } = this.props.state;\n        let response = await getChartAccess(chart.chart_id);\n        this.setState({\n            chartAccess: response.data\n        });\n    }\n    handleInput = (e, type) => {\n        let share = this.state.share;\n        share[type] = e.target.value;\n\n        this.setState({ share });\n    }\n    changeAccess = async (e, index) => {\n        let chartAccess = this.state.chartAccess;\n        chartAccess.shared_users[index].access_type = e.target.value;\n\n        this.setState({ chartAccess });\n\n        var data = {\n            \"email\": chartAccess.shared_users[index].email,\n            \"chart_id\": chartAccess.shared_users[index].chart_id,\n            \"access_type\": e.target.value,\n            \"is_active\": true,\n            \"chart_access_id\": chartAccess.shared_users[index].chart_access_id\n        }\n        let response = await addUpdateChartAccess(data);\n\n        console.log('edited access: ', response);\n    }\n    accessChart = async e => {\n        e.preventDefault();\n        var { email, access_type } = this.state.share\n        let { chart } = this.props.state;\n        var data = {\n            \"email\": email,\n            \"chart_id\": chart.chart_id,\n            \"access_type\": access_type,\n            \"is_active\": true,\n            \"chart_access_id\": null\n        }\n        let response = await addUpdateChartAccess(data);\n\n        this.getChartAccess();\n\n        console.log(response);\n    }\n    closeSharePopup() {\n        document.querySelector('.share-popup-container').classList.remove('active');\n    }\n    componentDidMount() {\n        document.querySelector('.share-btn')\n            .addEventListener(\"click\", function (e) {\n                e.preventDefault();\n                document.querySelector('.share-popup-container').classList.add('active');\n            });\n\n        document.querySelector('.share-popup-container .close-btn')\n            .addEventListener(\"click\", e => {\n                console.log('closing popup');\n                e.preventDefault();\n                this.closeSharePopup()\n            })\n\n        document.querySelector('.share-popup-container .share-popup-bg')\n            .addEventListener(\"click\", e => {\n                console.log('closing popup');\n                e.preventDefault();\n                this.closeSharePopup()\n            })\n\n        this.getChartAccess()\n    }\n    render() {\n        let { email, access_type } = this.state.share\n\n        let { state } = this.props;\n        let userString = localStorage.getItem('user');\n        let user = JSON.parse(userString);\n        return (\n            <div className=\"canvas-header\">\n                <Link to=\"/\" className=\"file-icon\">\n                    <i className=\"icon-folder\"></i>\n                </Link>\n                <div>\n                    <input type=\"text\" value={state.chart.chart_name} className=\"canvas-title\" onInput={e => this.updateChartName(e.target.value)} onClick={() => true // this.props.setStateValue({focused: null})\n                    } />\n                    <ul className=\"menu\">\n                        <li className=\"dropdown\">\n                            <Link to=\"#\" data-toggle=\"dropdown\">File</Link>\n                            <div className=\"dropdown-menu\">\n                                <Link className=\"dropdown-item\" to=\"#\">Import</Link>\n                                <a className=\"dropdown-item\" href=\"javascript:\" onClick={() => this.exportJson()}>Export</a>\n                                <button className=\"dropdown-item\" onClick={() => this.exportImage()}>Download Image</button>\n                            </div>\n                        </li>\n                        <li>\n                            <Link to=\"#\">Edit</Link>\n                        </li>\n                        <li>\n                            <Link to=\"#\">Select</Link>\n                        </li>\n                        <li>\n                            <Link to=\"#\">View</Link>\n                        </li>\n                        <li>\n                            <Link to=\"#\">Insert</Link>\n                        </li>\n                        <li>\n                            <Link to=\"#\">Arrange</Link>\n                        </li>\n                        <li>\n                            <Link to=\"#\">Help</Link>\n                        </li>\n                        <li>\n                            {\n                                this.props.state.save_status ?\n                                    <Link to=\"#\"><i className=\"icon-clock\"></i> Saving...</Link>\n                                    :\n                                    <Link to=\"#\"><i className=\"icon-clock\"></i> Saved</Link>\n                            }\n                        </li>\n                    </ul>\n                </div>\n                <div className=\"ml-auto d-flex align-items-center\">\n                    <div className=\"flex-end mr-2\">\n                        <button className=\"btn btn-primary share-btn\" type=\"button\"><i className=\"icon-users2\"></i> Share</button>\n                    </div>\n                    <div className=\"flex-end\">\n                        <div className=\"dropdown\">\n                            <img\n                                src={'/profile.jpg'}\n                                data-toggle=\"dropdown\"\n                                style={{ width: \"36px\", cursor: \"pointer\" }}\n                                alt=\"profile image\"\n                                className=\"dropdown-toggle rounded-circle\"\n                            />\n                            <ul className=\"dropdown-menu dropdown-menu-right\">\n                                <li>\n                                    <div className=\"dropdown-item text-primary\">\n                                        Hi, {user ? user.name : ''}<br />\n                                        <small>({user ? user.email : ''})</small>\n                                    </div>\n                                </li>\n                                <li><Link className=\"dropdown-item\" to=\"#\">Account Setting</Link></li>\n                                <li><a className=\"dropdown-item\" style={{ cursor: \"pointer\" }} onClick={() => this.props.onLogout()}>Logout</a></li>\n                            </ul>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"share-popup-container\">\n                    <div className=\"share-popup-bg\"></div>\n                    <div className=\"share-popup\">\n                        <div className=\"card\">\n                            <div className=\"card-header\">\n                                <button className=\"close close-btn\" title=\"Close\">&times;</button>\n                                Share\n                            </div>\n                            <div className=\"card-body\">\n                                <form action=\"\" method=\"post\" className=\"d-flex form-group\" onSubmit={this.accessChart}>\n                                    <div className=\"\">\n                                        <div className=\"d-flex input-custom-group\">\n                                            <input type=\"email\" name=\"email\" className=\"form-control\" placeholder=\"Enter email address\" value={email} autoComplete=\"off\" onInput={e => this.handleInput(e, 'email')} />\n                                            <select value={access_type} onInput={e => this.handleInput(e, 'access_type')}>\n                                                <option value=\"VIEW\">can view</option>\n                                                <option value=\"EDIT\">can edit</option>\n                                            </select>\n                                        </div>\n                                    </div>\n                                    <div className=\"ml-2\">\n                                        <button type=\"submit\" className=\"btn btn-block btn-primary\">Share</button>\n                                    </div>\n                                </form>\n                                {\n                                    this.state.chartAccess\n                                        ? <ul className=\"shared-users\">\n                                            <li className=\"heading\">\n                                                Shared Users\n                                            </li>\n                                            <li>\n                                                <div className=\"flex-fill\">\n                                                    <div>{this.state.chartAccess.created_user.name}</div>\n                                                    <div>{this.state.chartAccess.created_user.email}</div>\n                                                </div>\n                                                <div>\n                                                    ADMIN\n                                                </div>\n                                            </li>\n                                            {\n                                                this.state.chartAccess.shared_users\n                                                && this.state.chartAccess.shared_users.length\n                                                && this.state.chartAccess.shared_users.map((row, index) => {\n                                                    return (\n                                                        <li key={index}>\n                                                            <div className=\"flex-fill\">\n                                                                <div>{row.name}</div>\n                                                                <div>{row.email}</div>\n                                                            </div>\n                                                            <div>\n                                                                <select value={row.access_type} onInput={e => this.changeAccess(e, index)}>\n                                                                    <option value=\"VIEW\">can view</option>\n                                                                    <option value=\"EDIT\">can edit</option>\n                                                                </select>\n                                                            </div>\n                                                        </li>\n                                                    );\n                                                })\n                                            }\n                                        </ul>\n                                        : <></>\n                                }\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}","import { Component } from \"react\";\nimport { fabric } from 'fabric';\n\nexport default class WhiteboardLeftSidebar extends Component {\n    changeMode = (mode, size = 10) => {\n        let { whiteboardCanvas, state } = this.props;\n\n        if (mode === 'pencil' || mode === 'eraser') {\n            // if(mode === 'pencil') {\n            //     whiteboardCanvas.freeDrawingBrush = new fabric.PencilBrush(whiteboardCanvas);\n            // } else {\n            //     whiteboardCanvas.freeDrawingBrush = new fabric.CircleBrush(whiteboardCanvas);\n            // }\n\n            whiteboardCanvas.isDrawingMode = 1;\n            whiteboardCanvas.freeDrawingBrush.color = mode === 'eraser' ? '#fff' : state.penColor;\n            whiteboardCanvas.freeDrawingBrush.width = size;\n\n        } else {\n            whiteboardCanvas.isDrawingMode = 0;\n        }\n\n        this.props.updateSize(size);\n\n        this.props.updateState({\n            state,\n            mode,\n            whiteboardCanvas\n        });\n    }\n    addSticky = color => {\n        let { chart } = this.props.state\n        let left = 0;\n        if (!chart.chart.notes || !chart.chart.notes.length) {\n            left = (window.innerWidth - 255) + 'px';\n        } else {\n            let last = chart.chart.notes[chart.chart.notes.length - 1]\n            left = parseFloat(last.left.substring(0, last.left.length, -2)) - 255 + 'px';\n            console.log('left: ', last.left.substring(0, last.left.length, -2));\n        }\n\n\n        chart.chart.notes = chart.chart.notes ?? [];\n        chart.chart.notes.push({\n            color,\n            text: '',\n            left,\n            top: '5px'\n        });\n        this.props.updateState({ chart });\n    }\n    updateNotes = notes => {\n        this.props.updateNotes(notes);\n    }\n    render() {\n        let { state } = this.props;\n\n        return (\n            <div className=\"whiteboard-icons\">\n                <div className='whiteboard-btn-group'>\n                    {/* <button className=\"btn btn-block\" onClick={() => this.changeMode('sticky-note')}>\n                        <i className='icon-sticky-note-o'></i><br />Sticky Note\n                    </button> */}\n                    <ul>\n                        <li>\n                            <i className='icon-sticky-note-o'></i> Sticky Note\n                            <div className=\"whiteboard-icons-hover\">\n                                <div className=\"icons-dropdown-body\">\n                                    <button type=\"button\" className=\"bg-yellow\" onClick={() => this.addSticky('yellow')}>\n                                        <i className='icon-sticky-note-o'></i>\n                                    </button>\n                                    <button type=\"button\" className=\"bg-green\" onClick={() => this.addSticky('green')}>\n                                        <i className='icon-sticky-note-o'></i>\n                                    </button>\n                                    <button type=\"button\" className=\"bg-pink\" onClick={() => this.addSticky('pink')}>\n                                        <i className='icon-sticky-note-o'></i>\n                                    </button>\n                                    <button type=\"button\" className=\"bg-perple\" onClick={() => this.addSticky('perple')}>\n                                        <i className='icon-sticky-note-o'></i>\n                                    </button>\n                                    <button type=\"button\" className=\"bg-blue\" onClick={() => this.addSticky('blue')}>\n                                        <i className='icon-sticky-note-o'></i>\n                                    </button>\n                                </div>\n                            </div>\n                        </li>\n                        <li>\n                            <i className='icon-pencil'></i> Pencil\n                            <div className=\"whiteboard-icons-hover\">\n                                <div className=\"icons-dropdown-body\">\n                                    <button type=\"button\" onClick={() => this.changeMode('pencil', 1)}>\n                                        <img src=\"/005-pencil-1.png\" />\n                                    </button>\n                                    <button type=\"button\" onClick={() => this.changeMode('pencil', 5)}>\n                                        <img src=\"/001-pencil.png\" />\n                                    </button>\n                                    <button type=\"button\" onClick={() => this.changeMode('pencil', 8)}>\n                                        <img src=\"/002-pen.png\" />\n                                    </button>\n                                    <button type=\"button\" onClick={() => this.changeMode('pencil', 10)}>\n                                        <img src=\"/003-highlighter.png\" />\n                                    </button>\n                                    <button type=\"button\" onClick={() => this.changeMode('pencil', 15)}>\n                                        <img src=\"/004-paint-brush.png\" />\n                                    </button>\n                                </div>\n                            </div>\n                        </li>\n                        <li>\n                            <i className='icon-eraser'></i> Eraser\n                            <div className=\"whiteboard-icons-hover\">\n                                <div className=\"icons-dropdown-body\">\n                                    <button type=\"button\" onClick={() => this.changeMode('eraser', 5)}>\n                                        <i className=\"icon-circle\" style={{ fontSize: 8 }}></i>\n                                    </button>\n                                    <button type=\"button\" onClick={() => this.changeMode('eraser', 10)}>\n                                        <i className=\"icon-circle\" style={{ fontSize: 10 }}></i>\n                                    </button>\n                                    <button type=\"button\" onClick={() => this.changeMode('eraser', 15)}>\n                                        <i className=\"icon-circle\" style={{ fontSize: 12 }}></i>\n                                    </button>\n                                    <button type=\"button\" onClick={() => this.changeMode('eraser', 20)}>\n                                        <i className=\"icon-circle\" style={{ fontSize: 14 }}></i>\n                                    </button>\n                                    <button type=\"button\" onClick={() => this.changeMode('eraser', 25)}>\n                                        <i className=\"icon-circle\" style={{ fontSize: 16 }}></i>\n                                    </button>\n                                </div>\n                            </div>\n                        </li>\n                        <li>\n                            <i className='icon-square-o'></i> Shapes\n                            <div className=\"whiteboard-icons-hover\">\n                                <div className=\"icons-dropdown-body\">\n                                    <button type=\"button\" onClick={() => this.changeMode('rectangle')}>\n                                        <i className=\"icon-square-o\" ></i>\n                                    </button>\n                                    <button type=\"button\" onClick={() => this.changeMode('circle')}>\n                                        <i className=\"icon-circle-o\" ></i>\n                                    </button>\n                                </div>\n                            </div>\n                        </li>\n                    </ul>\n                    {/* <button className=\"btn btn-block\" onClick={() => this.changeMode('eraser')}>\n                        <i className='icon-eraser'></i> Eraser\n                    </button> */}\n                    {/* <button className=\"btn btn-block\" onClick={() => this.changeMode('rectangle')}>\n                        <i className='icon-square-o'></i> Rectangle\n                    </button>\n                    <button className=\"btn btn-block\" onClick={() => this.changeMode('circle')}>\n                        <i className='icon-circle-o'></i> Circle\n                    </button> */}\n                </div>\n                <div style={{ marginTop: 7 }}>\n                    <input type=\"color\" value={state.penColor} onChange={e => this.props.updateState({ penColor: e.target.value })} style={{ width: '100%', height: 40 }} />\n                </div>\n            </div>\n        );\n    }\n}","import React, { Component } from \"react\";\n\nexport default class StickyNote extends Component {\n\n    dragElement = (elmnt, index) => {\n        let self = this;\n        var pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;\n\n        elmnt.children[0].onmousedown = dragMouseDown;\n\n        function dragMouseDown(e) {\n            e = e || window.event;\n            e.preventDefault();\n\n            pos3 = e.clientX;\n            pos4 = e.clientY;\n            document.onmouseup = closeDragElement;\n            document.onmousemove = elementDrag;\n        }\n\n        function elementDrag(e) {\n            e = e || window.event;\n            e.preventDefault();\n            // calculate the new cursor position:\n            pos1 = pos3 - e.clientX;\n            pos2 = pos4 - e.clientY;\n            pos3 = e.clientX;\n            pos4 = e.clientY;\n            // set the element's new position:\n            elmnt.style.top = (elmnt.offsetTop - pos2) + \"px\";\n            elmnt.style.left = (elmnt.offsetLeft - pos1) + \"px\";\n        }\n\n        function closeDragElement() {\n\n            let { chart } = self.props.state;\n            chart.chart.notes[index].top = elmnt.style.top;\n            chart.chart.notes[index].left = elmnt.style.left;\n            console.log('sdfdsij', chart);\n            self.props.updateState({ chart });\n\n            // stop moving when mouse button is released:\n            document.onmouseup = null;\n            document.onmousemove = null;\n        }\n    }\n\n    deleteStickyNote = index => {\n        if (window.confirm(\"Are you sure to delete this sticky note?\")) {\n            let { chart } = this.props.state;\n            chart.chart.notes.splice(index, 1);\n            this.props.updateState({ chart });\n        }\n    }\n    setUpdate = (e, index) => {\n        let { chart } = this.props.state;\n        chart.chart.notes[index].text = e.target.value;\n        this.props.updateState({ chart });\n    }\n\n    render() {\n        if (this.props.notes) {\n            let sticky_notes = document.querySelectorAll('.sticky');\n            for (let i = 0; i < sticky_notes.length; i++) {\n                this.dragElement(sticky_notes[i], i);\n            }\n        }\n        return (\n            <div className={`sticky-groups`}>\n                {\n                    this.props.notes && this.props.notes.map((note, index) => {\n                        return <div className={\"sticky bg-\" + note.color} key={index} style={{ top: note.top, left: note.left }}>\n                            <div className=\"sticky-header\">\n                                <i className=\"icon-move\"></i>\n                                <div>\n                                    <i className=\"icon-trash\" onClick={() => this.deleteStickyNote(index)}></i>\n                                </div>\n                            </div>\n                            <div className=\"sticky-body\">\n                                <textarea placeholder=\"Add your notes...\" onInput={(e) => this.setUpdate(e, index)}>{note.text}</textarea>\n                            </div>\n                        </div>\n                    })\n                }\n            </div>\n        );\n    }\n}","import { Component } from \"react\";\nimport { fabric } from 'fabric';\nimport WhiteboardLeftSidebar from './LeftSidebar';\nimport StickyNote from \"./StickyNote\";\n\nexport default class WhiteboardArea extends Component {\n    state = {\n        whiteboardCanvas: null,\n        notes: [],\n        cursor: {\n            left: 0,\n            top: 0\n        },\n        size: 1\n    }\n\n    updateChartData = () => {\n        // console.log('sdjh shdfdjfjds sdfsdj');\n        let { whiteboardCanvas } = this.state\n        let { chart } = this.props.state;\n        chart.chart.data = whiteboardCanvas;\n\n        this.props.updateState({ chart });\n    }\n\n    getMousePos1 = (canvas, evt) => {\n        var rect = canvas.getBoundingClientRect();\n        return {\n            canvasX: evt.clientX - rect.left,\n            canvasY: evt.clientY - rect.top\n        };\n    }\n\n    getMousePos = (canvas, e) => {\n        var pos = canvas.getPointer(e);\n        return pos;\n    }\n\n    updateNotes = notes => {\n        let self = this;\n        let { chart } = this.props.state;\n        this.setState({ notes });\n\n        setTimeout(() => {\n            console.log('notes : ', notes);\n            var chart_notes = [...notes]\n            // chart_notes.map(note => {\n            //     delete note.editorState;\n            // });\n            let note;\n            for (let index in chart_notes) {\n                note = chart_notes[index];\n                delete note.editorState;\n                // console.log('note: ', note);\n                chart_notes[index] = note;\n            }\n            chart.chart.notes = chart_notes;\n            // console.log('Update Notes', chart_notes);\n            self.props.updateState({ chart });\n        }, 100);\n\n    }\n\n    componentDidMount() {\n        let self = this;\n        let { state } = this.props\n        // console.log('chart', state.chart);\n        if (state.chart.chart && state.chart.chart.notes) {\n            // console.log('notes: ', state.chart.chart.notes);\n            this.setState({ notes: state.chart.chart.notes });\n        }\n\n        // Fill Window Width and Height\n        const { innerWidth: width, innerHeight: height } = window;\n\n        var whiteboardCanvas = new fabric.Canvas('whiteboardCanvas', {\n            selection: false,\n            isDrawingMode: true,\n            width,\n            height\n        });\n\n        if (state.chart && state.chart.chart && state.chart.chart.data) {\n            whiteboardCanvas.loadFromJSON(state.chart.chart.data, () => {\n                whiteboardCanvas.renderAll();\n            });\n        }\n\n        fabric.Object.prototype.selectable = false;\n        fabric.Object.prototype.erasable = true;\n        this.setState({ whiteboardCanvas });\n\n\n        // Mouse Event Handlers\n        if (whiteboardCanvas) {\n            var isDown = false;\n\n            let initial = {\n                x: null,\n                y: null\n            }\n            var rect, ellipse;\n            var WIDTH;\n            var HEIGHT;\n\n            // var recDim = null;\n\n            whiteboardCanvas.on('mouse:down', o => {\n                state = this.props.state;\n\n                isDown = true;\n                let { x, y } = self.getMousePos(whiteboardCanvas, o.e);\n\n                initial = { x, y }\n\n                if (state.mode === 'pencil' || state.mode === 'eraser') {\n                    whiteboardCanvas.isDrawingMode = 1;\n                    whiteboardCanvas.freeDrawingBrush.color = state.mode === 'eraser' ? '#fff' : state.penColor;\n                    // whiteboardCanvas.freeDrawingBrush.width = state.mode === 'eraser' ? 20 : 10;\n                } else {\n                    whiteboardCanvas.isDrawingMode = 0;\n                }\n\n                if (state.mode === 'rectangle') {\n                    rect = new fabric.Rect({\n                        left: x,\n                        top: y,\n                        originX: 'left',\n                        originY: 'top',\n                        width: 0,\n                        height: 0,\n                        angle: 0,\n                        fill: 'rgba(255,255,255,0)',\n                        stroke: state.penColor,\n                        strokeWidth: 10,\n                        transparentCorners: false,\n                        hasRotatingPoint: false\n                    });\n\n                    whiteboardCanvas.add(rect);\n                }\n\n                if (state.mode === 'circle') {\n                    ellipse = new fabric.Ellipse({\n                        left: x,\n                        top: y,\n                        originX: 'left',\n                        originY: 'top',\n                        rx: 0,\n                        ry: 0,\n                        angle: 0,\n                        fill: 'rgba(255,255,255,0)',\n                        stroke: state.penColor,\n                        strokeWidth: 10,\n                        transparentCorners: false,\n                        hasRotatingPoint: false\n                    });\n\n                    whiteboardCanvas.add(ellipse);\n                }\n\n            });\n\n            whiteboardCanvas.on('mouse:move', o => {\n                state = this.props.state;\n                let { x, y } = self.getMousePos(whiteboardCanvas, o.e);\n                // console.log('cursor: ', cursor);\n\n                setTimeout(function () {\n                    self.setState({ cursor: { left: x, top: y } });\n\n                }, 10);\n                if (!isDown) return;\n\n                WIDTH = Math.abs(initial.x - x);\n                HEIGHT = Math.abs(initial.y - y);\n\n                if (state.mode === 'rectangle') {\n                    if (initial.x > x) {\n                        rect.set({ left: Math.abs(x) })\n                    }\n\n                    if (initial.y > y) {\n                        rect.set({ top: Math.abs(y) })\n                    }\n\n                    rect.set({\n                        width: WIDTH,\n                        height: HEIGHT\n                    });\n                }\n\n                if (state.mode === 'circle') {\n\n                    ellipse.set({\n                        rx: WIDTH / 2,\n                        ry: HEIGHT / 2\n                    });\n                }\n\n                whiteboardCanvas.renderAll();\n            });\n\n            whiteboardCanvas.on('mouse:up', o => {\n                isDown = false\n                initial = null\n\n                this.setState({ whiteboardCanvas });\n\n                this.updateChartData();\n            });\n        }\n    }\n\n    render() {\n\n        let { state } = this.props;\n\n        // console.log('notes:', state.chart.notes);\n\n        return (\n            <>\n                <WhiteboardLeftSidebar {...this.props} whiteboardCanvas={this.state.whiteboardCanvas} updateState={json => this.props.updateState(json)} updateSize={size => this.setState({ size })} />\n                <div className={\"canvas-area \" + state.mode}>\n                    <canvas id=\"whiteboardCanvas\">\n                        Sorry, your browser does not support HTML5 canvas technology.\n                    </canvas>\n                    {\n                        // state.mode === 'sticky-note' || this.state.notes.length ?\n                        // <div className={`sticky-groups${state.mode === 'sticky-note' ? ' active' : ''}`}>\n                        //     {/* <ReactStickies\n                        //         notes={this.state.notes}\n                        //         onChange={this.updateNotes}\n                        //     /> */}\n                        //     {\n                        //         state.chart.notes && state.chart.notes.map((note, index) => {\n                        //             return <div className={\"sticky bg-\" + note.color} key={index}>\n                        //                 <div className=\"sticky-header\">\n                        //                     <i className=\"icon-move\"></i>\n                        //                     <div>\n                        //                         <i className=\"icon-trash\"></i>\n                        //                     </div>\n                        //                 </div>\n                        //                 <div className=\"sticky-body\">\n                        //                     <textarea placeholder=\"Add your notes...\">{ note.text }</textarea>\n                        //                 </div>\n                        //             </div>\n                        //         })\n                        //     }\n                        // </div>\n                        // : <></>\n                        <StickyNote {...this.props} updateState={(state) => { this.updateNotes(state.chart.chart.notes); this.props.updateState(state) }} notes={state.chart.chart.notes} />\n                    }\n                    {\n                        state.mode === 'pencil' || state.mode === 'eraser' ?\n                            <div className=\"custom-cursor\" style={{\n                                width: this.state.size,\n                                height: this.state.size,\n                                left: this.state.cursor.left,\n                                top: this.state.cursor.top,\n                                marginLeft: - this.state.size / 2,\n                                marginTop: - this.state.size / 2,\n                                borderRadius: state.mode === 'eraser' ? 0 : '50%',\n                                backgroundColor: state.mode === 'eraser' ? '#ebebeb' : state.penColor,\n                            }}></div>\n                            : <></>\n                    }\n                </div>\n            </>\n        );\n    }\n}","import { Component } from 'react';\nimport { addUpdateChart, getChartInfo } from '../Api/chart.api';\nimport WhiteboardHeader from '../Components/Whiteboard/Header';\nimport WhiteboardArea from '../Components/Whiteboard/WhiteboardArea';\n\nclass Whiteboard extends Component {\n    state = {\n        mode: 'pencil',\n        penColor: '#ff0000',\n        chart: {},\n        save_status: false\n    }\n\n    updateState = json => {\n        let self = this;\n        this.setState(json);\n        // console.log('json', json);\n\n        setTimeout(() => {\n            self.saveCanvas();\n        }, 100);\n    }\n\n    saveCanvas = () => {\n        let { chart } = this.state;\n\n        this.setState({ save_status: true });\n        console.log('save status 1', this.state.save_status);\n        let res = addUpdateChart(chart);\n        // console.log('res', res);\n\n        this.setState({ save_status: false });\n        // this.getCharts();\n        console.log('save status 2', this.state.save_status);\n    }\n\n    componentDidMount = async () => {\n        this.getCharts();\n    }\n    getCharts = async () => {\n        let { whiteboardId } = this.props.match.params;\n        let chart = await getChartInfo(whiteboardId);\n\n        this.setState({ chart: chart.data });\n        // console.log('chart.data', chart.data);\n    }\n\n    render() {\n        return (\n            <div className='canvas-screen whiteboard'>\n                {\n                    this.state.chart.chart\n                        ? <>\n                            <WhiteboardHeader {...this.props} state={this.state} updateState={json => this.updateState(json)} />\n\n                            <div className=\"d-flex chart-main-content\">\n                                <WhiteboardArea {...this.props} state={this.state} updateState={json => this.updateState(json)} />\n                            </div>\n                        </>\n                        : <></>\n                }\n            </div>\n        );\n    }\n}\n\nexport default Whiteboard;\n","import React, { Component } from \"react\"\nimport { addUpdateChart, addUpdateTemplets } from \"../../Api/chart.api\";\nimport { foramatedDate } from \"../../Configs/date.config\";\nimport { SvgImage } from \"../../Views/SvgImage\";\nimport FlowchartConnector from \"../FlowchartConnector\";\nimport FlowchartResizeNode from \"../FlowchartResizeNode\";\n\nexport default class TempletListing extends Component {\n    state = {\n        starred_view: false,\n        recent_view: false,\n        mychart_view: false,\n        shared_view: false,\n        templet_view: false,\n        allchart_view: false,\n    }\n    isStarredChart = (data) => {\n        data.is_starred = !data.is_starred;\n        this.props.onGoTo(data);\n    }\n    createChart = async (type = \"FC\", chart) => {\n        let json = {\n            \"chart_id\": null,\n            \"product\": type,\n            \"is_template\": false,\n            \"is_starred\": false,\n            \"pages_id\": null,\n            chart,\n            \"page_name\": \"Page 1\",\n            \"chart_name\": \"Blank diagram\"\n        }\n        // let json = {\n        //     \"template_id\": 1003,\n        //     \"product\": type,\n        //     \"template_description\": 'Test11',\n        //     \"is_active\": true,\n        //     \"category\": 'ABCD',\n        //     \"chart\": {},\n        //     \"created_user_id\": 1003,\n        //     \"modified_by\": 1003,\n        //     \"title\": \"Test Template\"\n        // }\n        // let response = await addUpdateTemplets(json);\n        // console.log('response', response);\n        let response = await addUpdateChart(json);\n        if (response.success) {\n            type === \"FC\"\n                ? this.props.history.push(`/canvas/${response.data.data.chart_id}`)\n                : this.props.history.push(`/whiteboard/${response.data.data.chart_id}`);\n        } else {\n            // alert(response.data.msg);\n        }\n    }\n    render() {\n        let self = this;\n        return (\n            <>\n                <div className=\"row\">\n                    {\n                        this.props.charts.map(function (ch, j) {\n                            return <div className=\"col-sm-3 mb-3\" key={j}>\n                                <div className=\"card overflow-hidden\">\n                                    <div className=\"card-body\" style={{ backgroundColor: '#ccc' }}>\n                                        {/* <img src={'blob:https://localhost:3000/42e307a2-ab12-46eb-99a4-15b6fb9e54d2'} alt=\"logo\" style={{ width: \"100%\", cursor: \"pointer\" }}></img> */}\n                                        <SvgImage id={ch.template_id} height={150} template={ch} />\n                                    </div>\n                                    <div className=\"p-3 bg-dark text-white card-heading\">\n                                        {ch.title && ch.title.trim() !== '' ? ch.title : \"Blank diagram\"}\n                                    </div>\n                                    {/* <a href=\"#\" onClick={() => self.createChart('FC')} style={{ position: 'absolute', top: 0, left: 0, right: 0, bottom: 0, zIndex: 1 }}></a> */}\n                                    <a href={\"#exampleModal\" + ch.template_id} data-toggle=\"modal\" style={{ position: 'absolute', top: 0, left: 0, right: 0, bottom: 0, zIndex: 1 }}></a>\n                                </div>\n\n                                {/* <!-- Modal --> */}\n                                <div className=\"modal fade\" id={\"exampleModal\" + ch.template_id}>\n                                    <div className=\"modal-dialog modal-dialog-centered\" role=\"document\">\n                                        <div className=\"modal-content\">\n                                            <div className=\"modal-header\">\n                                                <h5 className=\"modal-title\">{ch.title && ch.title.trim() !== '' ? ch.title : \"Blank diagram\"}</h5>\n                                                <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                                    <span aria-hidden=\"true\">&times;</span>\n                                                </button>\n                                            </div>\n                                            <div className=\"modal-body\">\n                                                <SvgImage id={ch.template_id} height={600} template={ch} />\n                                            </div>\n                                            <div className=\"modal-footer\">\n                                                <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                                                <button type=\"button\" className=\"btn btn-primary\" data-dismiss=\"modal\" onClick={() => self.createChart('FC', ch.chart)}>Use Template</button>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        })\n                    }\n                </div>\n            </>\n        );\n    }\n}\n","import React, { Component } from \"react\"\nimport { addUpdateChart, addUpdateTemplets, getTemplets } from \"../Api/chart.api\"\nimport Header from \"../Components/Header\"\nimport Sidebar from \"../Components/Sidebar\"\nimport Loading from \"../Components/Loading\";\nimport TempletListing from \"../Components/Dashboard/TempletListing\";\n\nexport default class Templets extends Component {\n    state = {\n        charts: [],\n        loading: true\n    }\n    async componentDidMount() {\n        this.getCharts();\n    }\n    getCharts = async () => {\n        let res = await getTemplets();\n        console.log('templets', res);\n        this.setState({ loading: false });\n\n        if (res.success) {\n            this.setState({\n                charts: res.data\n            })\n        }\n    }\n    updateChart = async (data) => {\n        console.log('data', data);\n        // let response = await addUpdateTemplets(data);\n        // if (response.success) {\n        //     this.getCharts();\n        // }\n    }\n    render() {\n        return (\n            <div>\n                <Header {...this.props} />\n                <div className=\"d-flex\">\n                    <Sidebar {...this.props} />\n                    <div className=\"dashboard-content bg-light\">\n                        {\n                            !this.state.loading\n                                ?\n                                this.state.charts.length\n                                    ? <TempletListing {...this.props} charts={this.state.charts} onGoTo={(data) => this.updateChart(data)} />\n                                    : <div>No templets owned by you yet.</div>\n                                : <Loading />\n                        }\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n","import { Component } from \"react\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport { Modal, Button } from 'react-bootstrap';\nimport { resetPasswordLinkApi } from \"../../Api/auth.api\"; // \"../../Api/auth.api\";\n\nclass ForgotPassword extends Component {\n    state = {\n        data: null,\n        showModal: false,\n        result: false,\n        alert: {\n            msg: null,\n            type: null\n        },\n    }\n\n    handleSubmit = async (e) => {\n        e.preventDefault();\n\n        this.setState({\n            alert: {\n                type: 'info',\n                msg: 'Progressing, Please wait...'\n            }\n        })\n\n        var formdata = new FormData(e.target);\n        var data = await resetPasswordLinkApi(Object.fromEntries(formdata));\n        if (data.success) {\n            this.setState({ data : data.data.msg })\n            this.setState({ result: true })\n        } else {\n            this.setState({ data })\n            this.setState({\n                showModal: true,\n                alert: {\n                    type: 'danger',\n                    msg: data.data\n                }\n            })\n        }\n    }\n\n    render() {\n        let alertBox = null, disabled = false;\n        if (this.state.alert.type) {\n            alertBox = <div className={`alert alert-${this.state.alert.type}`}>{this.state.alert.msg}</div>\n        }\n        if (this.state.alert.type === 'info') {\n            disabled = 'disabled';\n        }\n\n        return (\n            <>\n                {\n                    !this.state.result ? (\n                        <>\n                            <Modal show={this.state.showModal} onHide={() => this.setState({ showModal: false })}>\n                                <Modal.Header closeButton>\n                                    <Modal.Body style={{ fontWeight: '550' }}>\n                                        {this.state?.data?.data}. You can either re-enter the correct id or register as a new user\n                                    </Modal.Body>\n                                </Modal.Header>\n                                <Modal.Footer>\n                                    <Button variant=\"dark\" onClick={() => this.setState({ showModal: false })}>\n                                        Try Again\n                                    </Button>\n                                    <Button variant=\"primary\">\n                                        <Link style={{ textDecoration: 'none', color: '#fff' }} to='/register'>\n                                            Register\n                                        </Link>\n                                    </Button>\n                                </Modal.Footer>\n                            </Modal>\n                            <div className='vh-100 d-flex align-items-center justify-content-center' style={{ backgroundColor: '#222' }}>\n                                <div>\n                                    <div style={{ width: 400 }} className=\"d-flex align-items-center justify-content-center\">\n                                        <img src={'/logo.png'} alt=\"logo\" style={{ width: \"50%\", paddingBottom: 50 }}></img>\n                                    </div>\n                                    <div className='card' style={{ width: 400 }}>\n                                        <div className='card-body'>\n                                            <form method='post' autoComplete='off' onSubmit={this.handleSubmit}>\n                                                {alertBox}\n                                                <div className='mt-1 mb-3'>\n                                                    <p style={{ fontSize: '13px', fontWeight: 600 }}>Enter the email assosciated with your account and we'll send you a link to reset your password.</p>\n                                                </div>\n                                                <div className='form-group'>\n                                                    <input type='email' name='email' className='form-control' placeholder='Enter Email Address' autoComplete=\"off\" required />\n                                                </div>\n                                                <button type='submit' className='btn  btn-block' disabled={disabled} style={{ backgroundColor: '#222', color: '#fff' }}>Continue</button>\n                                                <div className='text-center mt-1'>\n                                                    Don't have account? <Link to='/register'>Register here</Link>.\n                                                </div>\n                                                <hr />\n                                                {/* <div className='text-center'>\n                                    <h5>Continue with</h5>\n                                    <SocialLogin onLoginSuccess={(data) => this.loginRedirect(data)}></SocialLogin>\n                                </div> */}\n                                            </form>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </>\n                    ) : (\n                        <div className='vh-100 d-flex align-items-center justify-content-center' style={{ backgroundColor: '#222' }}>\n                                <div>\n                                    <div style={{ width: 400 }} className=\"d-flex align-items-center justify-content-center\">\n                                        <img src={'/logo.png'} alt=\"logo\" style={{ width: \"50%\", paddingBottom: 50 }}></img>\n                                    </div>\n                                    <div className='card' style={{ width: 400 }}>\n                                        <div className='card-body' style={{ textAlign: 'center', fontWeight: '600' }}>\n                                            {this.state?.data}\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                    )\n            }\n            </>\n        )\n    }\n}\n\nexport default ForgotPassword;","import { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { changePassword, getResetPasswordToken } from \"../../Api/auth.api\"; // \"../../Api/auth.api\";\nimport SocialLogin from \"./SocialLogin\";\n\nclass ResetPassword extends Component {\n  state = {\n    key: null,\n    password: null,\n    confirmpassword: null,\n    alert: {\n      msg: null,\n      type: null,\n    },\n  };\n\n  componentDidMount = async () => {\n    let key = this.getToken();\n    getResetPasswordToken(key);\n  };\n  getToken = async () => {\n    let queryParams = new URLSearchParams(window.location.search);\n    const key = queryParams.get(\"key\");\n    this.setState({ key });\n    return key;\n  };\n\n  handleSubmit = async (e) => {\n    // if (this.state.password === this.state.confirmpassword) {\n    e.preventDefault();\n\n    this.setState({\n      alert: {\n        type: \"info\",\n        msg: \"Progressing, Please wait...\",\n      },\n    });\n\n    let postData = {\n      token: this.state.key,\n      password: this.state.password,\n      confirmpassword: this.state.confirmpassword,\n    };\n\n    let data = await changePassword(postData);\n\n    if (data.success) {\n      this.setState({ result: true });\n      this.setState({\n        alert: {\n          type: \"info\",\n          msg: \"Password Changed Successfully\",\n        },\n      });\n      this.props.history.push(`/login`);\n    } else {\n      this.setState({ data: data.data });\n      this.setState({\n        showModal: true,\n        alert: {\n          type: \"danger\",\n          msg: \"There is some issue, pls try again later..\",\n        },\n      });\n    }\n    // }\n  };\n\n  render() {\n    let alertBox = null,\n      disabled = false;\n    if (this.state.alert.type) {\n      alertBox = (\n        <div className={`alert alert-${this.state.alert.type}`}>\n          {this.state.alert.msg}\n        </div>\n      );\n    }\n    if (this.state.alert.type === \"info\") {\n      disabled = \"disabled\";\n    }\n\n    return (\n      <div\n        className=\"vh-100 d-flex align-items-center justify-content-center\"\n        style={{ backgroundColor: \"#222\" }}\n      >\n        <div>\n          <div\n            style={{ width: 400 }}\n            className=\"d-flex align-items-center justify-content-center\"\n          >\n            <img\n              src={\"/logo.png\"}\n              alt=\"logo\"\n              style={{ width: \"50%\", paddingBottom: 50 }}\n            ></img>\n          </div>\n          <div className=\"card\" style={{ width: 400 }}>\n            <div className=\"card-body\">\n              <form\n                method=\"post\"\n                autoComplete=\"off\"\n                onSubmit={this.handleSubmit}\n              >\n                {alertBox}\n                <div className=\"form-group\">\n                  <input\n                    type=\"password\"\n                    name=\"password\"\n                    className=\"form-control\"\n                    placeholder=\"Enter Password\"\n                    value={this.state.password}\n                    onChange={(e) =>\n                      this.setState({ password: e.target.value })\n                    }\n                    autoComplete=\"new-password\"\n                    required\n                  />\n                  <input\n                    type=\"confirmpassword\"\n                    name=\"confirmpassword\"\n                    className=\"form-control\"\n                    placeholder=\"Enter Confirm Password\"\n                    value={this.state.confirmpassword}\n                    onChange={(e) =>\n                      this.setState({ confirmpassword: e.target.value })\n                    }\n                    autoComplete=\"new-password\"\n                    required\n                  />\n                </div>\n                <button\n                  type=\"submit\"\n                  className=\"btn  btn-block\"\n                  disabled={disabled}\n                  style={{ backgroundColor: \"#222\", color: \"#fff\" }}\n                >\n                  Change Password\n                </button>\n                <div className=\"text-center mt-1\">\n                  New to Workflowsim? <Link to=\"/register\">Register here</Link>.\n                </div>\n                <hr />\n                {/* <div className='text-center'>\n                                    <h5>Login with</h5>\n                                    <SocialLogin onLoginSuccess={(data) => this.loginRedirect(data)}></SocialLogin>\n                                </div> */}\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ResetPassword;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\nimport { Component } from 'react';\nimport { Redirect, Route, Switch } from 'react-router';\nimport { BrowserRouter } from 'react-router-dom';\nimport './css/style.css';\nimport './icomoon/style.css';\nimport Canvas from './Views/Canvas';\nimport Login from './Views/Auth/Login';\nimport Register from './Views/Auth/Register';\nimport Dashboard from './Views/Dashboard';\nimport { ProfileApi } from './Api/auth.api';\nimport Whiteboard from './Views/Whiteboard';\nimport Templets from './Views/Templets';\nimport { SvgImage } from './Views/SvgImage';\nimport ForgotPassword from './Views/Auth/ForgotPassword';\nimport ResetPassword from './Views/Auth/ResetPassword';\n\nfunction PrivateRoute({ component: Component, authed, ...rest }) {\n  return (\n    <Route\n      {...rest}\n      render={\n        props => authed\n          ? <Component {...props} onLogout={() => {\n            console.log('logout...');\n            localStorage.removeItem(\"token\");\n            sessionStorage.removeItem(\"token\");\n            props.history.push('/login');\n          }} />\n          : <Redirect to={{ pathname: '/login', state: { 'from': props.location } }} />\n      }\n    />\n  )\n}\n\nclass App extends Component {\n  state = {\n    token: this.getToken(),\n    user: null\n  }\n  getToken() {\n    let localToken = localStorage.getItem('token');\n    let sessionToken = sessionStorage.getItem('token');\n\n    if (localToken) {\n      return localToken;\n    } else if (sessionToken) {\n      return sessionToken;\n    } else {\n      return false;\n    }\n  }\n  userLogout() {\n    const { history } = this.props;\n    localStorage.removeItem(\"token\");\n    sessionStorage.removeItem(\"token\");\n\n    history.push('/login');\n  }\n\n  setToken = token => {\n    this.setState({ token });\n  }\n\n  componentDidMount() {\n    let token = this.getToken();\n    if (token) {\n      let response = ProfileApi();\n      if (!response.status && response.data && response.data.msg === 'Unauthorized!') {\n        this.userLogout();\n      }\n    }\n  }\n\n  render() {\n    let self = this;\n    let token = this.state.token;\n\n    return (\n      <BrowserRouter>\n        <Switch>\n          <PrivateRoute authed={token} path='/template-to-image' component={SvgImage} />\n          <PrivateRoute authed={token} exact path='/' component={Dashboard}></PrivateRoute>\n          <PrivateRoute authed={token} exact path='/templets' component={Templets}></PrivateRoute>\n          <PrivateRoute authed={token} path='/canvas/:chartId' component={Canvas}></PrivateRoute>\n          <PrivateRoute authed={token} path='/whiteboard/:whiteboardId' component={Whiteboard}></PrivateRoute>\n          <Route path='/login' render={props => <Login {...props} onLogin={token => self.setToken(token)} />}></Route>\n          <Route path='/register' component={Register}></Route>\n          <Route path='/accept-invitation' component={Register} />\n          <Route path='/forgot-password' component={ForgotPassword} />\n          <Route exact path='/reset-password' component={ResetPassword} />\n        </Switch>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n","import React, { Component } from \"react\";\nimport { ViewShapeApi } from \"../Api/shape.api\";\n\nexport class SvgImage extends Component {\n    state = {\n        shapes: []\n    }\n\n    getAllShapes = async () => {\n        let shapes = await ViewShapeApi();\n        this.setState({ shapes: shapes.data.allShapes });\n    }\n\n    componentDidMount() {\n        this.getAllShapes();\n        // this.getTemplateList();\n    }\n\n    render() {\n        let self = this;\n        let state = self.state;\n        // console.log('props: ', self.props);\n        let template = self.props.template;\n        if (template && template.chart && self.state.shapes && self.state.shapes.length) {\n            let width = template.chart.width ?? 842;\n            let height = template.chart.height ?? 595;\n            return (\n                <svg viewBox={`0 0 ${width} ${height}`} style={{ height: self.props.height ?? 150, width: '100%', objectFit: 'contain' }}>\n                    <marker id=\"arrow\" markerUnits=\"strokeWidth\" viewBox=\"0 0 12 12\" refX=\"9\" refY=\"5\" markerWidth=\"8\" markerHeight=\"8\" orient=\"auto\">\n                        <path d=\"M 0 0 L 10 5 L 0 10 z\" fill=\"#000\"></path>\n                    </marker>\n                    <marker id=\"squareArrow\" markerUnits=\"strokeWidth\" viewBox=\"0 0 12 12\" refX=\"5\" refY=\"6\" markerWidth=\"8\" markerHeight=\"8\" orient=\"auto\">\n                        <rect x=\"1\" y=\"1\" width=\"10\" height=\"10\" fill=\"white\" stroke=\"#000\" strokeWidth=\"1\" />\n                    </marker>\n                    <marker id=\"squareFillArrow\" markerUnits=\"strokeWidth\" viewBox=\"0 0 12 12\" refX=\"5\" refY=\"6\" markerWidth=\"8\" markerHeight=\"8\" orient=\"auto\">\n                        <rect x=\"1\" y=\"1\" width=\"10\" height=\"10\" fill=\"#000\" stroke=\"#000\" strokeWidth=\"1\" />\n                    </marker>\n                    <marker id=\"circleArrow\" markerUnits=\"strokeWidth\" viewBox=\"0 0 12 12\" refX=\"5\" refY=\"6\" markerWidth=\"8\" markerHeight=\"8\" orient=\"auto\">\n                        <circle cx=\"6\" cy=\"6\" r=\"5\" width=\"10\" height=\"10\" fill=\"white\" stroke=\"#000\" strokeWidth=\"1\" />\n                    </marker>\n                    <marker id=\"circleFillArrow\" markerUnits=\"strokeWidth\" viewBox=\"0 0 12 12\" refX=\"5\" refY=\"6\" markerWidth=\"8\" markerHeight=\"8\" orient=\"auto\">\n                        <circle cx=\"6\" cy=\"6\" r=\"5\" width=\"10\" height=\"10\" fill=\"#000\" stroke=\"#000\" strokeWidth=\"1\" />\n                    </marker>\n                    { // Connectors\n                        template.chart && template.chart.connector && template.chart.connector.map(function (node, i) {\n                            let path = '';\n                            let connClass = \"connection\";\n\n                            node.positions.forEach(function (row, j) {\n                                path += j === 0 ? 'M' : 'L';\n                                path += `${row[0]},${row[1]}L${row[2]},${row[3]}`;\n                            });\n                            return <g className={connClass} key={i}>\n                                <path stroke=\"#000\" strokeWidth=\"15\" fill=\"none\" strokeDasharray={node.dasharray} d={path} markerEnd={`url(#${node.arrow})`} style={{ opacity: 0 }}></path>\n                                <path stroke=\"#000\" strokeWidth=\"2\" fill=\"none\" strokeDasharray={node.dasharray} d={path} markerEnd={`url(#${node.arrow})`}></path>\n                            </g>\n                        })\n                    }\n                    {\n                        template.chart && template.chart.shapes && template.chart.shapes.map((node, index) => {\n                            let filtered_shapes = state.shapes.filter(s => s.shape_key === node.type);\n                            let s = filtered_shapes[0];\n\n                            return (<g key={index}>\n                                { // Shapes\n                                    s && s.shape && s.shape.length && s.shape.map((shapeJSON, s_index) => {\n                                        // let shapeJSON = s.shape;\n                                        let ShapeTag = shapeJSON.tag;\n\n                                        let shape_attr = shapeJSON.attributes, filtered_value, s_attr = {};\n\n\n                                        if (s.shape_key === node.type) {\n                                            for (let index in shape_attr) {\n                                                filtered_value = shape_attr[index].toString();\n\n                                                filtered_value = filtered_value\n                                                    .replace(/\\[w\\]/gi, node.width)\n                                                    .replace(/\\[h\\]/gi, node.height)\n                                                    .replace(/\\[x\\]/gi, node.x)\n                                                    .replace(/\\[y\\]/gi, node.y)\n                                                    // Math calculation\n                                                    .replace(/{(.*?)}/gi, function (r) {\n                                                        let res_string = r.replace(/{(.*?)}/gi, \"\\$1\");\n                                                        return eval(res_string)\n                                                    });\n\n                                                s_attr[index] = filtered_value;\n                                            }\n\n                                            return (\n                                                <React.Fragment key={s_index}>\n                                                    <ShapeTag\n                                                        className=\"body start\"\n                                                        x={node.x}\n                                                        y={node.y}\n                                                        width={node.width}\n                                                        height={node.height}\n                                                        stroke={node.stroke}\n                                                        fill={node.fill}\n                                                        fillOpacity={s && s.chart_type === \"Flowchart\" ? 1 : 0}\n                                                        strokeWidth={node.type !== 'text' ? node.strokeWidth : 0}\n                                                        strokeDasharray={node.dasharray}\n                                                        {...s_attr}\n                                                    />\n                                                </React.Fragment>\n                                            )\n                                        } else {\n                                            return <></>\n                                        }\n                                    })\n                                }\n\n                                { // Text\n                                    s && (s.chart_type === 'Flowchart' || node.type === 'text') ?\n                                        <>\n                                            <text\n                                                x={node.x + node.width / 2}\n                                                y={node.y + node.height / 2}\n                                                style={{ fontSize: 8 }}\n                                                textAnchor=\"middle\"\n                                                alignmentBaseline=\"middle\"\n                                            >\n                                                {\n                                                    node && node.name && node.name.toLowerCase().replace(/\\b[a-z]/g, function (letter) {\n                                                        return letter.toUpperCase();\n                                                    })\n                                                }\n                                            </text>\n                                        </>\n                                        : <></>\n                                }\n                            </g>);\n                        })\n                    }\n                </svg>\n            );\n        } else {\n            return <div>Loading</div>\n        }\n    }\n}","const { default: apiExecute } = require(\".\")\n\nexport const ViewShapeApi = async (query = '') => {\n    return apiExecute(`shape/?${query}`)\n}\n\n// module.exports = {\n//     ViewShapeApi\n// }\n","const { default: apiExecute } = require(\".\")\n\nexport const uploadMediaFile = async (file) => {\n    let formData = new FormData();\n    formData.append('recfile', file);\n    return apiExecute(`upload-images`, 'POST', { data: formData, files: true })\n}\n","import axios from \"axios\";\nimport { data } from \"jquery\";\n\nconst apiBaseUrl = '/api/';\n\nconst apiExecute = async (url, method = 'GET', params = null) => {\n    const getToken = async (url, method = 'GET', params = null) => {\n        // console.log('sdfjsdfjdsk');\n        // var data = await getTokenApi(id);\n        let headers = {\n            \"Accept\": \"application/json\",\n            \"Content-Type\": \"application/json\"\n        }\n\n        if (params && params.auth) {\n            let token = localStorage.getItem('token');\n            if (!token || token === 'null') {\n                token = sessionStorage.getItem('token');\n            }\n            headers[\"x-access-token\"] = token;\n        }\n\n        if (params && params.files) {\n            headers[\"Content-Type\"] = \"multipart/form-data\";\n        }\n\n        return axios({\n            url: `${apiBaseUrl}${url}`,\n            method,\n            data: params && params.data ? params.data : null,\n            headers\n        })\n            .then(res => {\n                if (res.data.accessToken && typeof res.data.accessToken !== 'undefined') {\n                    localStorage.removeItem('token');\n                    sessionStorage.removeItem('token');\n\n                    let token = localStorage.getItem('token');\n                    if (!token || token === 'null') {\n                        sessionStorage.setItem('token', res.data.accessToken);\n                    } else {\n                        localStorage.setItem('token', res.data.accessToken);\n\n                    }\n\n                    window.location.reload();\n                }\n                return { success: 1, data: res.data };\n            })\n            .catch(err => {\n                console.log('err', err.response);\n\n\n            })\n    }\n    let headers = {\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"application/json\"\n    }\n\n    if (params && params.auth) {\n        let token = localStorage.getItem('token');\n        if (!token || token === 'null') {\n            token = sessionStorage.getItem('token');\n        }\n        headers[\"x-access-token\"] = token;\n    }\n\n\n    if (params && params.files) {\n        headers[\"Content-Type\"] = \"multipart/form-data\";\n    }\n\n\n    return axios({\n        url: `${apiBaseUrl}${url}`,\n        method,\n        data: params && params.data ? params.data : null,\n        headers\n    })\n        .then(res => {\n            return { success: 1, data: res.data };\n        })\n        .catch(err => {\n            if (err.response.status == 401) {\n                let token = localStorage.getItem('token');\n                let user = localStorage.getItem('user');\n                user = JSON.parse(user);\n                if (!token || token === 'null') {\n                    token = sessionStorage.getItem('token');\n                }\n                if (token === 'null') {\n                    return { success: 0, data: err.response.data };\n                } else {\n                    getToken(`gettoken?user_id=${user.id}`);\n                }\n            } else {\n                return { success: 0, data: err.response.data };\n            }\n        })\n}\n\n\nexport default apiExecute;\n","import React, { Component } from \"react\";\n\nexport default class FlowchartConnector extends Component {\n\n    render() {\n        let { node, display, workflowsStart, index } = this.props.params;\n        let { focused } = this.props.state;\n\n        // console.log('connector node: ', focused);\n\n        let styles = {};\n        if (!display || workflowsStart) {\n            styles.opacity = 0;\n        }\n\n        return (\n            <>\n                <circle\n                    cx={node.x - 20}\n                    cy={node.y + node.height / 2}\n                    r={6}\n                    className=\"connector\"\n                    onMouseDown={() => this.props.selectConnector('left')}\n                    onMouseOver={() => { this.props.doneConnection('left') }}\n                    style={styles}\n                />\n                <circle\n                    cx={(node.x + node.width) + 20}\n                    cy={node.y + node.height / 2}\n                    r={6}\n                    className=\"connector\"\n                    onMouseDown={() => this.props.selectConnector('right')}\n                    onMouseOver={() => { this.props.doneConnection('right') }}\n                    style={styles}\n                />\n                <circle\n                    cx={node.x + node.width / 2}\n                    cy={node.y - 20}\n                    r={6}\n                    className=\"connector\"\n                    onMouseDown={() => this.props.selectConnector('top')}\n                    onMouseOver={() => { this.props.doneConnection('top') }}\n                    style={styles}\n                />\n                <circle\n                    cx={node.x + node.width / 2}\n                    cy={(node.y + node.height) + 20}\n                    r={6}\n                    className=\"connector\"\n                    onMouseDown={() => this.props.selectConnector('bottom')}\n                    onMouseOver={() => { this.props.doneConnection('bottom') }}\n                    style={styles}\n                />\n            </>\n        );\n    }\n}\n","import React, { Component } from \"react\";\n\nexport default class FlowchartResizeNode extends Component {\n    render() {\n        let { node } = this.props.params;\n        return (\n            <g>\n                <rect\n                    className=\"resize-square-border\"\n                    x={node.x - 5}\n                    y={node.y - 5}\n                    width={node.width + 10}\n                    height={node.height + 10}\n                    stroke=\"blue\"\n                    strokeWidth=\"2\"\n                    strokeDasharray=\"15,15\"\n                    fill=\"none\"\n                ></rect>\n                <rect\n                    className=\"resize-square\"\n                    style={{ cursor: 'se-resize' }}\n                    x={node.x - 10}\n                    y={node.y - 10}\n                    rx=\"0\"\n                    onMouseDown={() => this.props.selectResize('left-top')}\n                ></rect>\n                <rect\n                    className=\"resize-square\"\n                    style={{ cursor: 'sw-resize' }}\n                    x={node.x + node.width}\n                    y={node.y - 10}\n                    rx=\"0\"\n                    onMouseDown={() => this.props.selectResize('right-top')}\n                ></rect>\n                <rect\n                    className=\"resize-square\"\n                    style={{ cursor: 'sw-resize' }}\n                    x={node.x - 10}\n                    y={node.y + node.height}\n                    rx=\"0\"\n                    onMouseDown={() => this.props.selectResize('left-bottom')}\n                ></rect>\n                <rect\n                    className=\"resize-square\"\n                    style={{ cursor: 'se-resize' }}\n                    x={node.x + node.width}\n                    y={node.y + node.height}\n                    rx=\"0\"\n                    onMouseDown={() => this.props.selectResize('right-bottom')}\n                ></rect>\n                <rect\n                    className=\"resize-square resize-x\"\n                    style={{ cursor: 'e-resize' }}\n                    x={node.x - 10}\n                    y={node.y + node.height / 2 - 5}\n                    rx=\"0\"\n                    onMouseDown={() => this.props.selectResize('left')}\n                ></rect>\n                <rect\n                    className=\"resize-square resize-x\"\n                    style={{ cursor: 'e-resize' }}\n                    x={node.x + node.width}\n                    y={node.y + node.height / 2 - 5}\n                    rx=\"0\"\n                    onMouseDown={() => this.props.selectResize('right')}\n                ></rect>\n                <rect\n                    className=\"resize-square resize-y\"\n                    style={{ cursor: 's-resize' }}\n                    x={node.x + node.width / 2 - 5}\n                    y={node.y - 10}\n                    rx=\"0\"\n                    onMouseDown={() => this.props.selectResize('top')}\n                ></rect>\n                <rect\n                    className=\"resize-square resize-y\"\n                    style={{ cursor: 's-resize' }}\n                    x={node.x + node.width / 2 - 5}\n                    y={node.y + node.height}\n                    rx=\"0\"\n                    onMouseDown={() => this.props.selectResize('bottom')}\n                ></rect>\n            </g>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport { getChartInfo } from \"../Api/chart.api\";\nimport { ViewShapeApi } from \"../Api/shape.api\";\n\nexport class ChartSvgImage extends Component {\n    state = {\n        shapes: [],\n        template: {}\n    }\n\n    getAllShapes = async () => {\n        let shapes = await ViewShapeApi();\n        this.setState({ shapes: shapes.data.allShapes });\n    }\n\n    getChartDetails = async () => {\n        let chart = await getChartInfo(this.props.id);\n        // console.log(template.data.chart);\n        this.setState({ template: chart.data });\n    }\n\n    componentDidMount() {\n        this.getAllShapes();\n        this.getChartDetails();\n    }\n\n    render() {\n        let self = this;\n        let state = self.state;\n        // console.log('props: ', self.props);\n        let { template } = self.state;\n        if (template && template.chart && self.state.shapes && self.state.shapes.length) {\n            let width = template.chart.width ?? 842;\n            let height = template.chart.height ?? 595;\n            return (\n                <svg viewBox={`0 0 ${width} ${height}`} style={{ height: self.props.height ?? 150, width: '100%', objectFit: 'contain' }}>\n                    <marker id=\"arrow\" markerUnits=\"strokeWidth\" viewBox=\"0 0 12 12\" refX=\"9\" refY=\"5\" markerWidth=\"8\" markerHeight=\"8\" orient=\"auto\">\n                        <path d=\"M 0 0 L 10 5 L 0 10 z\" fill=\"#000\"></path>\n                    </marker>\n                    <marker id=\"squareArrow\" markerUnits=\"strokeWidth\" viewBox=\"0 0 12 12\" refX=\"5\" refY=\"6\" markerWidth=\"8\" markerHeight=\"8\" orient=\"auto\">\n                        <rect x=\"1\" y=\"1\" width=\"10\" height=\"10\" fill=\"white\" stroke=\"#000\" strokeWidth=\"1\" />\n                    </marker>\n                    <marker id=\"squareFillArrow\" markerUnits=\"strokeWidth\" viewBox=\"0 0 12 12\" refX=\"5\" refY=\"6\" markerWidth=\"8\" markerHeight=\"8\" orient=\"auto\">\n                        <rect x=\"1\" y=\"1\" width=\"10\" height=\"10\" fill=\"#000\" stroke=\"#000\" strokeWidth=\"1\" />\n                    </marker>\n                    <marker id=\"circleArrow\" markerUnits=\"strokeWidth\" viewBox=\"0 0 12 12\" refX=\"5\" refY=\"6\" markerWidth=\"8\" markerHeight=\"8\" orient=\"auto\">\n                        <circle cx=\"6\" cy=\"6\" r=\"5\" width=\"10\" height=\"10\" fill=\"white\" stroke=\"#000\" strokeWidth=\"1\" />\n                    </marker>\n                    <marker id=\"circleFillArrow\" markerUnits=\"strokeWidth\" viewBox=\"0 0 12 12\" refX=\"5\" refY=\"6\" markerWidth=\"8\" markerHeight=\"8\" orient=\"auto\">\n                        <circle cx=\"6\" cy=\"6\" r=\"5\" width=\"10\" height=\"10\" fill=\"#000\" stroke=\"#000\" strokeWidth=\"1\" />\n                    </marker>\n                    { // Connectors\n                        template.chart && template.chart.connector && template.chart.connector.map(function (node, i) {\n                            let path = '';\n                            let connClass = \"connection\";\n\n                            node.positions.forEach(function (row, j) {\n                                path += j === 0 ? 'M' : 'L';\n                                path += `${row[0]},${row[1]}L${row[2]},${row[3]}`;\n                            });\n                            return <g className={connClass} key={i}>\n                                <path stroke=\"#000\" strokeWidth=\"15\" fill=\"none\" strokeDasharray={node.dasharray} d={path} markerEnd={`url(#${node.arrow})`} style={{ opacity: 0 }}></path>\n                                <path stroke=\"#000\" strokeWidth=\"2\" fill=\"none\" strokeDasharray={node.dasharray} d={path} markerEnd={`url(#${node.arrow})`}></path>\n                            </g>\n                        })\n                    }\n                    {\n                        template.chart && template.chart.shapes && template.chart.shapes.map((node, index) => {\n                            let filtered_shapes = state?.shapes?.filter(s => s?.shape_key === node?.type);\n                            let s = filtered_shapes[0];\n\n                            return (<g key={index}>\n                                { // Shapes\n                                    s && s.shape && s.shape.length && s.shape.map((shapeJSON, s_index) => {\n                                        // let shapeJSON = s.shape;\n                                        let ShapeTag = shapeJSON.tag;\n\n                                        let shape_attr = shapeJSON.attributes, filtered_value, s_attr = {};\n\n\n                                        if (s.shape_key === node.type) {\n                                            for (let index in shape_attr) {\n                                                filtered_value = shape_attr[index].toString();\n\n                                                filtered_value = filtered_value\n                                                    .replace(/\\[w\\]/gi, node.width)\n                                                    .replace(/\\[h\\]/gi, node.height)\n                                                    .replace(/\\[x\\]/gi, node.x)\n                                                    .replace(/\\[y\\]/gi, node.y)\n                                                    // Math calculation\n                                                    .replace(/{(.*?)}/gi, function (r) {\n                                                        let res_string = r.replace(/{(.*?)}/gi, \"\\$1\");\n                                                        return eval(res_string)\n                                                    });\n\n                                                s_attr[index] = filtered_value;\n                                            }\n\n                                            return (\n                                                <React.Fragment key={s_index}>\n                                                    <ShapeTag\n                                                        className=\"body start\"\n                                                        x={node.x}\n                                                        y={node.y}\n                                                        width={node.width}\n                                                        height={node.height}\n                                                        stroke={node.stroke}\n                                                        fill={node.fill}\n                                                        fillOpacity={s && s.chart_type === \"Flowchart\" ? 1 : 0}\n                                                        strokeWidth={node.type !== 'text' ? node.strokeWidth : 0}\n                                                        strokeDasharray={node.dasharray}\n                                                        {...s_attr}\n                                                    />\n                                                </React.Fragment>\n                                            )\n                                        } else {\n                                            return <></>\n                                        }\n                                    })\n                                }\n\n                                { // Text\n                                    s && (s.chart_type === 'Flowchart' || node.type === 'text') ?\n                                        <>\n                                            <text\n                                                x={node.x + node.width / 2}\n                                                y={node.y + node.height / 2}\n                                                style={{ fontSize: 8 }}\n                                                textAnchor=\"middle\"\n                                                alignmentBaseline=\"middle\"\n                                            >\n                                                {\n                                                    node && node.name && node.name.toLowerCase().replace(/\\b[a-z]/g, function (letter) {\n                                                        return letter.toUpperCase();\n                                                    })\n                                                }\n                                            </text>\n                                        </>\n                                        : <></>\n                                }\n                            </g>);\n                        })\n                    }\n                </svg>\n            );\n        } else {\n            return <div>Loading</div>\n        }\n    }\n}"],"sourceRoot":""}